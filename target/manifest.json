{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.3", "generated_at": "2024-07-10T13:14:29.947747Z", "invocation_id": "a9b4c786-7c3c-417e-8e85-f26caf6dd3ab", "env": {}, "project_name": "sap_order_to_cash", "project_id": "6cbc291e10cc75249c937fb0f1e5248a", "user_id": "d842614f-4455-4e52-9af2-977123ddb6b6", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.sap_order_to_cash.calendar_date_dim": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "calendar_date_dim", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "calendar_date_dim.sql", "original_file_path": "models/calendar_date_dim.sql", "unique_id": "model.sap_order_to_cash.calendar_date_dim", "fqn": ["sap_order_to_cash", "calendar_date_dim"], "alias": "calendar_date_dim", "checksum": {"name": "sha256", "checksum": "8140ea80aa42778eb36c97525c96099cdeb20c7c517f5637e09cc1296d5a443a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/calendar_date_dim.sql", "unrendered_config": {"file_format": "delta", "materialized": "table"}, "created_at": 1720602946.3127303, "relation_name": "SSI_SAP_TO_SNOW.REPORT.calendar_date_dim", "raw_code": "WITH calendar_date_dim AS (\n    SELECT\n        date_seq.date_value AS Date,\n        CAST(TO_CHAR(date_seq.date_value, 'YYYYMMDD') AS BIGINT) AS DateInt,\n        TO_CHAR(date_seq.date_value, 'YYYYMMDD') AS DateStr,\n        TO_CHAR(date_seq.date_value, 'YYYY-MM-DD') AS DateStr2,\n        EXTRACT(YEAR FROM date_seq.date_value) AS CalYear,\n        CASE WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN 1 ELSE 2 END AS CalSemester,\n        EXTRACT(QUARTER FROM date_seq.date_value) AS CalQuarter,\n        EXTRACT(MONTH FROM date_seq.date_value) AS CalMonth,\n        EXTRACT(WEEK FROM date_seq.date_value) AS CalWeek,\n        TO_CHAR(EXTRACT(YEAR FROM date_seq.date_value)) AS CalYearStr,\n        CASE WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN '01' ELSE '02' END AS CalSemesterStr,\n        CASE WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN 'S1' ELSE 'S2' END AS CalSemesterStr2,\n        '0' || EXTRACT(QUARTER FROM date_seq.date_value) AS CalQuarterStr,\n        'Q' || EXTRACT(QUARTER FROM date_seq.date_value) AS CalQuarterStr2,\n        TO_CHAR(date_seq.date_value, 'MMMM') AS CalMonthLongStr,\n        TO_CHAR(date_seq.date_value, 'MMM') AS CalMonthShortStr,\n        LPAD(TO_CHAR(EXTRACT(WEEK FROM date_seq.date_value)), 2, '0') AS CalWeekStr,\n        TO_CHAR(date_seq.date_value, 'EEEE') AS DayNameLong,\n        TO_CHAR(date_seq.date_value, 'EEE') AS DayNameShort,\n        EXTRACT(DAYOFWEEK FROM date_seq.date_value) AS DayOfWeek,\n        EXTRACT(DAY FROM date_seq.date_value) AS DayOfMonth,\n        DATE_PART(DAY, DATEADD(DAY, -1, DATE_TRUNC('QUARTER', date_seq.date_value))) AS DayOfQuarter,\n        CASE\n            WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN EXTRACT(DOY FROM date_seq.date_value)\n            WHEN EXTRACT(QUARTER FROM date_seq.date_value) = 3 THEN EXTRACT(DOY FROM date_seq.date_value) - EXTRACT(DOY FROM DATEADD(DAY, -1, DATE_TRUNC('QUARTER', date_seq.date_value)))\n            ELSE EXTRACT(DOY FROM date_seq.date_value) - EXTRACT(DOY FROM DATE_TRUNC('QUARTER', DATEADD(MONTH, -3, date_seq.date_value)))\n        END AS DayOfSemester,\n        EXTRACT(DOY FROM date_seq.date_value) AS DayOfYear,\n        CASE\n            WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN EXTRACT(YEAR FROM date_seq.date_value) || 'S1'\n            ELSE EXTRACT(YEAR FROM date_seq.date_value) || 'S2'\n        END AS YearSemester,\n        EXTRACT(YEAR FROM date_seq.date_value) || 'Q' || EXTRACT(QUARTER FROM date_seq.date_value) AS YearQuarter,\n        CAST(TO_CHAR(date_seq.date_value, 'YYYYMM') AS STRING) AS YearMonth,\n        EXTRACT(YEAR FROM date_seq.date_value) || ' ' || TO_CHAR(date_seq.date_value, 'MMM') AS YearMonth2,\n        CONCAT(TO_CHAR(EXTRACT(YEAR FROM date_seq.date_value)), LPAD(TO_CHAR(EXTRACT(WEEK FROM date_seq.date_value)), 2, '0')) AS YearWeek,\n        (DATE_TRUNC('YEAR', date_seq.date_value) = date_seq.date_value) AS IsFirstDayOfYear,\n        (DATEADD(DAY, -1, DATEADD(YEAR, 1, DATE_TRUNC('YEAR', date_seq.date_value))) = date_seq.date_value) AS IsLastDayOfYear,\n        (EXTRACT(MONTH FROM date_seq.date_value) IN (1, 7) AND EXTRACT(DAY FROM date_seq.date_value) = 1) AS IsFirstDayOfSemester,\n        ((EXTRACT(MONTH FROM date_seq.date_value) = 6 AND EXTRACT(DAY FROM date_seq.date_value) = 30) OR (EXTRACT(MONTH FROM date_seq.date_value) = 12 AND EXTRACT(DAY FROM date_seq.date_value) = 31)) AS IsLastDayOfSemester,\n        (DATE_TRUNC('QUARTER', date_seq.date_value) = date_seq.date_value) AS IsFirstDayOfQuarter,\n        (DATEADD(DAY, -1, DATEADD(MONTH, 3, DATE_TRUNC('QUARTER', date_seq.date_value))) = date_seq.date_value) AS IsLastDayOfQuarter,\n        (DATE_TRUNC('MONTH', date_seq.date_value) = date_seq.date_value) AS IsFirstDayOfMonth,\n        (LAST_DAY(date_seq.date_value) = date_seq.date_value) AS IsLastDayOfMonth,\n        (DATE_TRUNC('WEEK', date_seq.date_value) = date_seq.date_value) AS IsFirstDayOfWeek,\n        (DATEADD(DAY, 6, DATE_TRUNC('WEEK', date_seq.date_value)) = date_seq.date_value) AS IsLastDayOfWeek,\n        ((MOD(EXTRACT(YEAR FROM date_seq.date_value), 4) = 0 AND MOD(EXTRACT(YEAR FROM date_seq.date_value), 100) != 0) OR MOD(EXTRACT(YEAR FROM date_seq.date_value), 400) = 0) AS IsLeapYear,\n        (TO_CHAR(date_seq.date_value, 'EEEE') NOT IN ('Saturday', 'Sunday')) AS IsWeekDay,\n        (TO_CHAR(date_seq.date_value, 'EEEE') IN ('Saturday', 'Sunday')) AS IsWeekEnd,\n        DATE_TRUNC('WEEK', date_seq.date_value) AS WeekStartDate,\n        DATEADD(DAY, 6, DATE_TRUNC('WEEK', date_seq.date_value)) AS WeekEndDate,\n        DATE_TRUNC('MONTH', date_seq.date_value) AS MonthStartDate,\n        LAST_DAY(date_seq.date_value) AS MonthEndDate,\n        (EXTRACT(WEEK FROM DATEADD(DAY, -1, DATEADD(YEAR, 1, DATE_TRUNC('YEAR', date_seq.date_value)))) = 53) AS Has53Weeks\n    FROM TABLE(\n        GENERATOR(\n            ROWCOUNT => DATE_PART('day', DATEADD(YEAR, 20, CURRENT_DATE())) \n                        - DATE_PART('day', DATEADD(YEAR, -20, CURRENT_DATE()))\n        )\n    ) AS gen\n    JOIN LATERAL (\n        SELECT DATEADD(DAY, SEQ4(), DATE_TRUNC('YEAR', DATEADD(YEAR, -20, CURRENT_DATE()))) AS date_value\n        FROM TABLE(GENERATOR(ROWCOUNT => 365 * 40))\n    ) AS date_seq\n)\n\nSELECT * FROM calendar_date_dim\n\n\n\n\n\n-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n\n\n\n-- with calendar_date_dim AS (\n--     SELECT\n--         dt.col AS Date,\n--         CAST(date_format(dt.col, 'yyyyMMdd') AS BIGINT) AS DateInt,\n--         date_format(dt.col, 'yyyyMMdd') AS DateStr,\n--         date_format(dt.col, 'yyyy-MM-dd') AS DateStr2,\n--         EXTRACT(YEAR FROM dt.col) AS CalYear,\n--         IF(EXTRACT(QUARTER FROM dt.col) IN (1, 2), 1, 2) AS CalSemester,\n--         EXTRACT(QUARTER FROM dt.col) AS CalQuarter,\n--         EXTRACT(MONTH FROM dt.col) AS CalMonth,\n--         EXTRACT(WEEK FROM dt.col) AS CalWeek,\n--         CAST(EXTRACT(YEAR FROM dt.col) AS STRING) AS CalYearStr,\n--         IF(EXTRACT(QUARTER FROM dt.col) IN (1, 2), '01', '02') AS CalSemesterStr,\n--         IF(EXTRACT(QUARTER FROM dt.col) IN (1, 2), 'S1', 'S2') AS CalSemesterStr2,\n--         '0' || EXTRACT(QUARTER FROM dt.col) AS CalQuarterStr,\n--         'Q' || EXTRACT(QUARTER FROM dt.col) AS CalQuarterStr2,\n--         date_format(dt.col, 'MMMM') AS CalMonthLongStr,\n--         date_format(dt.col, 'MMM') AS CalMonthShortStr,\n--         '0' || (EXTRACT(WEEK FROM dt.col)) AS CalWeekStr,\n--         date_format(dt.col, 'EEEE') AS DayNameLong,\n--         date_format(dt.col, 'EEE') AS DayNameShort,\n--         EXTRACT(DAYOFWEEK FROM dt.col) AS DayOfWeek,\n--         dayofmonth(dt.col) AS DayOfMonth,\n--         DATE_DIFF(DAY, dt.col, DATE_TRUNC('QUARTER', dt.col)) + 1 AS DayOfQuarter,\n--         IF(\n--             EXTRACT(QUARTER FROM dt.col) IN (1, 2),\n--             dayofyear(dt.col),\n--             IF(\n--             EXTRACT(QUARTER FROM dt.col) = 3,\n--             dayofyear(dt.col) - dayofyear(DATE_SUB(DATE_TRUNC('QUARTER', dt.col), 1)),\n--             dayofyear(dt.col) - dayofyear(DATE_TRUNC('QUARTER', dt.col - INTERVAL '3' MONTH))\n--             )\n--         ) AS DayOfSemester,\n--         dayofyear(dt.col) AS DayOfYear,\n--         IF(\n--             EXTRACT(QUARTER FROM dt.col) IN (1, 2),\n--             EXTRACT(YEAR FROM dt.col) || 'S1',\n--             EXTRACT(YEAR FROM dt.col) || 'S2'\n--         ) AS YearSemester,\n--         EXTRACT(YEAR FROM dt.col) || 'Q' || EXTRACT(QUARTER FROM dt.col) AS YearQuarter,\n--         CAST(date_format(dt.col, 'yyyyMM') AS STRING) AS YearMonth,\n--         EXTRACT(YEAR FROM dt.col) || ' ' || date_format(dt.col, 'MMM') AS YearMonth2,\n--         concat(date_format(dt.col, 'yyyy'), lpad(weekofyear(dt.col), 2, '0')) AS YearWeek,\n--         (DATE_TRUNC('YEAR', dt.col) = dt.col) AS IsFirstDayOfYear,\n--         ((DATE_TRUNC('YEAR', dt.col) + INTERVAL '1' YEAR ) - INTERVAL 1 DAY = dt.col) AS IsLastDayOfYear,\n--         (EXTRACT(MONTH FROM dt.col) IN (1, 7) AND EXTRACT(DAY FROM dt.col) = 1) AS IsFirstDayOfSemester,\n--         ((EXTRACT(MONTH FROM dt.col) IN (6) AND EXTRACT(DAY FROM dt.col) IN (30))\n--             OR (EXTRACT(MONTH FROM dt.col) IN (12) AND EXTRACT(DAY FROM dt.col) IN (31))) AS IsLastDayOfSemester,\n--         (DATE_TRUNC('QUARTER', dt.col) = dt.col) AS IsFirstDayOfQuarter,\n--         ((DATE_TRUNC('QUARTER', dt.col) + INTERVAL '3' MONTH) - INTERVAL 1 DAY = dt.col) AS IsLastDayOfQuarter,\n--         (DATE_TRUNC('MONTH', dt.col) = dt.col) AS IsFirstDayOfMonth,\n--         (LAST_DAY(dt.col) = dt.col) AS IsLastDayOfMonth,\n--         (DATE_TRUNC('WEEK', dt.col) = dt.col) AS IsFirstDayOfWeek,\n--         (DATE_TRUNC('WEEK', dt.col) + INTERVAL 6 DAY = dt.col) AS IsLastDayOfWeek,\n--         ((MOD(EXTRACT(YEAR FROM dt.col), 4) = 0 AND MOD(EXTRACT(YEAR FROM dt.col), 100) != 0)\n--             OR MOD(EXTRACT(YEAR FROM dt.col), 400) = 0) AS IsLeapYear,\n--         (date_format(dt.col, 'EEEE') NOT IN ('Saturday', 'Sunday')) AS IsWeekDay,\n--         (date_format(dt.col, 'EEEE') IN ('Saturday', 'Sunday')) AS IsWeekEnd,\n--         (DATE_TRUNC('WEEK', dt.col)) AS WeekStartDate,\n--         (DATE_TRUNC('WEEK', dt.col) + INTERVAL 6 DAY) AS WeekEndDate,\n--         (DATE_TRUNC('MONTH',  dt.col)) AS MonthStartDate,\n--         (LAST_DAY(dt.col)) AS MonthEndDate,\n--         (weekofyear((DATE_TRUNC('YEAR', dt.col) + INTERVAL '1' YEAR ) - INTERVAL 1 DAY) = 53) AS Has53Weeks\n--     FROM explode(\n--         sequence(\n--         DATE_TRUNC('YEAR', CURRENT_DATE()) - INTERVAL '20' YEAR,\n--         LAST_DAY(CURRENT_DATE()) + INTERVAL '20' YEAR,\n--         INTERVAL 1 DAY)\n--     ) AS dt\n-- )\n\n-- SELECT * FROM calendar_date_dim", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/sap_order_to_cash/models/calendar_date_dim.sql", "compiled": true, "compiled_code": "WITH calendar_date_dim AS (\n    SELECT\n        date_seq.date_value AS Date,\n        CAST(TO_CHAR(date_seq.date_value, 'YYYYMMDD') AS BIGINT) AS DateInt,\n        TO_CHAR(date_seq.date_value, 'YYYYMMDD') AS DateStr,\n        TO_CHAR(date_seq.date_value, 'YYYY-MM-DD') AS DateStr2,\n        EXTRACT(YEAR FROM date_seq.date_value) AS CalYear,\n        CASE WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN 1 ELSE 2 END AS CalSemester,\n        EXTRACT(QUARTER FROM date_seq.date_value) AS CalQuarter,\n        EXTRACT(MONTH FROM date_seq.date_value) AS CalMonth,\n        EXTRACT(WEEK FROM date_seq.date_value) AS CalWeek,\n        TO_CHAR(EXTRACT(YEAR FROM date_seq.date_value)) AS CalYearStr,\n        CASE WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN '01' ELSE '02' END AS CalSemesterStr,\n        CASE WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN 'S1' ELSE 'S2' END AS CalSemesterStr2,\n        '0' || EXTRACT(QUARTER FROM date_seq.date_value) AS CalQuarterStr,\n        'Q' || EXTRACT(QUARTER FROM date_seq.date_value) AS CalQuarterStr2,\n        TO_CHAR(date_seq.date_value, 'MMMM') AS CalMonthLongStr,\n        TO_CHAR(date_seq.date_value, 'MMM') AS CalMonthShortStr,\n        LPAD(TO_CHAR(EXTRACT(WEEK FROM date_seq.date_value)), 2, '0') AS CalWeekStr,\n        TO_CHAR(date_seq.date_value, 'EEEE') AS DayNameLong,\n        TO_CHAR(date_seq.date_value, 'EEE') AS DayNameShort,\n        EXTRACT(DAYOFWEEK FROM date_seq.date_value) AS DayOfWeek,\n        EXTRACT(DAY FROM date_seq.date_value) AS DayOfMonth,\n        DATE_PART(DAY, DATEADD(DAY, -1, DATE_TRUNC('QUARTER', date_seq.date_value))) AS DayOfQuarter,\n        CASE\n            WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN EXTRACT(DOY FROM date_seq.date_value)\n            WHEN EXTRACT(QUARTER FROM date_seq.date_value) = 3 THEN EXTRACT(DOY FROM date_seq.date_value) - EXTRACT(DOY FROM DATEADD(DAY, -1, DATE_TRUNC('QUARTER', date_seq.date_value)))\n            ELSE EXTRACT(DOY FROM date_seq.date_value) - EXTRACT(DOY FROM DATE_TRUNC('QUARTER', DATEADD(MONTH, -3, date_seq.date_value)))\n        END AS DayOfSemester,\n        EXTRACT(DOY FROM date_seq.date_value) AS DayOfYear,\n        CASE\n            WHEN EXTRACT(QUARTER FROM date_seq.date_value) IN (1, 2) THEN EXTRACT(YEAR FROM date_seq.date_value) || 'S1'\n            ELSE EXTRACT(YEAR FROM date_seq.date_value) || 'S2'\n        END AS YearSemester,\n        EXTRACT(YEAR FROM date_seq.date_value) || 'Q' || EXTRACT(QUARTER FROM date_seq.date_value) AS YearQuarter,\n        CAST(TO_CHAR(date_seq.date_value, 'YYYYMM') AS STRING) AS YearMonth,\n        EXTRACT(YEAR FROM date_seq.date_value) || ' ' || TO_CHAR(date_seq.date_value, 'MMM') AS YearMonth2,\n        CONCAT(TO_CHAR(EXTRACT(YEAR FROM date_seq.date_value)), LPAD(TO_CHAR(EXTRACT(WEEK FROM date_seq.date_value)), 2, '0')) AS YearWeek,\n        (DATE_TRUNC('YEAR', date_seq.date_value) = date_seq.date_value) AS IsFirstDayOfYear,\n        (DATEADD(DAY, -1, DATEADD(YEAR, 1, DATE_TRUNC('YEAR', date_seq.date_value))) = date_seq.date_value) AS IsLastDayOfYear,\n        (EXTRACT(MONTH FROM date_seq.date_value) IN (1, 7) AND EXTRACT(DAY FROM date_seq.date_value) = 1) AS IsFirstDayOfSemester,\n        ((EXTRACT(MONTH FROM date_seq.date_value) = 6 AND EXTRACT(DAY FROM date_seq.date_value) = 30) OR (EXTRACT(MONTH FROM date_seq.date_value) = 12 AND EXTRACT(DAY FROM date_seq.date_value) = 31)) AS IsLastDayOfSemester,\n        (DATE_TRUNC('QUARTER', date_seq.date_value) = date_seq.date_value) AS IsFirstDayOfQuarter,\n        (DATEADD(DAY, -1, DATEADD(MONTH, 3, DATE_TRUNC('QUARTER', date_seq.date_value))) = date_seq.date_value) AS IsLastDayOfQuarter,\n        (DATE_TRUNC('MONTH', date_seq.date_value) = date_seq.date_value) AS IsFirstDayOfMonth,\n        (LAST_DAY(date_seq.date_value) = date_seq.date_value) AS IsLastDayOfMonth,\n        (DATE_TRUNC('WEEK', date_seq.date_value) = date_seq.date_value) AS IsFirstDayOfWeek,\n        (DATEADD(DAY, 6, DATE_TRUNC('WEEK', date_seq.date_value)) = date_seq.date_value) AS IsLastDayOfWeek,\n        ((MOD(EXTRACT(YEAR FROM date_seq.date_value), 4) = 0 AND MOD(EXTRACT(YEAR FROM date_seq.date_value), 100) != 0) OR MOD(EXTRACT(YEAR FROM date_seq.date_value), 400) = 0) AS IsLeapYear,\n        (TO_CHAR(date_seq.date_value, 'EEEE') NOT IN ('Saturday', 'Sunday')) AS IsWeekDay,\n        (TO_CHAR(date_seq.date_value, 'EEEE') IN ('Saturday', 'Sunday')) AS IsWeekEnd,\n        DATE_TRUNC('WEEK', date_seq.date_value) AS WeekStartDate,\n        DATEADD(DAY, 6, DATE_TRUNC('WEEK', date_seq.date_value)) AS WeekEndDate,\n        DATE_TRUNC('MONTH', date_seq.date_value) AS MonthStartDate,\n        LAST_DAY(date_seq.date_value) AS MonthEndDate,\n        (EXTRACT(WEEK FROM DATEADD(DAY, -1, DATEADD(YEAR, 1, DATE_TRUNC('YEAR', date_seq.date_value)))) = 53) AS Has53Weeks\n    FROM TABLE(\n        GENERATOR(\n            ROWCOUNT => DATE_PART('day', DATEADD(YEAR, 20, CURRENT_DATE())) \n                        - DATE_PART('day', DATEADD(YEAR, -20, CURRENT_DATE()))\n        )\n    ) AS gen\n    JOIN LATERAL (\n        SELECT DATEADD(DAY, SEQ4(), DATE_TRUNC('YEAR', DATEADD(YEAR, -20, CURRENT_DATE()))) AS date_value\n        FROM TABLE(GENERATOR(ROWCOUNT => 365 * 40))\n    ) AS date_seq\n)\n\nSELECT * FROM calendar_date_dim\n\n\n\n\n\n-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n\n\n\n-- with calendar_date_dim AS (\n--     SELECT\n--         dt.col AS Date,\n--         CAST(date_format(dt.col, 'yyyyMMdd') AS BIGINT) AS DateInt,\n--         date_format(dt.col, 'yyyyMMdd') AS DateStr,\n--         date_format(dt.col, 'yyyy-MM-dd') AS DateStr2,\n--         EXTRACT(YEAR FROM dt.col) AS CalYear,\n--         IF(EXTRACT(QUARTER FROM dt.col) IN (1, 2), 1, 2) AS CalSemester,\n--         EXTRACT(QUARTER FROM dt.col) AS CalQuarter,\n--         EXTRACT(MONTH FROM dt.col) AS CalMonth,\n--         EXTRACT(WEEK FROM dt.col) AS CalWeek,\n--         CAST(EXTRACT(YEAR FROM dt.col) AS STRING) AS CalYearStr,\n--         IF(EXTRACT(QUARTER FROM dt.col) IN (1, 2), '01', '02') AS CalSemesterStr,\n--         IF(EXTRACT(QUARTER FROM dt.col) IN (1, 2), 'S1', 'S2') AS CalSemesterStr2,\n--         '0' || EXTRACT(QUARTER FROM dt.col) AS CalQuarterStr,\n--         'Q' || EXTRACT(QUARTER FROM dt.col) AS CalQuarterStr2,\n--         date_format(dt.col, 'MMMM') AS CalMonthLongStr,\n--         date_format(dt.col, 'MMM') AS CalMonthShortStr,\n--         '0' || (EXTRACT(WEEK FROM dt.col)) AS CalWeekStr,\n--         date_format(dt.col, 'EEEE') AS DayNameLong,\n--         date_format(dt.col, 'EEE') AS DayNameShort,\n--         EXTRACT(DAYOFWEEK FROM dt.col) AS DayOfWeek,\n--         dayofmonth(dt.col) AS DayOfMonth,\n--         DATE_DIFF(DAY, dt.col, DATE_TRUNC('QUARTER', dt.col)) + 1 AS DayOfQuarter,\n--         IF(\n--             EXTRACT(QUARTER FROM dt.col) IN (1, 2),\n--             dayofyear(dt.col),\n--             IF(\n--             EXTRACT(QUARTER FROM dt.col) = 3,\n--             dayofyear(dt.col) - dayofyear(DATE_SUB(DATE_TRUNC('QUARTER', dt.col), 1)),\n--             dayofyear(dt.col) - dayofyear(DATE_TRUNC('QUARTER', dt.col - INTERVAL '3' MONTH))\n--             )\n--         ) AS DayOfSemester,\n--         dayofyear(dt.col) AS DayOfYear,\n--         IF(\n--             EXTRACT(QUARTER FROM dt.col) IN (1, 2),\n--             EXTRACT(YEAR FROM dt.col) || 'S1',\n--             EXTRACT(YEAR FROM dt.col) || 'S2'\n--         ) AS YearSemester,\n--         EXTRACT(YEAR FROM dt.col) || 'Q' || EXTRACT(QUARTER FROM dt.col) AS YearQuarter,\n--         CAST(date_format(dt.col, 'yyyyMM') AS STRING) AS YearMonth,\n--         EXTRACT(YEAR FROM dt.col) || ' ' || date_format(dt.col, 'MMM') AS YearMonth2,\n--         concat(date_format(dt.col, 'yyyy'), lpad(weekofyear(dt.col), 2, '0')) AS YearWeek,\n--         (DATE_TRUNC('YEAR', dt.col) = dt.col) AS IsFirstDayOfYear,\n--         ((DATE_TRUNC('YEAR', dt.col) + INTERVAL '1' YEAR ) - INTERVAL 1 DAY = dt.col) AS IsLastDayOfYear,\n--         (EXTRACT(MONTH FROM dt.col) IN (1, 7) AND EXTRACT(DAY FROM dt.col) = 1) AS IsFirstDayOfSemester,\n--         ((EXTRACT(MONTH FROM dt.col) IN (6) AND EXTRACT(DAY FROM dt.col) IN (30))\n--             OR (EXTRACT(MONTH FROM dt.col) IN (12) AND EXTRACT(DAY FROM dt.col) IN (31))) AS IsLastDayOfSemester,\n--         (DATE_TRUNC('QUARTER', dt.col) = dt.col) AS IsFirstDayOfQuarter,\n--         ((DATE_TRUNC('QUARTER', dt.col) + INTERVAL '3' MONTH) - INTERVAL 1 DAY = dt.col) AS IsLastDayOfQuarter,\n--         (DATE_TRUNC('MONTH', dt.col) = dt.col) AS IsFirstDayOfMonth,\n--         (LAST_DAY(dt.col) = dt.col) AS IsLastDayOfMonth,\n--         (DATE_TRUNC('WEEK', dt.col) = dt.col) AS IsFirstDayOfWeek,\n--         (DATE_TRUNC('WEEK', dt.col) + INTERVAL 6 DAY = dt.col) AS IsLastDayOfWeek,\n--         ((MOD(EXTRACT(YEAR FROM dt.col), 4) = 0 AND MOD(EXTRACT(YEAR FROM dt.col), 100) != 0)\n--             OR MOD(EXTRACT(YEAR FROM dt.col), 400) = 0) AS IsLeapYear,\n--         (date_format(dt.col, 'EEEE') NOT IN ('Saturday', 'Sunday')) AS IsWeekDay,\n--         (date_format(dt.col, 'EEEE') IN ('Saturday', 'Sunday')) AS IsWeekEnd,\n--         (DATE_TRUNC('WEEK', dt.col)) AS WeekStartDate,\n--         (DATE_TRUNC('WEEK', dt.col) + INTERVAL 6 DAY) AS WeekEndDate,\n--         (DATE_TRUNC('MONTH',  dt.col)) AS MonthStartDate,\n--         (LAST_DAY(dt.col)) AS MonthEndDate,\n--         (weekofyear((DATE_TRUNC('YEAR', dt.col) + INTERVAL '1' YEAR ) - INTERVAL 1 DAY) = 53) AS Has53Weeks\n--     FROM explode(\n--         sequence(\n--         DATE_TRUNC('YEAR', CURRENT_DATE()) - INTERVAL '20' YEAR,\n--         LAST_DAY(CURRENT_DATE()) + INTERVAL '20' YEAR,\n--         INTERVAL 1 DAY)\n--     ) AS dt\n-- )\n\n-- SELECT * FROM calendar_date_dim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.billing": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "billing", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/billing.sql", "original_file_path": "models/views/billing.sql", "unique_id": "model.sap_order_to_cash.billing", "fqn": ["sap_order_to_cash", "views", "billing"], "alias": "billing", "checksum": {"name": "sha256", "checksum": "b02f1540ee9e8dd2fe2dd95ff7fa9d12f58967566c9fa3715e830ff33b36a02a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/billing.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.8838274, "relation_name": "SSI_SAP_TO_SNOW.REPORT.billing", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith billing AS (\n    SELECT\n        VBRK.MANDT AS Client_MANDT,\n        VBRK.FKART AS BillingType_FKART,\n        VBRK.FKTYP AS BillingCategory_FKTYP,\n        VBRK.VKORG AS SalesOrganization_VKORG,\n        VBRK.VTWEG AS DistributionChannel_VTWEG,\n        VBRK.SPART AS Division_SPART,\n        VBRK.VBTYP AS SDDocumentCategory_VBTYP,\n        VBRK.BZIRK AS SalesDistrict_BZIRK,\n        VBRK.PLTYP AS PriceListType_PLTYP,\n        VBRK.FKSTO AS BillingDocumentIsCancelled_FKSTO,\n        VBRK.KUNRG AS Payer_KUNRG,\n        VBRK.INCO1 AS IncotermsPart1_INCO1,\n        VBRK.INCO2 AS IncotermsPart2_INCO2,\n        VBRK.LAND1 AS DestinationCountry_LAND1,\n        VBRK.REGIO AS Region_REGIO,\n        VBRK.COUNC AS CountryCode_COUNC,\n        VBRK.CITYC AS CityCode_CITYC,\n        VBRK.TAXK1 AS TaxClassification1ForCustomer_TAXK1,\n        VBRK.TAXK2 AS TaxClassification2ForCustomer_TAXK2,\n        VBRK.TAXK3 AS TaxClassification3ForCustomer_TAXK3,\n        VBRK.TAXK4 AS TaxClassification4ForCustomer_TAXK4,\n        VBRK.TAXK5 AS TaxClassification5ForCustomer_TAXK5,\n        VBRK.LANDTX AS TaxDepartureCountry_LANDTX,\n        VBRK.STCEG_H AS OriginOfSalesTaxIDNumber_STCEG_H,\n        VBRK.STCEG_L AS CountryOfSalesTaxIDNumber_STCEG_L,\n        VBRK.XBLNR AS ReferenceDocumentNumber_XBLNR,\n        VBRK.KONDA AS CustomerPriceGroup_KONDA,\n        VBRK.RFBSK AS StatusForTransferToAccounting_RFBSK,\n        VBRK.FKDAT AS BillingDate_FKDAT,\n        VBRK.GJAHR AS FiscalYear_GJAHR,\n        VBRK.POPER AS PostingPeriod_POPER,\n        VBRK.ERDAT AS RecordCreationDate_ERDAT,\n        VBRK.AEDAT AS LastChangeDate_AEDAT,\n        VBRK.KDGRP AS CustomerGroup_KDGRP,\n        VBRK.ZLSCH AS PaymentMethod_ZLSCH,\n        VBRK.BUKRS AS CompanyCode_BUKRS,\n        VBRK.MSCHL AS DunningKey_MSCHL,\n        VBRK.MANSP AS DunningBlock_MANSP,\n        VBRK.KUNAG AS SoldToParty_KUNAG,\n        VBRK.FKART_AB AS AccrualBillingType_FKART,\n        VBRK.BELNR AS AccountingDocumentNumber_BELNR,\n        VBRK.VSBED AS ShippingConditions_VSBED,\n        VBRK.WAERK AS SdDocumentCurrency_WAERK,\n        VBRP.GSBER AS BusinessArea_GSBER,\n        VBRP.VBELN AS BillingDocument_VBELN,\n        VBRP.POSNR AS BillingItem_POSNR,\n        VBRP.PSTYV AS SalesDocumentItemCategory_PSTYV,\n        VBRP.POSAR AS ItemType_POSAR,\n        VBRP.KOSTL AS CostCenter_KOSTL,\n        VBRP.VKGRP AS SalesGroup_VKGRP,\n        VBRP.VKBUR AS SalesOffice_VKBUR,\n        VBRP.PRCTR AS ProfitCenter_PRCTR,\n        VBRP.KOKRS AS ControllingArea_KOKRS,\n        VBRP.VGTYP AS DocumentCategoryOfPrecedingSDDocument_VGTYP,\n        VBRP.MATNR AS MaterialNumber_MATNR,\n        VBRP.PMATN AS PricingReferenceMaterial_PMATN,\n        VBRP.CHARG AS BatchNumber_CHARG,\n        VBRP.MATKL AS MaterialGroup_MATKL,\n        VBRP.PRODH AS ProductHierarchy_PRODH,\n        VBRP.WERKS AS Plant_WERKS,\n        VBRP.KONDM AS MaterialPriceGroup_KONDM,\n        VBRP.LGORT AS StorageLocation_LGORT,\n        VBRP.EAN11 AS InternationalArticleNumber_EAN11,\n        VBRP.MVGR1 AS MaterialGroup1_MVGR1,\n        VBRP.MVGR2 AS MaterialGroup2_MVGR2,\n        VBRP.MVGR3 AS MaterialGroup3_MVGR3,\n        VBRP.MVGR4 AS MaterialGroup4_MVGR4,\n        VBRP.MVGR5 AS MaterialGroup5_MVGR5,\n        VBRP.SERNR AS BOMExplosionNumber_SERNR,\n        VBRP.KVGR1 AS CustomerGroup1_KVGR1,\n        VBRP.KVGR2 AS CustomerGroup2_KVGR2,\n        VBRP.KVGR3 AS CustomerGroup3_KVGR3,\n        VBRP.KVGR4 AS CustomerGroup4_KVGR4,\n        VBRP.KVGR5 AS CustomerGroup5_KVGR5,\n        VBRP.TXJCD AS TaxJurisdiction_TXJCD,\n        VBRP.VSTEL AS ShippingPointReceivingPoint_VSTEL,\n        VBRP.VGBEL AS DocumentNumberOfTheReferenceDocument_VGBEL,\n        VBRP.VGPOS AS ItemNumberOfTheReferenceItem_VGPOS,\n        VBRP.AUBEL AS SalesDocument_AUBEL,\n        VBRP.AUPOS AS SalesDocumentItem_AUPOS,\n        VBRP.FKIMG AS ActualBilledQuantity_FKIMG,\n        VBRP.VOLUM AS Volume_VOLUM,\n        VBRP.BRGEW AS GrossWeight_BRGEW,\n        VBRP.NTGEW AS NetWeight_NTGEW,\n\n        CalendarDateDimension_FKDAT.CalYear AS YearOfBillingDate_FKDAT,\n        CalendarDateDimension_FKDAT.CalMonth AS MonthOfBillingDate_FKDAT,\n        CalendarDateDimension_FKDAT.CalWeek AS WeekOfBillingDate_FKDAT,\n        CalendarDateDimension_FKDAT.CalQuarter AS DayOfBillingDate_FKDAT,\n        COALESCE(VBRP.NETWR * currency_decimal.CURRFIX, VBRP.NETWR) AS NetValue_NETWR,\n        COALESCE(VBRK.MWSBK * currency_decimal.CURRFIX, VBRK.MWSBK) AS TaxAmount_MWSBK,\n        COALESCE(VBRP.MWSBP * currency_decimal.CURRFIX, VBRP.MWSBP) AS TaxAmountPos_MWSBP,\n \n        COUNT(VBRK.VBELN) OVER(PARTITION BY CalendarDateDimension_FKDAT.CalYear) AS YearOrderCount,\n        COUNT(VBRK.VBELN) OVER(PARTITION BY CalendarDateDimension_FKDAT.CalYear, CalendarDateDimension_FKDAT.CalMonth) AS MonthOrderCount,\n        COUNT(VBRK.VBELN) OVER(PARTITION BY CalendarDateDimension_FKDAT.CalYear, CalendarDateDimension_FKDAT.CalMonth, CalendarDateDimension_FKDAT.CalWeek) AS WeekOrderCount\n    FROM {{ source(\"source_db\", \"vbrk\") }} AS VBRK\n    INNER JOIN {{ source(\"source_db\", \"vbrp\") }} AS VBRP\n        ON\n        VBRK.VBELN = VBRP.VBELN\n        AND VBRK.MANDT = VBRP.MANDT\n\n    LEFT JOIN {{ ref(\"currency_decimal\") }} AS currency_decimal\n        ON vbrk.WAERK = currency_decimal.CURRKEY\n    LEFT JOIN calendar_date_dim AS CalendarDateDimension_FKDAT\n        ON CalendarDateDimension_FKDAT.Date = VBRK.FKDAT\n)\n\nSELECT * FROM billing", "language": "sql", "refs": [{"name": "currency_decimal", "package": null, "version": null}], "sources": [["source_db", "vbrk"], ["source_db", "vbrp"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.vbrk", "source.sap_order_to_cash.source_db.vbrp", "model.sap_order_to_cash.currency_decimal"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/billing.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith billing AS (\n    SELECT\n        VBRK.MANDT AS Client_MANDT,\n        VBRK.FKART AS BillingType_FKART,\n        VBRK.FKTYP AS BillingCategory_FKTYP,\n        VBRK.VKORG AS SalesOrganization_VKORG,\n        VBRK.VTWEG AS DistributionChannel_VTWEG,\n        VBRK.SPART AS Division_SPART,\n        VBRK.VBTYP AS SDDocumentCategory_VBTYP,\n        VBRK.BZIRK AS SalesDistrict_BZIRK,\n        VBRK.PLTYP AS PriceListType_PLTYP,\n        VBRK.FKSTO AS BillingDocumentIsCancelled_FKSTO,\n        VBRK.KUNRG AS Payer_KUNRG,\n        VBRK.INCO1 AS IncotermsPart1_INCO1,\n        VBRK.INCO2 AS IncotermsPart2_INCO2,\n        VBRK.LAND1 AS DestinationCountry_LAND1,\n        VBRK.REGIO AS Region_REGIO,\n        VBRK.COUNC AS CountryCode_COUNC,\n        VBRK.CITYC AS CityCode_CITYC,\n        VBRK.TAXK1 AS TaxClassification1ForCustomer_TAXK1,\n        VBRK.TAXK2 AS TaxClassification2ForCustomer_TAXK2,\n        VBRK.TAXK3 AS TaxClassification3ForCustomer_TAXK3,\n        VBRK.TAXK4 AS TaxClassification4ForCustomer_TAXK4,\n        VBRK.TAXK5 AS TaxClassification5ForCustomer_TAXK5,\n        VBRK.LANDTX AS TaxDepartureCountry_LANDTX,\n        VBRK.STCEG_H AS OriginOfSalesTaxIDNumber_STCEG_H,\n        VBRK.STCEG_L AS CountryOfSalesTaxIDNumber_STCEG_L,\n        VBRK.XBLNR AS ReferenceDocumentNumber_XBLNR,\n        VBRK.KONDA AS CustomerPriceGroup_KONDA,\n        VBRK.RFBSK AS StatusForTransferToAccounting_RFBSK,\n        VBRK.FKDAT AS BillingDate_FKDAT,\n        VBRK.GJAHR AS FiscalYear_GJAHR,\n        VBRK.POPER AS PostingPeriod_POPER,\n        VBRK.ERDAT AS RecordCreationDate_ERDAT,\n        VBRK.AEDAT AS LastChangeDate_AEDAT,\n        VBRK.KDGRP AS CustomerGroup_KDGRP,\n        VBRK.ZLSCH AS PaymentMethod_ZLSCH,\n        VBRK.BUKRS AS CompanyCode_BUKRS,\n        VBRK.MSCHL AS DunningKey_MSCHL,\n        VBRK.MANSP AS DunningBlock_MANSP,\n        VBRK.KUNAG AS SoldToParty_KUNAG,\n        VBRK.FKART_AB AS AccrualBillingType_FKART,\n        VBRK.BELNR AS AccountingDocumentNumber_BELNR,\n        VBRK.VSBED AS ShippingConditions_VSBED,\n        VBRK.WAERK AS SdDocumentCurrency_WAERK,\n        VBRP.GSBER AS BusinessArea_GSBER,\n        VBRP.VBELN AS BillingDocument_VBELN,\n        VBRP.POSNR AS BillingItem_POSNR,\n        VBRP.PSTYV AS SalesDocumentItemCategory_PSTYV,\n        VBRP.POSAR AS ItemType_POSAR,\n        VBRP.KOSTL AS CostCenter_KOSTL,\n        VBRP.VKGRP AS SalesGroup_VKGRP,\n        VBRP.VKBUR AS SalesOffice_VKBUR,\n        VBRP.PRCTR AS ProfitCenter_PRCTR,\n        VBRP.KOKRS AS ControllingArea_KOKRS,\n        VBRP.VGTYP AS DocumentCategoryOfPrecedingSDDocument_VGTYP,\n        VBRP.MATNR AS MaterialNumber_MATNR,\n        VBRP.PMATN AS PricingReferenceMaterial_PMATN,\n        VBRP.CHARG AS BatchNumber_CHARG,\n        VBRP.MATKL AS MaterialGroup_MATKL,\n        VBRP.PRODH AS ProductHierarchy_PRODH,\n        VBRP.WERKS AS Plant_WERKS,\n        VBRP.KONDM AS MaterialPriceGroup_KONDM,\n        VBRP.LGORT AS StorageLocation_LGORT,\n        VBRP.EAN11 AS InternationalArticleNumber_EAN11,\n        VBRP.MVGR1 AS MaterialGroup1_MVGR1,\n        VBRP.MVGR2 AS MaterialGroup2_MVGR2,\n        VBRP.MVGR3 AS MaterialGroup3_MVGR3,\n        VBRP.MVGR4 AS MaterialGroup4_MVGR4,\n        VBRP.MVGR5 AS MaterialGroup5_MVGR5,\n        VBRP.SERNR AS BOMExplosionNumber_SERNR,\n        VBRP.KVGR1 AS CustomerGroup1_KVGR1,\n        VBRP.KVGR2 AS CustomerGroup2_KVGR2,\n        VBRP.KVGR3 AS CustomerGroup3_KVGR3,\n        VBRP.KVGR4 AS CustomerGroup4_KVGR4,\n        VBRP.KVGR5 AS CustomerGroup5_KVGR5,\n        VBRP.TXJCD AS TaxJurisdiction_TXJCD,\n        VBRP.VSTEL AS ShippingPointReceivingPoint_VSTEL,\n        VBRP.VGBEL AS DocumentNumberOfTheReferenceDocument_VGBEL,\n        VBRP.VGPOS AS ItemNumberOfTheReferenceItem_VGPOS,\n        VBRP.AUBEL AS SalesDocument_AUBEL,\n        VBRP.AUPOS AS SalesDocumentItem_AUPOS,\n        VBRP.FKIMG AS ActualBilledQuantity_FKIMG,\n        VBRP.VOLUM AS Volume_VOLUM,\n        VBRP.BRGEW AS GrossWeight_BRGEW,\n        VBRP.NTGEW AS NetWeight_NTGEW,\n\n        CalendarDateDimension_FKDAT.CalYear AS YearOfBillingDate_FKDAT,\n        CalendarDateDimension_FKDAT.CalMonth AS MonthOfBillingDate_FKDAT,\n        CalendarDateDimension_FKDAT.CalWeek AS WeekOfBillingDate_FKDAT,\n        CalendarDateDimension_FKDAT.CalQuarter AS DayOfBillingDate_FKDAT,\n        COALESCE(VBRP.NETWR * currency_decimal.CURRFIX, VBRP.NETWR) AS NetValue_NETWR,\n        COALESCE(VBRK.MWSBK * currency_decimal.CURRFIX, VBRK.MWSBK) AS TaxAmount_MWSBK,\n        COALESCE(VBRP.MWSBP * currency_decimal.CURRFIX, VBRP.MWSBP) AS TaxAmountPos_MWSBP,\n \n        COUNT(VBRK.VBELN) OVER(PARTITION BY CalendarDateDimension_FKDAT.CalYear) AS YearOrderCount,\n        COUNT(VBRK.VBELN) OVER(PARTITION BY CalendarDateDimension_FKDAT.CalYear, CalendarDateDimension_FKDAT.CalMonth) AS MonthOrderCount,\n        COUNT(VBRK.VBELN) OVER(PARTITION BY CalendarDateDimension_FKDAT.CalYear, CalendarDateDimension_FKDAT.CalMonth, CalendarDateDimension_FKDAT.CalWeek) AS WeekOrderCount\n    FROM SSI_SAP_TO_SNOW.RAW.vbrk AS VBRK\n    INNER JOIN SSI_SAP_TO_SNOW.RAW.vbrp AS VBRP\n        ON\n        VBRK.VBELN = VBRP.VBELN\n        AND VBRK.MANDT = VBRP.MANDT\n\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.currency_decimal AS currency_decimal\n        ON vbrk.WAERK = currency_decimal.CURRKEY\n    LEFT JOIN calendar_date_dim AS CalendarDateDimension_FKDAT\n        ON CalendarDateDimension_FKDAT.Date = VBRK.FKDAT\n)\n\nSELECT * FROM billing", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.deliveries": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "deliveries", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/deliveries.sql", "original_file_path": "models/views/deliveries.sql", "unique_id": "model.sap_order_to_cash.deliveries", "fqn": ["sap_order_to_cash", "views", "deliveries"], "alias": "deliveries", "checksum": {"name": "sha256", "checksum": "5509aad6576eab4938a92c7b2fb09a35cbf0a394bc8aabae61897811c5c45d69"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/deliveries.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.8884585, "relation_name": "SSI_SAP_TO_SNOW.REPORT.deliveries", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith deliveries AS (\n    SELECT\n        LIKP.MANDT AS Client_MANDT,\n        LIKP.VBELN AS Delivery_VBELN,\n        LIKP.ERNAM AS CreatedBy_ERNAM,\n        LIKP.ERZET AS CreateTime_ERZET,\n        LIKP.ERDAT AS DateCreated_ERDAT,\n        LIKP.BZIRK AS SalesDistrict_BZIRK,\n        LIKP.VSTEL AS ShippingPointreceivingPoint_VSTEL,\n        LIKP.VKORG AS SalesOrganization_VKORG,\n        LIKP.LFART AS DeliveryType_LFART,\n        LIKP.AUTLF AS CompleteDeliveryDefinedForEachSalesOrder_AUTLF,\n        LIKP.KZAZU AS OrderCombinationIndicator_KZAZU,\n        LIKP.WADAT AS PlannedGoodsMovementDate_WADAT,\n        LIKP.LDDAT AS LoadingDate_LDDAT,\n        LIKP.TDDAT AS TransportationPlanningDate_TDDAT,\n        LIKP.LFDAT AS DeliveryDate_LFDAT,\n        LIKP.LFUHR AS DeliveryTime_LFUHR,\n        LIKP.KODAT AS PickingDate_KODAT,\n        LIKP.ABLAD AS UnloadingPoint_ABLAD,\n        LIKP.INCO1 AS Incoterms__part1___INCO1,\n        LIKP.INCO2 AS Incoterms__part2___INCO2,\n        LIKP.EXPKZ AS ExportIndicator_EXPKZ,\n        LIKP.ROUTE AS Route_ROUTE,\n        LIKP.FAKSK AS BillingBlockInSdDocument_FAKSK,\n        LIKP.LIFSK AS DeliveryBlock_DocumentHeader_LIFSK,\n        LIKP.VBTYP AS SdDocumentCategory_VBTYP,\n        LIKP.KNFAK AS CustomerFactoryCalendar_KNFAK,\n        LIKP.LPRIO AS DeliveryPriority_LPRIO,\n        LIKP.VSBED AS ShippingConditions_VSBED,\n        LIKP.KUNNR AS ShipToParty_KUNNR,\n        LIKP.KUNAG AS SoldToParty_KUNAG,\n        LIKP.KDGRP AS CustomerGroup_KDGRP,\n        LIKP.BTGEW AS TotalWeight_BTGEW,\n        LIKP.NTGEW AS NetWeightHdr_NTGEW,\n        LIKP.GEWEI AS WeightUnitHdr_GEWEI,\n        LIKP.VOLUM AS VolumeHdr_VOLUM,\n        LIKP.VOLEH AS VolumeUnitHdr_VOLEH,\n        LIKP.ANZPK AS TotalNumberOfPackagesInDelivery_ANZPK,\n        LIKP.BEROT AS PickedItemsLocation_BEROT,\n        LIKP.LFUHR AS TimeOfDelivery_LFUHR,\n        LIKP.GRULG AS WeightGroupForDelivery_GRULG,\n        LIKP.LSTEL AS LoadingPoint_LSTEL,\n        LIKP.TRAGR AS TransportationGroupHdr_TRAGR,\n        LIKP.FKARV AS ProposedBillingTypeForADeliveryRelatedBillingDoc_FKARV,\n        LIKP.FKDAT AS BillingDateForBillingIndexAndPrintout_FKDAT,\n        LIKP.PERFK AS InvoiceDates_PERFK,\n        LIKP.ROUTA AS Route_ROUTA,\n        LIKP.STAFO AS UpdateGroupForStatisticsHdr_STAFO,\n        LIKP.KALSM AS PricingProcedure_KALSM,\n        LIKP.KNUMV AS NumberOfTheDocumentCondition_KNUMV,\n        LIKP.WAERK AS SdDocumentCurrency_WAERK,\n        LIKP.VKBUR AS SalesOfficeHdr_VKBUR,\n        LIKP.VBEAK AS ShippingProcessingTimeForTheEntireDocument_VBEAK,\n        LIKP.ZUKRL AS CombinationCriteriaForDelivery_ZUKRL,\n        LIKP.VERUR AS DistributionDelivery_VERUR,\n        LIKP.COMMN AS CommunicationNumberForQApiInterface_COMMN,\n        LIKP.STWAE AS StatisticsCurrency_STWAE,\n        LIKP.STCUR AS ExchangeRateForStatistics_STCUR,\n        LIKP.EXNUM AS NumberOfForeignTradeDataInMmAndSdDocuments_EXNUM,\n        LIKP.AENAM AS NameOfPersonWhoChangedObjectHdr_AENAM,\n        LIKP.AEDAT AS DateOfLastChangeHdr_AEDAT,\n        LIKP.LGNUM AS WarehouseNumberWarehouseComplex_LGNUM,\n        LIKP.LISPL AS DeliveryWithinOneWarehouse_LISPL,\n        LIKP.VKOIV AS SalesOrganizationForIntercompanyBilling_VKOIV,\n        LIKP.VTWIV AS DistributionChannelForIntercompanyBilling_VTWIV,\n        LIKP.SPAIV AS DivisionForIntercompanyBilling_SPAIV,\n        LIKP.FKAIV AS BillingTypeForIntercompanyBilling_FKAIV,\n        LIKP.PIOIV AS DateForInterCompanyBilling_PIOIV,\n        LIKP.FKDIV AS BillingDateForInterCompanyBilling_FKDIV,\n        LIKP.KUNIV AS CustomerNumberForInterCompanyBilling_KUNIV,\n        LIKP.KKBER AS CreditControlArea_KKBER,\n        LIKP.KNKLI AS CreditLimitReference_KNKLI,\n        LIKP.GRUPP AS CustomerCreditGroup_GRUPP,\n        LIKP.SBGRP AS CreditRepresentativeGroupForCreditManagement_SBGRP,\n        LIKP.CTLPC AS CreditManagement_RiskCategory_CTLPC,\n        LIKP.CMWAE AS CurrencyKeyOfCreditControlArea_CMWAE,\n        LIKP.AMTBL AS ReleasedCreditValueOfTheDocument_AMTBL,\n        LIKP.BOLNR AS BillOfLading_BOLNR,\n        LIKP.LIFNR AS VendorsAccountNumber_LIFNR,\n        LIKP.TRATY AS MeansOfTransportType_TRATY,\n        LIKP.TRAID AS MeansOfTransportId_TRAID,\n        LIKP.CMFRE AS ReleaseDateOfTheDocumentDeterminedByCreditManagement_CMFRE,\n        LIKP.CMNGV AS NextDate_CMNGV,\n        LIKP.XABLN AS GoodsReceiptissueSlipNumber_XABLN,\n        LIKP.BLDAT AS DocumentDateInDocument_BLDAT,\n        LIKP.WADAT_IST AS ActualGoodsMovementDate_WADAT_IST,\n        LIKP.TRSPG AS ShipmentBlockingReason_TRSPG,\n        LIKP.TPSID AS IdForExternalTransportSystem_TPSID,\n        LIKP.LIFEX AS ExternalIdentificationOfDeliveryNote_LIFEX,\n        LIKP.TERNR AS OrderNumber_TERNR,\n        LIKP.KALSM_CH AS SearchProcedureForBatchDetermination_KALSM_CH,\n        LIKP.KLIEF AS CorrectionDelivery_KLIEF,\n        LIKP.KALSP AS Shipping_PricingProcedure_KALSP,\n        LIKP.KNUMP AS NumberOfDocumentConditionPricing_KNUMP,\n        LIKP.AULWE AS RouteSchedule_AULWE,\n        LIKP.WERKS AS ReceivingPlantForDeliveries_WERKS,\n        LIKP.LCNUM AS FinancialDocNumber_LCNUM,\n        LIKP.ABSSC AS PaymentGuaranteeProcedure_ABSSC,\n        LIKP.KOUHR AS PickingTime_KOUHR,\n        LIKP.TDUHR AS TransTPlanningTime_TDUHR,\n        LIKP.LDUHR AS LoadingTime_LDUHR,\n        LIKP.WAUHR AS TimeOfGoodsIssue_WAUHR,\n        LIKP.LGTOR AS DoorForWarehouseNumber_LGTOR,\n        LIKP.LGBZO AS StagingAreaForWarehouseComplexHdr_LGBZO,\n        LIKP.AKWAE AS CurrencyKeyForeignTrade_AKWAE,\n        LIKP.AKKUR AS ExchangeRateForLetterCreditProcgInForeignTrade_AKKUR,\n        LIKP.AKPRZ AS DepreciationPercentageForFinancialDocumentProcessing_AKPRZ,\n        LIKP.PROLI AS DangerousGoodsManagementProfileInSdDocuments_PROLI,\n        LIKP.XBLNR AS ReferenceDocumentNumber_XBLNR,\n        LIKP.HANDLE AS WorldwideUniqueKeyForLikpVbeln_HANDLE,\n        LIKP.TSEGFL AS TimeSegmentExists_TSEGFL,\n        LIKP.TSEGTP AS EventGroupTimeSegmentDeliveryHeader_TSEGTP,\n        LIKP.TZONIS AS TimeZoneOfDeliveringLocation_TZONIS,\n        LIKP.TZONRC AS TimeZoneOfRecipientLocation_TZONRC,\n        LIKP.CONT_DG AS Indicator_DocumentContainsDangerousGoods_CONT_DG,\n        LIKP.VERURSYS AS DistributionDelivery_OriginalSystem_VERURSYS,\n        LIKP.KZWAB AS IndicatorForControllingGoodsMovement_KZWAB,\n        LIKP.VLSTK AS DistributionStatus_VLSTK,\n        LIKP.TCODE AS TransactionCode_TCODE,\n        LIKP.VSART AS ShippingType_VSART,\n        LIKP.TRMTYP AS MeansOfTransport_TRMTYP,\n        LIKP.SDABW AS SpecialProcessingIndicator_SDABW,\n        LIKP.VBUND AS CompanyId_VBUND,\n        LIKP.XWOFF AS CalculationOfValOpen_XWOFF,\n        LIKP.DIRTA AS AutomaticToCreationImmediatelyAfterTrGeneration_DIRTA,\n        LIKP.PRVBE AS ProductionSupplyArea_PRVBE,\n        LIKP.FOLAR AS DeliveryType_FOLAR,\n        LIKP.PODAT AS Date__proofOfDelivery___PODAT,\n        LIKP.POTIM AS ConfirmationTime_POTIM,\n        LIKP.VGANZ AS NumberOfDeliveryItemsWithPrecedessOrInOtherSystem_VGANZ,\n        LIKP.IMWRK AS DeliveryHasStatusInPlant_IMWRK,\n        LIKP.SPE_LOEKZ AS DocumentDeletionIndicator_SPE_LOEKZ,\n        LIKP.SPE_LOC_SEQ AS SequenceOfIntermediateLocationsInReturnsProcess_SPE_LOC_SEQ,\n        LIKP.SPE_ACC_APP_STS AS DeliveryConfirmationStatus_SPE_ACC_APP_STS,\n        LIKP.SPE_SHP_INF_STS AS ShipmentInformationStatus_SPE_SHP_INF_STS,\n        LIKP.SPE_RET_CANC AS Returns_FlagShowingThatAnAsnIsCancelled_SPE_RET_CANC,\n        LIKP.SPE_WAUHR_IST AS TimeOfGoodsIssue_Local,\n        LIKP.SPE_WAZONE_IST AS TimeZone_SPE_WAZONE_IST,\n        LIKP.SPE_REV_VLSTK AS DistributionStatus_DecentralizedWarehouseProcessing_SPE_REV_VLSTK,\n        LIKP.SPE_LE_SCENARIO AS ScenarioLogisticExecution_SPE_LE_SCENARIO,\n        LIKP.SPE_ORIG_SYS AS OriginalSystemType_SPE_ORIG_SYS,\n        LIKP.SPE_CHNG_SYS AS LastChangerSystemType_SPE_CHNG_SYS,\n        LIKP.SPE_GEOROUTE AS DescriptionOfAGeographicalRoute_SPE_GEOROUTE,\n        LIKP.SPE_GEOROUTEIND AS ChangeIndicatorForTheRoute_SPE_GEOROUTEIND,\n        LIKP.SPE_CARRIER_IND AS ChangeIndicatorForTheCarrier_SPE_CARRIER_IND,\n        LIKP.SPE_GTS_REL AS GoodsTrafficType_SPE_GTS_REL,\n        LIKP.SPE_GTS_RT_CDE AS RouteCodeForSapGlobalTradeServices_SPE_GTS_RT_CDE,\n        LIKP.SPE_REL_TMSTMP AS ReleaseTimeStamp_SPE_REL_TMSTMP,\n        LIKP.SPE_UNIT_SYSTEM AS MeasurementUnitSystem_SPE_UNIT_SYSTEM,\n        LIKP.SPE_INV_BFR_GI AS InvoiceCreationBeForeGoodsIssue_SPE_INV_BFR_GI,\n        LIKP.SPE_QI_STATUS AS StatusOfQualityInspectionForReturnsDeliveries_SPE_QI_STATUS,\n        LIKP.SPE_RED_IND AS SpeIndicatorIfRedirectingHasOccured_SPE_RED_IND,\n        LIKP.SAKES AS SapGlobalTradeServices_StorageStatusOfDelivery_SAKES,\n        LIKP.SPE_LIFEX_TYPE AS TypeOfExternalIdentification_SPE_LIFEX_TYPE,\n        LIKP.SPE_TTYPE AS MeansOfTransport_SPE_TTYPE,\n        LIKP.SPE_PRO_NUMBER AS PartnerIdentification_ProgressiveIdentificationNumber_SPE_PRO_NUMBER,\n        LIKP.LOC_GUID AS Akkreditiv_guid_LOC_GUID,\n        LIKP.SPE_BILLING_IND AS EwmBillingIndicator_SPE_BILLING_IND,\n        LIKP.PRINTER_PROFILE AS DescriptionOfPrintProfile_PRINTER_PROFILE,\n        LIKP.MSR_ACTIVE AS AdvancedReturnsManagementActive_MSR_ACTIVE,\n        LIKP.PRTNR AS ConfirmationNumber_PRTNR,\n        LIKP.STGE_LOC_CHANGE AS TemporaryChangeOfStorageLocationsInDelivery_STGE_LOC_CHANGE,\n        LIKP.TM_CTRL_KEY AS ControlKeyForDocumentTransferToTm_TM_CTRL_KEY,\n        LIKP.DLV_SPLIT_INITIA AS DeliverySplitInitiator_DLV_SPLIT_INITIA,\n        LIKP.DLV_VERSION AS DeliveryVersion_DLV_VERSION,\n        LIKP.HANDOVERLOC AS LocationForAPhysicalHandoverOfGoods_HANDOVERLOC,\n        LIKP.HANDOVERDATE AS HandoverDateAtTheHandoverLocation_HANDOVERDATE,\n        LIKP.INCO3_L AS IncotermsLocation2_INCO3_L,\n        LIKP.BORGR_GRP AS MultiLevelGoodsReceiptAutomotive_BORGR_GRP,\n        LIKP.FSH_TRANSACTION AS TransactionNumberHdr_FSH_TRANSACTION,\n        LIKP.FSH_VAS_LAST_ITEM AS LastVasItemNumber_FSH_VAS_LAST_ITEM,\n        LIKP.FSH_VAS_CG AS ValueAddedServicesCustomerGroup_FSH_VAS_CG,\n        LIPS.POSNR AS DeliveryItem_POSNR,\n        LIPS.PSTYV AS DeliveryItemCategory_PSTYV,\n        LIPS.ERNAM AS NameOfPersonWhoCreatedTheObject_ERNAM,\n        LIPS.ERZET AS EntryTime_ERZET,\n        LIPS.ERDAT AS DateOnWhichRecordWasCreated_ERDAT,\n        LIPS.MATNR AS MaterialNumber_MATNR,\n        LIPS.MATWA AS MaterialEntered_MATWA,\n        LIPS.MATKL AS MaterialGroup_MATKL,\n        LIPS.WERKS AS Plant_WERKS,\n        LIPS.LGORT AS StorageLocation_LGORT,\n        LIPS.CHARG AS BatchNumber_CHARG,\n        LIPS.LICHN AS VendorBatchNumber_LICHN,\n        LIPS.KDMAT AS MaterialBelongingToTheCustomer_KDMAT,\n        LIPS.PRODH AS ProductHierarchy_PRODH,\n        LIPS.LFIMG AS ActualQuantityDelivered_InSalesUnits_LFIMG,\n        LIPS.MEINS AS BaseUnitOfMeasure_MEINS,\n        LIPS.VRKME AS SalesUnit_VRKME,\n        LIPS.UMVKZ AS Numerator_Factor_ForConversionOfSalesQuantityIntoSku_UMVKZ,\n        LIPS.UMVKN AS Denominator_Divisor_ForConversionOfSalesQtyIntoSku_UMVKN,\n        LIPS.GEWEI AS WeightUnit_GEWEI,\n        LIPS.VOLEH AS VolumeUnit_VOLEH,\n        LIPS.KZTLF AS PartialDeliveryAtItemLevel_KZTLF,\n        LIPS.UEBTK AS Indicator_UnlimitedOverdeliveryAllowed_UEBTK,\n        LIPS.UEBTO AS OverdeliveryToleranceLimit_UEBTO,\n        LIPS.UNTTO AS UnderdeliveryToleranceLimit_UNTTO,\n        LIPS.CHSPL AS BatchSplitAllowed_CHSPL,\n        LIPS.FAKSP AS BillingBlock_FAKSP,\n        LIPS.MBDAT AS MaterialAvailabilityDate_MBDAT,\n        LIPS.LGMNG AS ActualQuantityDeliveredInStockKeepingUnits_LGMNG,\n        LIPS.ARKTX AS ShortTextForSalesOrderItem_ARKTX,\n        LIPS.LGPBE AS StorageBin_LGPBE,\n        LIPS.VBELV AS OriginatingDocument_VBELV,\n        LIPS.POSNV AS OriginatingItem_POSNV,\n        LIPS.VBTYV AS SdDocumentCategory_VBTYV,\n        LIPS.VGSYS AS LogicalSystemInThePrecedingDocument_VGSYS,\n        LIPS.VGBEL AS SalesOrderNumber_VGBEL,\n        LIPS.VGPOS AS SalesOrderItem_VGPOS,\n        LIPS.UPFLU AS UpdateIndicatorForDeliveryDocumentFlow_UPFLU,\n        LIPS.UEPOS AS HigherLevelItemInBOM_UEPOS,\n        LIPS.FKREL AS RelevantForBilling_FKREL,\n        LIPS.LADGR AS LoadingGroup_LADGR,\n        LIPS.TRAGR AS TransportationGroup_TRAGR,\n        LIPS.KOMKZ AS IndicatorForPickingControl_KOMKZ,\n        LIPS.LGNUM AS WarehouseNumber_LGNUM,\n        LIPS.LISPL AS SplitToWarehouseNumberRequired_LISPL,\n        LIPS.LGTYP AS StorageType_LGTYP,\n        LIPS.LGPLA AS StorageBin_LGPLA,\n        LIPS.BWTEX AS Indicator_SeparateValuation_BWTEX,\n        LIPS.BWART AS MovementType_InventoryManagement_BWART,\n        LIPS.BWLVS AS MovementTypeForWarehouseManagement_BWLVS,\n        LIPS.KZDLG AS Indicator_DynamicStorageBinInWarehouseManagement_KZDLG,\n        LIPS.BDART AS RequirementType_BDART,\n        LIPS.PLART AS PlanningType_PLART,\n        LIPS.MTART AS MaterialType_MTART,\n        LIPS.XCHPF AS BatchManagementRequirementIndicator_XCHPF,\n        LIPS.XCHAR AS BatchManagementIndicator_Internal_XCHAR,\n        LIPS.VGREF AS PrecedingDocumentHasResultedFromReference_VGREF,\n        LIPS.POSAR AS ItemType_POSAR,\n        LIPS.BWTAR AS ValuationType_BWTAR,\n        LIPS.SUMBD AS SummingUpOfRequirements_SUMBD,\n        LIPS.MTVFP AS CheckingGroupForAvailability_MTVFP,\n        LIPS.GSBER AS BusinessArea_GSBER,\n        LIPS.VKBUR AS SalesOffice_VKBUR,\n        LIPS.VKGRP AS SalesGroup_VKGRP,\n        LIPS.VTWEG AS DistributionChannel_VTWEG,\n        LIPS.SPART AS Division_SPART,\n        LIPS.GRKOR AS DeliveryGroup_ItemsAreDeliveredTogether_GRKOR,\n        LIPS.FMENG AS QuantityIsFixed_FMENG,\n        LIPS.ANTLF AS MaximumNumberOfPartialDeliveriesAllowedPerItem_ANTLF,\n        LIPS.VBEAF AS FixedShippingProcessingTimeInDays_VBEAF,\n        LIPS.VBEAV AS VariableShippingProcessingTimeInDays_VBEAV,\n        LIPS.STAFO AS UpdateGroupForStatisticsUpdate_STAFO,\n        LIPS.KZWI1 AS Subtotal1FromPricingProcedureForCondition_KZWI1,\n        LIPS.KZWI2 AS Subtotal2FromPricingProcedureForCondition_KZWI2,\n        LIPS.KZWI3 AS Subtotal3FromPricingProcedureForCondition_KZWI3,\n        LIPS.KZWI4 AS Subtotal4FromPricingProcedureForCondition_KZWI4,\n        LIPS.KZWI5 AS Subtotal5FromPricingProcedureForCondition_KZWI5,\n        LIPS.KZWI6 AS Subtotal6FromPricingProcedureForCondition_KZWI6,\n        LIPS.SOBKZ AS SpecialStockIndicator_SOBKZ,\n        LIPS.AEDAT AS DateOfLastChange_AEDAT,\n        LIPS.EAN11 AS InternationalArticleNumber_eanupc_EAN11,\n        LIPS.KVGR1 AS CustomerGroup1_KVGR1,\n        LIPS.KVGR2 AS CustomerGroup2_KVGR2,\n        LIPS.KVGR3 AS CustomerGroup3_KVGR3,\n        LIPS.KVGR4 AS CustomerGroup4_KVGR4,\n        LIPS.KVGR5 AS CustomerGroup5_KVGR5,\n        LIPS.MVGR1 AS MaterialGroup1_MVGR1,\n        LIPS.MVGR2 AS MaterialGroup2_MVGR2,\n        LIPS.MVGR3 AS MaterialGroup3_MVGR3,\n        LIPS.MVGR4 AS MaterialGroup4_MVGR4,\n        LIPS.MVGR5 AS MaterialGroup5_MVGR5,\n        LIPS.VPZUO AS AllocationIndicator_VPZUO,\n        LIPS.VGTYP AS SdDocumentCategory_VGTYP,\n        LIPS.RFVGTYP AS TypeOfPrecedingDocumentInCentralSystem_RFVGTYP,\n        LIPS.KOSTL AS CostCenter_KOSTL,\n        LIPS.KOKRS AS ControllingArea_KOKRS,\n        LIPS.PAOBJNR AS ProfitabilitySegmentNumber_PAOBJNR,\n        LIPS.PRCTR AS ProfitCenter_PRCTR,\n        LIPS.PS_PSP_PNR AS WorkBreakdownStructureElement_wbsElement_PS_PSP_PNR,\n        LIPS.AUFNR AS OrderNumber_AUFNR,\n        LIPS.POSNR_PP AS OrderItemNumber_POSNR_PP,\n        LIPS.KDAUF AS SalesOrderNumber_KDAUF,\n        LIPS.KDPOS AS ItemNumberInSalesOrder_KDPOS,\n        LIPS.VPMAT AS PlanningMaterial_VPMAT,\n        LIPS.VPWRK AS PlanningPlant_VPWRK,\n        LIPS.PRBME AS BaseUnitOfMeasureForProductGroup_PRBME,\n        LIPS.UMREF AS ConversionFactor_Quantities_UMREF,\n        LIPS.KNTTP AS AccountAssignmentCategory_KNTTP,\n        LIPS.KZVBR AS ConsumptionPosting_KZVBR,\n        LIPS.FIPOS AS CommitmentItem_FIPOS,\n        LIPS.FISTL AS FundsCenter_FISTL,\n        LIPS.GEBER AS Fund_GEBER,\n        LIPS.PCKPF AS PackingControl_PCKPF,\n        LIPS.BEDAR_LF AS RequirementsClass_BEDAR_LF,\n        LIPS.CMPNT AS Id_ItemWithActiveCreditFunctionRelevantForCredit_CMPNT,\n        LIPS.KCMENG AS CumulativeBatchQuantityOfAllSplitItems_InStckunit_KCMENG,\n        LIPS.KCBRGEW AS CumulativeGrossWeightOfAllBatchSplitItems_KCBRGEW,\n        LIPS.KCNTGEW AS CumulativeNetWeightOfAllBatchSplitItems_KCNTGEW,\n        LIPS.KCVOLUM AS CumulativeVolumeOfAllBatchSplitItems_KCVOLUM,\n        LIPS.UECHA AS HigherLevelItemOfBatchSplitItem_UECHA,\n        LIPS.CUOBJ AS Configuration_CUOBJ,\n        LIPS.CUOBJ_CH AS InternalObjectNumberOfTheBatchClassification_CUOBJ_CH,\n        LIPS.ANZSN AS NumberOfSerialNumbers_ANZSN,\n        LIPS.SERAIL AS SerialNumberProfile_SERAIL,\n        LIPS.KCGEWEI AS WeightUnit_KCGEWEI,\n        LIPS.KCVOLEH AS VolumeUnit_KCVOLEH,\n        LIPS.SERNR AS BomExplosionNumber_SERNR,\n        LIPS.ABRLI AS InternalDeliveryScheduleNumber_ABRLI,\n        LIPS.ABART AS RelType_ABART,\n        LIPS.ABRVW AS UsageIndicator_ABRVW,\n        LIPS.QPLOS AS InspectionLotNumber_QPLOS,\n        LIPS.QTLOS AS PartialLotNumber_QTLOS,\n        LIPS.NACHL AS CustomerHasNotPostedGoodsReceipt_NACHL,\n        LIPS.MAGRV AS MaterialGroup_PackagingMaterials_MAGRV,\n        LIPS.OBJKO AS ObjectNumberAtHeaderLevel_OBJKO,\n        LIPS.OBJPO AS ObjectNumberAtItemLevel_OBJPO,\n        LIPS.AESKD AS CustomerEngineeringChangeStatus_AESKD,\n        LIPS.SHKZG AS ReturnsItem_SHKZG,\n        LIPS.PROSA AS IdForMaterialDetermination_PROSA,\n        LIPS.UEPVW AS HigherLevelItemUsage_UEPVW,\n        LIPS.EMPST AS ReceivingPoint_EMPST,\n        LIPS.ABTNR AS DepartmentNumber_ABTNR,\n        LIPS.KOQUI AS PickingIsSubjectToConfirmation_KOQUI,\n        LIPS.STADAT AS StatisticsDate_STADAT,\n        LIPS.AKTNR AS Promotion_AKTNR,\n        LIPS.KNUMH_CH AS NumberOfConditionRecordFromBatchDetermination_KNUMH_CH,\n        LIPS.PREFE AS PreferenceIndicatorInExportimport_PREFE,\n        LIPS.EXART AS BusinessTransactionTypeForForeignTrade_EXART,\n        LIPS.CLINT AS InternalClassNumber_CLINT,\n        LIPS.CHMVS AS Batches_ExitToQuantityProposal_CHMVS,\n        LIPS.ABELN AS AllocationTableNumber_ABELN,\n        LIPS.ABELP AS ItemNumberOfAllocationTable_ABELP,\n        LIPS.LFIMG_FLO AS InternalFieldDoNotUseLfimgInFloatMum_LFIMG_FLO,\n        LIPS.LGMNG_FLO AS InternalFieldDoNotUseLgmngInFloatMum_LGMNG_FLO,\n        LIPS.KCMENG_FLO AS InternalFieldDoNotUseKcmengInFloatMum_KCMENG_FLO,\n        LIPS.KZUMW AS EnvironmentallyRelevant_KZUMW,\n        LIPS.KMPMG AS ComponentQuantity_KMPMG,\n        LIPS.AUREL AS RelevantToAllocationTable_AUREL,\n        LIPS.KPEIN AS ConditionPricingUnit_KPEIN,\n        LIPS.KMEIN AS ConditionUnit_KMEIN,\n        LIPS.NETPR AS NetPrice_NETPR,\n        LIPS.KOWRR AS StatisticalValues_KOWRR,\n        LIPS.KZBEW AS MovementIndicator_KZBEW,\n        LIPS.MFRGR AS MaterialFreightGroup_MFRGR,\n        LIPS.CHHPV AS PackAccumulatedBatchesMovementTypeItem_CHHPV,\n        LIPS.ABFOR AS FormOfPaymentGuarantee_ABFOR,\n        LIPS.ABGES AS Guaranteed_FactorBetween0And1_ABGES,\n        LIPS.MBUHR AS MaterialStagingTime_MBUHR,\n        LIPS.WKTNR AS ValueContractNo_WKTNR,\n        LIPS.WKTPS AS ValueContractItem_WKTPS,\n        LIPS.J_1BCFOP AS CfopCodeAndExtension_J_1BCFOP,\n        LIPS.J_1BTAXLW1 AS TaxLaw_Icms_J_1BTAXLW1,\n        LIPS.J_1BTAXLW2 AS TaxLaw_Ipi_J_1BTAXLW2,\n        LIPS.J_1BTXSDC AS SdTaxCode_J_1BTXSDC,\n        LIPS.SITUA AS IndicatorForSituation_SITUA,\n        LIPS.RSNUM AS NumberOfReservationdependentRequirements_RSNUM,\n        LIPS.RSPOS AS ItemNumberOfReservationDependentRequirements_RSPOS,\n        LIPS.RSART AS RecordType_RSART,\n        LIPS.KANNR AS KanbansequenceNumber_KANNR,\n        LIPS.KZFME AS Id_LeadingUnitOfMeasureForCompletingATransaction_KZFME,\n        LIPS.PROFL AS DangerousGoodsIndicatorProfile_PROFL,\n        LIPS.KCMENGVME AS CumulativeBatchQuantityOfAllSplitItemsInSalesUnits_KCMENGVME,\n        LIPS.KCMENGVMEF AS CumulatedBatchSplitQuantityInVrkmeAndFloat_KCMENGVMEF,\n        LIPS.KZBWS AS ValuationOfSpecialStock_KZBWS,\n        LIPS.PSPNR AS ProjectDefinition_Internal_PSPNR,\n        LIPS.EPRIO AS WithdrawalSequenceGroupForStocks_EPRIO,\n        LIPS.RULES AS StockDeterminationRule_RULES,\n        LIPS.KZBEF AS IndicatorInventoryManagementActive_KZBEF,\n        LIPS.MPROF AS MfrPartProfile_MPROF,\n        LIPS.EMATN AS MaterialNumberCorrespondingToManufacturerPartNumber_EMATN,\n        LIPS.LGBZO AS StagingAreaForWarehouseComplex_LGBZO,\n        LIPS.HANDLE AS WorldwideUniqueKeyForLips_HANDLE,\n        LIPS.VERURPOS AS DistributionDelivery_OriginalItem_VERURPOS,\n        LIPS.LIFEXPOS AS ExternalItemNumber_LIFEXPOS,\n        LIPS.NOATP AS Indicator_DeactivateAvailabilityCheck_NOATP,\n        LIPS.NOPCK AS Indicator_NotRelevantForPicking_NOPCK,\n        LIPS.RBLVS AS ReferenceMovementTypeForWmFromMaterialMovements_RBLVS,\n        LIPS.BERID AS MrpArea_BERID,\n        LIPS.BESTQ AS StockCategoryInTheWarehouseManagementSystem_BESTQ,\n        LIPS.UMBSQ AS StockCategoryInTheWarehouseManagementSystem_UMBSQ,\n        LIPS.UMMAT AS ReceivingIssuingMaterial_UMMAT,\n        LIPS.UMWRK AS ReceivingPlantIssuingPlant_UMWRK,\n        LIPS.UMLGO AS ReceivingIssuingStorageLocation_UMLGO,\n        LIPS.UMCHA AS ReceivingIssuingBatch_UMCHA,\n        LIPS.UMBAR AS ValuationTypeOfTransferBatch_UMBAR,\n        LIPS.UMSOK AS SpecialStockIndicatorForPhysicalStockTransfer_UMSOK,\n        LIPS.SONUM AS SpecialStockNumber_SONUM,\n        LIPS.USONU AS SpecialStockNumber_USONU,\n        LIPS.AKKUR AS ExchangeRateForLetterForeignTrade_AKKUR,\n        LIPS.AKMNG AS CurrentQtyFieldForArithmeticOperations_AKMNG,\n        LIPS.VKGRU AS RepairProcessing_ClassificationOfItems_VKGRU,\n        LIPS.SHKZG_UM AS Indicator_UnmatInMainPosting_SHKZG_UM,\n        LIPS.INSMK AS StockType_INSMK,\n        LIPS.KZECH AS DeterminationOfBatchEntryInTheProductionprocessOrder_KZECH,\n        LIPS.FLGWM AS DestStorageDataFromPrecedingDocument_FLGWM,\n        LIPS.BERKZ AS MaterialStagingIndicatorForProductionSupply_BERKZ,\n        LIPS.HUPOS AS Indicator_DeliveryItemIsAHuItem_HUPOS,\n        LIPS.NOWAB AS Indicator_ItemNotRelevantForGoodsMovements_NOWAB,\n        LIPS.KONTO AS GlAccountNumber_KONTO,\n        LIPS.KZEAR AS FinalIssueForThisReservation_KZEAR,\n        LIPS.HSDAT AS DateOfManufacture_HSDAT,\n        LIPS.VFDAT AS BestBeforeDate_VFDAT,\n        LIPS.LFGJA AS FiscalYearOfCurrentPeriod_LFGJA,\n        LIPS.LFBNR AS AReferenceDocument_LFBNR,\n        LIPS.LFPOS AS ItemOfAReferenceDocument_LFPOS,\n        LIPS.GRUND AS ReasonForGoodsMovment_GRUND,\n        LIPS.FOBWA AS SubsequentMovementType_FOBWA,\n        LIPS.DLVTP AS DeliveryCategory_DLVTP,\n        LIPS.EXBWR AS ExternallyEnteredPostingAmountInLocalCurrency_EXBWR,\n        LIPS.BPMNG AS QuantityInPurchaseOrderPriceUnit_BPMNG,\n        LIPS.EXVKW AS ExternallyEnteredSalesValueInLocalCurrency_EXVKW,\n        LIPS.CMPRE_FLT AS ItemCreditPrice_CMPRE_FLT,\n        LIPS.KZPOD AS PodIndicator_KZPOD,\n        LIPS.LFDEZ AS NotRelevantForDistributionForWms_LFDEZ,\n        LIPS.UMREV AS ConversionFactorOfDeliveryQuantityVrkmeForMeins_UMREV,\n        LIPS.PODREL AS PodControl_ProofOfDelivery_PODREL,\n        LIPS.KZUML AS StockTransfertransferPosting_KZUML,\n        LIPS.FKBER AS FunctionalArea_FKBER,\n        LIPS.GRANT_NBR AS Grant_GRANT_NBR,\n        LIPS.KZWSO AS UnitsOfMeasureUsage_KZWSO,\n        LIPS.GMCONTROL AS GoodsMovementControl_GMCONTROL,\n        LIPS.POSTING_CHANGE AS GoodsMovementControl_Hu_POSTING_CHANGE,\n        LIPS.UM_PS_PSP_PNR AS Receivingissuing_wbsElement_UM_PS_PSP_PNR,\n        LIPS.PRE_VL_ETENS AS SequentialNumberOfVendorConfirmation_PRE_VL_ETENS,\n        LIPS.SPE_GEN_ELIKZ AS deliveryCompleted_SPE_GEN_ELIKZ,\n        LIPS.SPE_SCRAP_IND AS ScrapIndicatorForEwmProcessing_SPE_SCRAP_IND,\n        LIPS.SPE_AUTH_NUMBER AS ReturnMaterialAuthorizationNumber_SPE_AUTH_NUMBER,\n        LIPS.SPE_INSPOUT_GUID AS Inspections_InspectionOutcomeGuidSetByEwm_SPE_INSPOUT_GUID,\n        LIPS.SPE_FOLLOW_UP AS DefaultFollow_SPE_FOLLOW_UP,\n        LIPS.SPE_EXP_DATE_EXT AS EndDateOfValidityPeriodOfReturnsDelivery_SPE_EXP_DATE_EXT,\n        LIPS.SPE_EXP_DATE_INT AS EndDateOfInternalValidityPeriodOfReturnsDelivery_SPE_EXP_DATE_INT,\n        LIPS.SPE_AUTH_COMPLET AS RmaCompletionIndicator_SPE_AUTH_COMPLET,\n        LIPS.ORMNG AS OriginalQuantityOfDeliveryItem_ORMNG,\n        LIPS.SPE_ATP_TMSTMP AS AtpTimeStamp_SPE_ATP_TMSTMP,\n        LIPS.SPE_ORIG_SYS AS OriginalSystemTypeItm_SPE_ORIG_SYS,\n        LIPS.SPE_LIEFFZ AS CumulativeQtyForSchedagrVendorPOV_SPE_LIEFFZ,\n        LIPS.SPE_IMWRK AS InboundDeliveryItemHasStatusinPlant_SPE_IMWRK,\n        LIPS.SPE_LIFEXPOS2 AS ExternalItemIdentifier_SPE_LIFEXPOS2,\n        LIPS.SPE_EXCEPT_CODE AS ExceptionCodeWarehouseForQuantityDifference_SPE_EXCEPT_CODE,\n        LIPS.SPE_KEEP_QTY AS RetentionQuantityForScrap_SPE_KEEP_QTY,\n        LIPS.SPE_ALTERNATE AS AlternateProductNumber_SPE_ALTERNATE,\n        LIPS.SPE_MAT_SUBST AS ReasonForMaterialSubstitution_SPE_MAT_SUBST,\n        LIPS.SPE_STRUC AS StructureOfItemsThatAreDeliveredTogether_SPE_STRUC,\n        LIPS.SPE_APO_QNTYFAC AS NumeratorOfQuotientForUnitOfMeasureConversion_SPE_APO_QNTYFAC,\n        LIPS.SPE_APO_QNTYDIV AS DenominatorOfQuotientForUnitOfMeasureConversion_SPE_APO_QNTYDIV,\n        LIPS.SPE_HERKL AS NonPreferentialOrigin_SPE_HERKL,\n        LIPS.SPE_BXP_DATE_EXT AS BeginDateOfValidityPeriodOfReturnsDelivery_SPE_BXP_DATE_EXT,\n        LIPS.SPE_VERSION AS DeliveryVersionAtConfirmation_SPE_VERSION,\n        LIPS.SPE_COMPL_MVT AS CompletionOfGoodsMovementsAfterDifferencePostings_SPE_COMPL_MVT,\n        LIPS.J_1BTAXLW4 AS CofinsTaxLaw_J_1BTAXLW4,\n        LIPS.J_1BTAXLW5 AS PisTaxLaw_J_1BTAXLW5,\n        LIPS.J_1BTAXLW3 AS IssTaxLaw_J_1BTAXLW3,\n        LIPS.BUDGET_PD AS Fm_BudgetPeriod_BUDGET_PD,\n        LIPS.KBNKZ AS KanbanIndicator_KBNKZ,\n        LIPS.FARR_RELTYPE AS RevenueAccountingType_FARR_RELTYPE,\n        LIPS.SITKZ AS SpecificationForIssuingValuatedStockInTransit_SITKZ,\n        LIPS.SGT_RCAT AS RequirementSegment_SGT_RCAT,\n        LIPS.SGT_SCAT AS StockSegment_SGT_SCAT,\n        LIPS.FSH_SEASON_YEAR AS SeasonYear_FSH_SEASON_YEAR,\n        LIPS.FSH_SEASON AS Season_FSH_SEASON,\n        LIPS.FSH_COLLECTION AS FashionCollection_FSH_COLLECTION,\n        LIPS.FSH_THEME AS FashionTheme_FSH_THEME,\n        LIPS.FSH_KVGR6 AS CustomerGroup6_FSH_KVGR6,\n        LIPS.FSH_KVGR7 AS CustomerGroup7_FSH_KVGR7,\n        LIPS.FSH_KVGR8 AS CustomerGroup8_FSH_KVGR8,\n        LIPS.FSH_KVGR9 AS CustomerGroup9_FSH_KVGR9,\n        LIPS.FSH_KVGR10 AS CustomerGroup10_FSH_KVGR10,\n        LIPS.FSH_VAS_REL AS VasRelevant_FSH_VAS_REL,\n        LIPS.FSH_VAS_PRNT_ID AS DeliveryItem_FSH_VAS_PRNT_ID,\n        LIPS.FSH_TRANSACTION AS TransactionNumber_FSH_TRANSACTION,\n        LIPS.FSH_ITEM_GROUP AS ItemGroup_FSH_ITEM_GROUP,\n        LIPS.FSH_ITEM AS ItemNumber_FSH_ITEM,\n        LIPS.FSH_RSNUM AS NumberOfReservationdependentRequirements_FSH_RSNUM,\n        LIPS.FSH_RSPOS AS ItemNumberOfReservationDependentRequirements_FSH_RSPOS,\n        LIPS.CONS_ORDER AS PurchaseOrderForConsignment_CONS_ORDER,\n        LIPS.WRF_CHARSTC1 AS CharacteristicValue1_WRF_CHARSTC1,\n        LIPS.WRF_CHARSTC2 AS CharacteristicValue2_WRF_CHARSTC2,\n        LIPS.WRF_CHARSTC3 AS CharacteristicValue3_WRF_CHARSTC3,\n        CalendarDateDimension_LFDAT.CalYear AS YearOfDeliveryDate_LFDAT,\n        CalendarDateDimension_LFDAT.CalMonth AS MonthOfDeliveryDate_LFDAT,\n        CalendarDateDimension_LFDAT.CalWeek AS WeekOfDeliveryDate_LFDAT,\n        CalendarDateDimension_LFDAT.DayOfMonth AS DayOfDeliveryDate_LFDAT,\n        CalendarDateDimension_LFDAT.CalQuarter AS QuarterOfDeliveryDate_LFDAT,\n        CalendarDateDimension_PODAT.CalYear AS YearOfProofOfDeliveryDate_PODAT,\n        CalendarDateDimension_PODAT.CalMonth AS MonthOfProofOfDeliveryDate_PODAT,\n        CalendarDateDimension_PODAT.CalWeek AS WeekOfProofOfDeliveryDate_PODAT,\n        CalendarDateDimension_PODAT.DayOfMonth AS DayOfProofOfDeliveryDate_PODAT,\n        CalendarDateDimension_PODAT.CalQuarter AS QuarterOfProofOfDeliveryDate_PODAT,\n\n        COALESCE(\n            LIKP.NETWR * currency_decimal.CURRFIX * CASE WHEN LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6') THEN -1 ELSE 1 END,\n            LIKP.NETWR * CASE WHEN LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6') THEN -1 ELSE 1 END\n        ) AS NetValueOfTheSalesOrderInDocumentCurrency_NETWR,\n        CASE \n            WHEN LIPS.SHKZG IN ('B', 'S', 'X') THEN LIPS.NTGEW * -1 \n            ELSE LIPS.NTGEW \n        END AS NetWeight_NTGEW,\n        CASE \n            WHEN LIPS.SHKZG IN ('B', 'S', 'X') THEN LIPS.BRGEW * -1 \n            ELSE LIPS.BRGEW \n        END AS GrossWeight_BRGEW,\n        CASE \n            WHEN LIPS.SHKZG IN ('B', 'S', 'X') THEN LIPS.VOLUM * -1 \n            ELSE LIPS.VOLUM \n        END AS Volume_VOLUM,\n        COALESCE(LIPS.WAVWR * currency_decimal.CURRFIX, LIPS.WAVWR) AS CostInDocumentCurrency_WAVWR,\n        COALESCE(LIPS.NETWR * currency_decimal.CURRFIX, LIPS.NETWR) AS NetValueInDocumentCurrency_NETWR,\n        DATEDIFF(DAY, LIKP.WADAT, LIKP.WADAT_IST) AS Delivery_Delay,\n        LIPS.LFIMG * LIPS.NETPR AS DeliveredNetValue,\n        CASE \n            WHEN LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6') OR LIPS.SHKZG IN ('B', 'S', 'X') THEN 'X' \n            ELSE '' \n        END AS IS_RETURN\n\n        -- IF(\n        -- LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6'),\n        -- COALESCE(LIKP.NETWR * currency_decimal.CURRFIX * -1, LIKP.NETWR * -1),\n        -- COALESCE(LIKP.NETWR * currency_decimal.CURRFIX, LIKP.NETWR)\n        -- ) AS NetValueOfTheSalesOrderInDocumentCurrency_NETWR,\n        -- IF(LIPS.SHKZG IN ('B', 'S', 'X'), (LIPS.NTGEW * -1), LIPS.NTGEW ) AS NetWeight_NTGEW,\n        -- IF(LIPS.SHKZG IN ('B', 'S', 'X'), (LIPS.BRGEW * -1), LIPS.BRGEW) AS GrossWeight_BRGEW,\n        -- IF(LIPS.SHKZG IN ('B', 'S', 'X'), (LIPS.VOLUM * -1), LIPS.VOLUM) AS Volume_VOLUM,\n        -- COALESCE(LIPS.WAVWR * currency_decimal.CURRFIX, LIPS.WAVWR) AS CostInDocumentCurrency_WAVWR,\n        -- COALESCE(LIPS.NETWR * currency_decimal.CURRFIX, LIPS.NETWR) AS NetValueInDocumentCurrency_NETWR,\n        -- DATEDIFF(DAY ,LIKP.WADAT, LIKP.WADAT_IST) AS Delivery_Delay,\n        -- LIPS.LFIMG * LIPS.NETPR AS DeliveredNetValue,\n        -- IF(LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6') OR LIPS.SHKZG IN ('B', 'S', 'X'), 'X', '') AS IS_RETURN\n\n\n        \n    FROM {{ source(\"source_db\", \"lips\") }} AS LIPS\n    INNER JOIN {{ source(\"source_db\", \"likp\") }} AS LIKP\n        ON\n        LIKP.VBELN = LIPS.VBELN\n        AND LIKP.MANDT = LIPS.MANDT\n    LEFT JOIN {{ ref(\"currency_decimal\") }} AS currency_decimal\n        ON LIKP.WAERK = currency_decimal.CURRKEY\n    LEFT JOIN calendar_date_dim AS CalendarDateDimension_LFDAT\n        ON CalendarDateDimension_LFDAT.Date = LIKP.LFDAT\n    LEFT JOIN calendar_date_dim AS CalendarDateDimension_PODAT\n        ON CalendarDateDimension_PODAT.Date = LIKP.PODAT\n)\n\nSELECT * FROM deliveries", "language": "sql", "refs": [{"name": "currency_decimal", "package": null, "version": null}], "sources": [["source_db", "likp"], ["source_db", "lips"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.likp", "source.sap_order_to_cash.source_db.lips", "model.sap_order_to_cash.currency_decimal"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/deliveries.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith deliveries AS (\n    SELECT\n        LIKP.MANDT AS Client_MANDT,\n        LIKP.VBELN AS Delivery_VBELN,\n        LIKP.ERNAM AS CreatedBy_ERNAM,\n        LIKP.ERZET AS CreateTime_ERZET,\n        LIKP.ERDAT AS DateCreated_ERDAT,\n        LIKP.BZIRK AS SalesDistrict_BZIRK,\n        LIKP.VSTEL AS ShippingPointreceivingPoint_VSTEL,\n        LIKP.VKORG AS SalesOrganization_VKORG,\n        LIKP.LFART AS DeliveryType_LFART,\n        LIKP.AUTLF AS CompleteDeliveryDefinedForEachSalesOrder_AUTLF,\n        LIKP.KZAZU AS OrderCombinationIndicator_KZAZU,\n        LIKP.WADAT AS PlannedGoodsMovementDate_WADAT,\n        LIKP.LDDAT AS LoadingDate_LDDAT,\n        LIKP.TDDAT AS TransportationPlanningDate_TDDAT,\n        LIKP.LFDAT AS DeliveryDate_LFDAT,\n        LIKP.LFUHR AS DeliveryTime_LFUHR,\n        LIKP.KODAT AS PickingDate_KODAT,\n        LIKP.ABLAD AS UnloadingPoint_ABLAD,\n        LIKP.INCO1 AS Incoterms__part1___INCO1,\n        LIKP.INCO2 AS Incoterms__part2___INCO2,\n        LIKP.EXPKZ AS ExportIndicator_EXPKZ,\n        LIKP.ROUTE AS Route_ROUTE,\n        LIKP.FAKSK AS BillingBlockInSdDocument_FAKSK,\n        LIKP.LIFSK AS DeliveryBlock_DocumentHeader_LIFSK,\n        LIKP.VBTYP AS SdDocumentCategory_VBTYP,\n        LIKP.KNFAK AS CustomerFactoryCalendar_KNFAK,\n        LIKP.LPRIO AS DeliveryPriority_LPRIO,\n        LIKP.VSBED AS ShippingConditions_VSBED,\n        LIKP.KUNNR AS ShipToParty_KUNNR,\n        LIKP.KUNAG AS SoldToParty_KUNAG,\n        LIKP.KDGRP AS CustomerGroup_KDGRP,\n        LIKP.BTGEW AS TotalWeight_BTGEW,\n        LIKP.NTGEW AS NetWeightHdr_NTGEW,\n        LIKP.GEWEI AS WeightUnitHdr_GEWEI,\n        LIKP.VOLUM AS VolumeHdr_VOLUM,\n        LIKP.VOLEH AS VolumeUnitHdr_VOLEH,\n        LIKP.ANZPK AS TotalNumberOfPackagesInDelivery_ANZPK,\n        LIKP.BEROT AS PickedItemsLocation_BEROT,\n        LIKP.LFUHR AS TimeOfDelivery_LFUHR,\n        LIKP.GRULG AS WeightGroupForDelivery_GRULG,\n        LIKP.LSTEL AS LoadingPoint_LSTEL,\n        LIKP.TRAGR AS TransportationGroupHdr_TRAGR,\n        LIKP.FKARV AS ProposedBillingTypeForADeliveryRelatedBillingDoc_FKARV,\n        LIKP.FKDAT AS BillingDateForBillingIndexAndPrintout_FKDAT,\n        LIKP.PERFK AS InvoiceDates_PERFK,\n        LIKP.ROUTA AS Route_ROUTA,\n        LIKP.STAFO AS UpdateGroupForStatisticsHdr_STAFO,\n        LIKP.KALSM AS PricingProcedure_KALSM,\n        LIKP.KNUMV AS NumberOfTheDocumentCondition_KNUMV,\n        LIKP.WAERK AS SdDocumentCurrency_WAERK,\n        LIKP.VKBUR AS SalesOfficeHdr_VKBUR,\n        LIKP.VBEAK AS ShippingProcessingTimeForTheEntireDocument_VBEAK,\n        LIKP.ZUKRL AS CombinationCriteriaForDelivery_ZUKRL,\n        LIKP.VERUR AS DistributionDelivery_VERUR,\n        LIKP.COMMN AS CommunicationNumberForQApiInterface_COMMN,\n        LIKP.STWAE AS StatisticsCurrency_STWAE,\n        LIKP.STCUR AS ExchangeRateForStatistics_STCUR,\n        LIKP.EXNUM AS NumberOfForeignTradeDataInMmAndSdDocuments_EXNUM,\n        LIKP.AENAM AS NameOfPersonWhoChangedObjectHdr_AENAM,\n        LIKP.AEDAT AS DateOfLastChangeHdr_AEDAT,\n        LIKP.LGNUM AS WarehouseNumberWarehouseComplex_LGNUM,\n        LIKP.LISPL AS DeliveryWithinOneWarehouse_LISPL,\n        LIKP.VKOIV AS SalesOrganizationForIntercompanyBilling_VKOIV,\n        LIKP.VTWIV AS DistributionChannelForIntercompanyBilling_VTWIV,\n        LIKP.SPAIV AS DivisionForIntercompanyBilling_SPAIV,\n        LIKP.FKAIV AS BillingTypeForIntercompanyBilling_FKAIV,\n        LIKP.PIOIV AS DateForInterCompanyBilling_PIOIV,\n        LIKP.FKDIV AS BillingDateForInterCompanyBilling_FKDIV,\n        LIKP.KUNIV AS CustomerNumberForInterCompanyBilling_KUNIV,\n        LIKP.KKBER AS CreditControlArea_KKBER,\n        LIKP.KNKLI AS CreditLimitReference_KNKLI,\n        LIKP.GRUPP AS CustomerCreditGroup_GRUPP,\n        LIKP.SBGRP AS CreditRepresentativeGroupForCreditManagement_SBGRP,\n        LIKP.CTLPC AS CreditManagement_RiskCategory_CTLPC,\n        LIKP.CMWAE AS CurrencyKeyOfCreditControlArea_CMWAE,\n        LIKP.AMTBL AS ReleasedCreditValueOfTheDocument_AMTBL,\n        LIKP.BOLNR AS BillOfLading_BOLNR,\n        LIKP.LIFNR AS VendorsAccountNumber_LIFNR,\n        LIKP.TRATY AS MeansOfTransportType_TRATY,\n        LIKP.TRAID AS MeansOfTransportId_TRAID,\n        LIKP.CMFRE AS ReleaseDateOfTheDocumentDeterminedByCreditManagement_CMFRE,\n        LIKP.CMNGV AS NextDate_CMNGV,\n        LIKP.XABLN AS GoodsReceiptissueSlipNumber_XABLN,\n        LIKP.BLDAT AS DocumentDateInDocument_BLDAT,\n        LIKP.WADAT_IST AS ActualGoodsMovementDate_WADAT_IST,\n        LIKP.TRSPG AS ShipmentBlockingReason_TRSPG,\n        LIKP.TPSID AS IdForExternalTransportSystem_TPSID,\n        LIKP.LIFEX AS ExternalIdentificationOfDeliveryNote_LIFEX,\n        LIKP.TERNR AS OrderNumber_TERNR,\n        LIKP.KALSM_CH AS SearchProcedureForBatchDetermination_KALSM_CH,\n        LIKP.KLIEF AS CorrectionDelivery_KLIEF,\n        LIKP.KALSP AS Shipping_PricingProcedure_KALSP,\n        LIKP.KNUMP AS NumberOfDocumentConditionPricing_KNUMP,\n        LIKP.AULWE AS RouteSchedule_AULWE,\n        LIKP.WERKS AS ReceivingPlantForDeliveries_WERKS,\n        LIKP.LCNUM AS FinancialDocNumber_LCNUM,\n        LIKP.ABSSC AS PaymentGuaranteeProcedure_ABSSC,\n        LIKP.KOUHR AS PickingTime_KOUHR,\n        LIKP.TDUHR AS TransTPlanningTime_TDUHR,\n        LIKP.LDUHR AS LoadingTime_LDUHR,\n        LIKP.WAUHR AS TimeOfGoodsIssue_WAUHR,\n        LIKP.LGTOR AS DoorForWarehouseNumber_LGTOR,\n        LIKP.LGBZO AS StagingAreaForWarehouseComplexHdr_LGBZO,\n        LIKP.AKWAE AS CurrencyKeyForeignTrade_AKWAE,\n        LIKP.AKKUR AS ExchangeRateForLetterCreditProcgInForeignTrade_AKKUR,\n        LIKP.AKPRZ AS DepreciationPercentageForFinancialDocumentProcessing_AKPRZ,\n        LIKP.PROLI AS DangerousGoodsManagementProfileInSdDocuments_PROLI,\n        LIKP.XBLNR AS ReferenceDocumentNumber_XBLNR,\n        LIKP.HANDLE AS WorldwideUniqueKeyForLikpVbeln_HANDLE,\n        LIKP.TSEGFL AS TimeSegmentExists_TSEGFL,\n        LIKP.TSEGTP AS EventGroupTimeSegmentDeliveryHeader_TSEGTP,\n        LIKP.TZONIS AS TimeZoneOfDeliveringLocation_TZONIS,\n        LIKP.TZONRC AS TimeZoneOfRecipientLocation_TZONRC,\n        LIKP.CONT_DG AS Indicator_DocumentContainsDangerousGoods_CONT_DG,\n        LIKP.VERURSYS AS DistributionDelivery_OriginalSystem_VERURSYS,\n        LIKP.KZWAB AS IndicatorForControllingGoodsMovement_KZWAB,\n        LIKP.VLSTK AS DistributionStatus_VLSTK,\n        LIKP.TCODE AS TransactionCode_TCODE,\n        LIKP.VSART AS ShippingType_VSART,\n        LIKP.TRMTYP AS MeansOfTransport_TRMTYP,\n        LIKP.SDABW AS SpecialProcessingIndicator_SDABW,\n        LIKP.VBUND AS CompanyId_VBUND,\n        LIKP.XWOFF AS CalculationOfValOpen_XWOFF,\n        LIKP.DIRTA AS AutomaticToCreationImmediatelyAfterTrGeneration_DIRTA,\n        LIKP.PRVBE AS ProductionSupplyArea_PRVBE,\n        LIKP.FOLAR AS DeliveryType_FOLAR,\n        LIKP.PODAT AS Date__proofOfDelivery___PODAT,\n        LIKP.POTIM AS ConfirmationTime_POTIM,\n        LIKP.VGANZ AS NumberOfDeliveryItemsWithPrecedessOrInOtherSystem_VGANZ,\n        LIKP.IMWRK AS DeliveryHasStatusInPlant_IMWRK,\n        LIKP.SPE_LOEKZ AS DocumentDeletionIndicator_SPE_LOEKZ,\n        LIKP.SPE_LOC_SEQ AS SequenceOfIntermediateLocationsInReturnsProcess_SPE_LOC_SEQ,\n        LIKP.SPE_ACC_APP_STS AS DeliveryConfirmationStatus_SPE_ACC_APP_STS,\n        LIKP.SPE_SHP_INF_STS AS ShipmentInformationStatus_SPE_SHP_INF_STS,\n        LIKP.SPE_RET_CANC AS Returns_FlagShowingThatAnAsnIsCancelled_SPE_RET_CANC,\n        LIKP.SPE_WAUHR_IST AS TimeOfGoodsIssue_Local,\n        LIKP.SPE_WAZONE_IST AS TimeZone_SPE_WAZONE_IST,\n        LIKP.SPE_REV_VLSTK AS DistributionStatus_DecentralizedWarehouseProcessing_SPE_REV_VLSTK,\n        LIKP.SPE_LE_SCENARIO AS ScenarioLogisticExecution_SPE_LE_SCENARIO,\n        LIKP.SPE_ORIG_SYS AS OriginalSystemType_SPE_ORIG_SYS,\n        LIKP.SPE_CHNG_SYS AS LastChangerSystemType_SPE_CHNG_SYS,\n        LIKP.SPE_GEOROUTE AS DescriptionOfAGeographicalRoute_SPE_GEOROUTE,\n        LIKP.SPE_GEOROUTEIND AS ChangeIndicatorForTheRoute_SPE_GEOROUTEIND,\n        LIKP.SPE_CARRIER_IND AS ChangeIndicatorForTheCarrier_SPE_CARRIER_IND,\n        LIKP.SPE_GTS_REL AS GoodsTrafficType_SPE_GTS_REL,\n        LIKP.SPE_GTS_RT_CDE AS RouteCodeForSapGlobalTradeServices_SPE_GTS_RT_CDE,\n        LIKP.SPE_REL_TMSTMP AS ReleaseTimeStamp_SPE_REL_TMSTMP,\n        LIKP.SPE_UNIT_SYSTEM AS MeasurementUnitSystem_SPE_UNIT_SYSTEM,\n        LIKP.SPE_INV_BFR_GI AS InvoiceCreationBeForeGoodsIssue_SPE_INV_BFR_GI,\n        LIKP.SPE_QI_STATUS AS StatusOfQualityInspectionForReturnsDeliveries_SPE_QI_STATUS,\n        LIKP.SPE_RED_IND AS SpeIndicatorIfRedirectingHasOccured_SPE_RED_IND,\n        LIKP.SAKES AS SapGlobalTradeServices_StorageStatusOfDelivery_SAKES,\n        LIKP.SPE_LIFEX_TYPE AS TypeOfExternalIdentification_SPE_LIFEX_TYPE,\n        LIKP.SPE_TTYPE AS MeansOfTransport_SPE_TTYPE,\n        LIKP.SPE_PRO_NUMBER AS PartnerIdentification_ProgressiveIdentificationNumber_SPE_PRO_NUMBER,\n        LIKP.LOC_GUID AS Akkreditiv_guid_LOC_GUID,\n        LIKP.SPE_BILLING_IND AS EwmBillingIndicator_SPE_BILLING_IND,\n        LIKP.PRINTER_PROFILE AS DescriptionOfPrintProfile_PRINTER_PROFILE,\n        LIKP.MSR_ACTIVE AS AdvancedReturnsManagementActive_MSR_ACTIVE,\n        LIKP.PRTNR AS ConfirmationNumber_PRTNR,\n        LIKP.STGE_LOC_CHANGE AS TemporaryChangeOfStorageLocationsInDelivery_STGE_LOC_CHANGE,\n        LIKP.TM_CTRL_KEY AS ControlKeyForDocumentTransferToTm_TM_CTRL_KEY,\n        LIKP.DLV_SPLIT_INITIA AS DeliverySplitInitiator_DLV_SPLIT_INITIA,\n        LIKP.DLV_VERSION AS DeliveryVersion_DLV_VERSION,\n        LIKP.HANDOVERLOC AS LocationForAPhysicalHandoverOfGoods_HANDOVERLOC,\n        LIKP.HANDOVERDATE AS HandoverDateAtTheHandoverLocation_HANDOVERDATE,\n        LIKP.INCO3_L AS IncotermsLocation2_INCO3_L,\n        LIKP.BORGR_GRP AS MultiLevelGoodsReceiptAutomotive_BORGR_GRP,\n        LIKP.FSH_TRANSACTION AS TransactionNumberHdr_FSH_TRANSACTION,\n        LIKP.FSH_VAS_LAST_ITEM AS LastVasItemNumber_FSH_VAS_LAST_ITEM,\n        LIKP.FSH_VAS_CG AS ValueAddedServicesCustomerGroup_FSH_VAS_CG,\n        LIPS.POSNR AS DeliveryItem_POSNR,\n        LIPS.PSTYV AS DeliveryItemCategory_PSTYV,\n        LIPS.ERNAM AS NameOfPersonWhoCreatedTheObject_ERNAM,\n        LIPS.ERZET AS EntryTime_ERZET,\n        LIPS.ERDAT AS DateOnWhichRecordWasCreated_ERDAT,\n        LIPS.MATNR AS MaterialNumber_MATNR,\n        LIPS.MATWA AS MaterialEntered_MATWA,\n        LIPS.MATKL AS MaterialGroup_MATKL,\n        LIPS.WERKS AS Plant_WERKS,\n        LIPS.LGORT AS StorageLocation_LGORT,\n        LIPS.CHARG AS BatchNumber_CHARG,\n        LIPS.LICHN AS VendorBatchNumber_LICHN,\n        LIPS.KDMAT AS MaterialBelongingToTheCustomer_KDMAT,\n        LIPS.PRODH AS ProductHierarchy_PRODH,\n        LIPS.LFIMG AS ActualQuantityDelivered_InSalesUnits_LFIMG,\n        LIPS.MEINS AS BaseUnitOfMeasure_MEINS,\n        LIPS.VRKME AS SalesUnit_VRKME,\n        LIPS.UMVKZ AS Numerator_Factor_ForConversionOfSalesQuantityIntoSku_UMVKZ,\n        LIPS.UMVKN AS Denominator_Divisor_ForConversionOfSalesQtyIntoSku_UMVKN,\n        LIPS.GEWEI AS WeightUnit_GEWEI,\n        LIPS.VOLEH AS VolumeUnit_VOLEH,\n        LIPS.KZTLF AS PartialDeliveryAtItemLevel_KZTLF,\n        LIPS.UEBTK AS Indicator_UnlimitedOverdeliveryAllowed_UEBTK,\n        LIPS.UEBTO AS OverdeliveryToleranceLimit_UEBTO,\n        LIPS.UNTTO AS UnderdeliveryToleranceLimit_UNTTO,\n        LIPS.CHSPL AS BatchSplitAllowed_CHSPL,\n        LIPS.FAKSP AS BillingBlock_FAKSP,\n        LIPS.MBDAT AS MaterialAvailabilityDate_MBDAT,\n        LIPS.LGMNG AS ActualQuantityDeliveredInStockKeepingUnits_LGMNG,\n        LIPS.ARKTX AS ShortTextForSalesOrderItem_ARKTX,\n        LIPS.LGPBE AS StorageBin_LGPBE,\n        LIPS.VBELV AS OriginatingDocument_VBELV,\n        LIPS.POSNV AS OriginatingItem_POSNV,\n        LIPS.VBTYV AS SdDocumentCategory_VBTYV,\n        LIPS.VGSYS AS LogicalSystemInThePrecedingDocument_VGSYS,\n        LIPS.VGBEL AS SalesOrderNumber_VGBEL,\n        LIPS.VGPOS AS SalesOrderItem_VGPOS,\n        LIPS.UPFLU AS UpdateIndicatorForDeliveryDocumentFlow_UPFLU,\n        LIPS.UEPOS AS HigherLevelItemInBOM_UEPOS,\n        LIPS.FKREL AS RelevantForBilling_FKREL,\n        LIPS.LADGR AS LoadingGroup_LADGR,\n        LIPS.TRAGR AS TransportationGroup_TRAGR,\n        LIPS.KOMKZ AS IndicatorForPickingControl_KOMKZ,\n        LIPS.LGNUM AS WarehouseNumber_LGNUM,\n        LIPS.LISPL AS SplitToWarehouseNumberRequired_LISPL,\n        LIPS.LGTYP AS StorageType_LGTYP,\n        LIPS.LGPLA AS StorageBin_LGPLA,\n        LIPS.BWTEX AS Indicator_SeparateValuation_BWTEX,\n        LIPS.BWART AS MovementType_InventoryManagement_BWART,\n        LIPS.BWLVS AS MovementTypeForWarehouseManagement_BWLVS,\n        LIPS.KZDLG AS Indicator_DynamicStorageBinInWarehouseManagement_KZDLG,\n        LIPS.BDART AS RequirementType_BDART,\n        LIPS.PLART AS PlanningType_PLART,\n        LIPS.MTART AS MaterialType_MTART,\n        LIPS.XCHPF AS BatchManagementRequirementIndicator_XCHPF,\n        LIPS.XCHAR AS BatchManagementIndicator_Internal_XCHAR,\n        LIPS.VGREF AS PrecedingDocumentHasResultedFromReference_VGREF,\n        LIPS.POSAR AS ItemType_POSAR,\n        LIPS.BWTAR AS ValuationType_BWTAR,\n        LIPS.SUMBD AS SummingUpOfRequirements_SUMBD,\n        LIPS.MTVFP AS CheckingGroupForAvailability_MTVFP,\n        LIPS.GSBER AS BusinessArea_GSBER,\n        LIPS.VKBUR AS SalesOffice_VKBUR,\n        LIPS.VKGRP AS SalesGroup_VKGRP,\n        LIPS.VTWEG AS DistributionChannel_VTWEG,\n        LIPS.SPART AS Division_SPART,\n        LIPS.GRKOR AS DeliveryGroup_ItemsAreDeliveredTogether_GRKOR,\n        LIPS.FMENG AS QuantityIsFixed_FMENG,\n        LIPS.ANTLF AS MaximumNumberOfPartialDeliveriesAllowedPerItem_ANTLF,\n        LIPS.VBEAF AS FixedShippingProcessingTimeInDays_VBEAF,\n        LIPS.VBEAV AS VariableShippingProcessingTimeInDays_VBEAV,\n        LIPS.STAFO AS UpdateGroupForStatisticsUpdate_STAFO,\n        LIPS.KZWI1 AS Subtotal1FromPricingProcedureForCondition_KZWI1,\n        LIPS.KZWI2 AS Subtotal2FromPricingProcedureForCondition_KZWI2,\n        LIPS.KZWI3 AS Subtotal3FromPricingProcedureForCondition_KZWI3,\n        LIPS.KZWI4 AS Subtotal4FromPricingProcedureForCondition_KZWI4,\n        LIPS.KZWI5 AS Subtotal5FromPricingProcedureForCondition_KZWI5,\n        LIPS.KZWI6 AS Subtotal6FromPricingProcedureForCondition_KZWI6,\n        LIPS.SOBKZ AS SpecialStockIndicator_SOBKZ,\n        LIPS.AEDAT AS DateOfLastChange_AEDAT,\n        LIPS.EAN11 AS InternationalArticleNumber_eanupc_EAN11,\n        LIPS.KVGR1 AS CustomerGroup1_KVGR1,\n        LIPS.KVGR2 AS CustomerGroup2_KVGR2,\n        LIPS.KVGR3 AS CustomerGroup3_KVGR3,\n        LIPS.KVGR4 AS CustomerGroup4_KVGR4,\n        LIPS.KVGR5 AS CustomerGroup5_KVGR5,\n        LIPS.MVGR1 AS MaterialGroup1_MVGR1,\n        LIPS.MVGR2 AS MaterialGroup2_MVGR2,\n        LIPS.MVGR3 AS MaterialGroup3_MVGR3,\n        LIPS.MVGR4 AS MaterialGroup4_MVGR4,\n        LIPS.MVGR5 AS MaterialGroup5_MVGR5,\n        LIPS.VPZUO AS AllocationIndicator_VPZUO,\n        LIPS.VGTYP AS SdDocumentCategory_VGTYP,\n        LIPS.RFVGTYP AS TypeOfPrecedingDocumentInCentralSystem_RFVGTYP,\n        LIPS.KOSTL AS CostCenter_KOSTL,\n        LIPS.KOKRS AS ControllingArea_KOKRS,\n        LIPS.PAOBJNR AS ProfitabilitySegmentNumber_PAOBJNR,\n        LIPS.PRCTR AS ProfitCenter_PRCTR,\n        LIPS.PS_PSP_PNR AS WorkBreakdownStructureElement_wbsElement_PS_PSP_PNR,\n        LIPS.AUFNR AS OrderNumber_AUFNR,\n        LIPS.POSNR_PP AS OrderItemNumber_POSNR_PP,\n        LIPS.KDAUF AS SalesOrderNumber_KDAUF,\n        LIPS.KDPOS AS ItemNumberInSalesOrder_KDPOS,\n        LIPS.VPMAT AS PlanningMaterial_VPMAT,\n        LIPS.VPWRK AS PlanningPlant_VPWRK,\n        LIPS.PRBME AS BaseUnitOfMeasureForProductGroup_PRBME,\n        LIPS.UMREF AS ConversionFactor_Quantities_UMREF,\n        LIPS.KNTTP AS AccountAssignmentCategory_KNTTP,\n        LIPS.KZVBR AS ConsumptionPosting_KZVBR,\n        LIPS.FIPOS AS CommitmentItem_FIPOS,\n        LIPS.FISTL AS FundsCenter_FISTL,\n        LIPS.GEBER AS Fund_GEBER,\n        LIPS.PCKPF AS PackingControl_PCKPF,\n        LIPS.BEDAR_LF AS RequirementsClass_BEDAR_LF,\n        LIPS.CMPNT AS Id_ItemWithActiveCreditFunctionRelevantForCredit_CMPNT,\n        LIPS.KCMENG AS CumulativeBatchQuantityOfAllSplitItems_InStckunit_KCMENG,\n        LIPS.KCBRGEW AS CumulativeGrossWeightOfAllBatchSplitItems_KCBRGEW,\n        LIPS.KCNTGEW AS CumulativeNetWeightOfAllBatchSplitItems_KCNTGEW,\n        LIPS.KCVOLUM AS CumulativeVolumeOfAllBatchSplitItems_KCVOLUM,\n        LIPS.UECHA AS HigherLevelItemOfBatchSplitItem_UECHA,\n        LIPS.CUOBJ AS Configuration_CUOBJ,\n        LIPS.CUOBJ_CH AS InternalObjectNumberOfTheBatchClassification_CUOBJ_CH,\n        LIPS.ANZSN AS NumberOfSerialNumbers_ANZSN,\n        LIPS.SERAIL AS SerialNumberProfile_SERAIL,\n        LIPS.KCGEWEI AS WeightUnit_KCGEWEI,\n        LIPS.KCVOLEH AS VolumeUnit_KCVOLEH,\n        LIPS.SERNR AS BomExplosionNumber_SERNR,\n        LIPS.ABRLI AS InternalDeliveryScheduleNumber_ABRLI,\n        LIPS.ABART AS RelType_ABART,\n        LIPS.ABRVW AS UsageIndicator_ABRVW,\n        LIPS.QPLOS AS InspectionLotNumber_QPLOS,\n        LIPS.QTLOS AS PartialLotNumber_QTLOS,\n        LIPS.NACHL AS CustomerHasNotPostedGoodsReceipt_NACHL,\n        LIPS.MAGRV AS MaterialGroup_PackagingMaterials_MAGRV,\n        LIPS.OBJKO AS ObjectNumberAtHeaderLevel_OBJKO,\n        LIPS.OBJPO AS ObjectNumberAtItemLevel_OBJPO,\n        LIPS.AESKD AS CustomerEngineeringChangeStatus_AESKD,\n        LIPS.SHKZG AS ReturnsItem_SHKZG,\n        LIPS.PROSA AS IdForMaterialDetermination_PROSA,\n        LIPS.UEPVW AS HigherLevelItemUsage_UEPVW,\n        LIPS.EMPST AS ReceivingPoint_EMPST,\n        LIPS.ABTNR AS DepartmentNumber_ABTNR,\n        LIPS.KOQUI AS PickingIsSubjectToConfirmation_KOQUI,\n        LIPS.STADAT AS StatisticsDate_STADAT,\n        LIPS.AKTNR AS Promotion_AKTNR,\n        LIPS.KNUMH_CH AS NumberOfConditionRecordFromBatchDetermination_KNUMH_CH,\n        LIPS.PREFE AS PreferenceIndicatorInExportimport_PREFE,\n        LIPS.EXART AS BusinessTransactionTypeForForeignTrade_EXART,\n        LIPS.CLINT AS InternalClassNumber_CLINT,\n        LIPS.CHMVS AS Batches_ExitToQuantityProposal_CHMVS,\n        LIPS.ABELN AS AllocationTableNumber_ABELN,\n        LIPS.ABELP AS ItemNumberOfAllocationTable_ABELP,\n        LIPS.LFIMG_FLO AS InternalFieldDoNotUseLfimgInFloatMum_LFIMG_FLO,\n        LIPS.LGMNG_FLO AS InternalFieldDoNotUseLgmngInFloatMum_LGMNG_FLO,\n        LIPS.KCMENG_FLO AS InternalFieldDoNotUseKcmengInFloatMum_KCMENG_FLO,\n        LIPS.KZUMW AS EnvironmentallyRelevant_KZUMW,\n        LIPS.KMPMG AS ComponentQuantity_KMPMG,\n        LIPS.AUREL AS RelevantToAllocationTable_AUREL,\n        LIPS.KPEIN AS ConditionPricingUnit_KPEIN,\n        LIPS.KMEIN AS ConditionUnit_KMEIN,\n        LIPS.NETPR AS NetPrice_NETPR,\n        LIPS.KOWRR AS StatisticalValues_KOWRR,\n        LIPS.KZBEW AS MovementIndicator_KZBEW,\n        LIPS.MFRGR AS MaterialFreightGroup_MFRGR,\n        LIPS.CHHPV AS PackAccumulatedBatchesMovementTypeItem_CHHPV,\n        LIPS.ABFOR AS FormOfPaymentGuarantee_ABFOR,\n        LIPS.ABGES AS Guaranteed_FactorBetween0And1_ABGES,\n        LIPS.MBUHR AS MaterialStagingTime_MBUHR,\n        LIPS.WKTNR AS ValueContractNo_WKTNR,\n        LIPS.WKTPS AS ValueContractItem_WKTPS,\n        LIPS.J_1BCFOP AS CfopCodeAndExtension_J_1BCFOP,\n        LIPS.J_1BTAXLW1 AS TaxLaw_Icms_J_1BTAXLW1,\n        LIPS.J_1BTAXLW2 AS TaxLaw_Ipi_J_1BTAXLW2,\n        LIPS.J_1BTXSDC AS SdTaxCode_J_1BTXSDC,\n        LIPS.SITUA AS IndicatorForSituation_SITUA,\n        LIPS.RSNUM AS NumberOfReservationdependentRequirements_RSNUM,\n        LIPS.RSPOS AS ItemNumberOfReservationDependentRequirements_RSPOS,\n        LIPS.RSART AS RecordType_RSART,\n        LIPS.KANNR AS KanbansequenceNumber_KANNR,\n        LIPS.KZFME AS Id_LeadingUnitOfMeasureForCompletingATransaction_KZFME,\n        LIPS.PROFL AS DangerousGoodsIndicatorProfile_PROFL,\n        LIPS.KCMENGVME AS CumulativeBatchQuantityOfAllSplitItemsInSalesUnits_KCMENGVME,\n        LIPS.KCMENGVMEF AS CumulatedBatchSplitQuantityInVrkmeAndFloat_KCMENGVMEF,\n        LIPS.KZBWS AS ValuationOfSpecialStock_KZBWS,\n        LIPS.PSPNR AS ProjectDefinition_Internal_PSPNR,\n        LIPS.EPRIO AS WithdrawalSequenceGroupForStocks_EPRIO,\n        LIPS.RULES AS StockDeterminationRule_RULES,\n        LIPS.KZBEF AS IndicatorInventoryManagementActive_KZBEF,\n        LIPS.MPROF AS MfrPartProfile_MPROF,\n        LIPS.EMATN AS MaterialNumberCorrespondingToManufacturerPartNumber_EMATN,\n        LIPS.LGBZO AS StagingAreaForWarehouseComplex_LGBZO,\n        LIPS.HANDLE AS WorldwideUniqueKeyForLips_HANDLE,\n        LIPS.VERURPOS AS DistributionDelivery_OriginalItem_VERURPOS,\n        LIPS.LIFEXPOS AS ExternalItemNumber_LIFEXPOS,\n        LIPS.NOATP AS Indicator_DeactivateAvailabilityCheck_NOATP,\n        LIPS.NOPCK AS Indicator_NotRelevantForPicking_NOPCK,\n        LIPS.RBLVS AS ReferenceMovementTypeForWmFromMaterialMovements_RBLVS,\n        LIPS.BERID AS MrpArea_BERID,\n        LIPS.BESTQ AS StockCategoryInTheWarehouseManagementSystem_BESTQ,\n        LIPS.UMBSQ AS StockCategoryInTheWarehouseManagementSystem_UMBSQ,\n        LIPS.UMMAT AS ReceivingIssuingMaterial_UMMAT,\n        LIPS.UMWRK AS ReceivingPlantIssuingPlant_UMWRK,\n        LIPS.UMLGO AS ReceivingIssuingStorageLocation_UMLGO,\n        LIPS.UMCHA AS ReceivingIssuingBatch_UMCHA,\n        LIPS.UMBAR AS ValuationTypeOfTransferBatch_UMBAR,\n        LIPS.UMSOK AS SpecialStockIndicatorForPhysicalStockTransfer_UMSOK,\n        LIPS.SONUM AS SpecialStockNumber_SONUM,\n        LIPS.USONU AS SpecialStockNumber_USONU,\n        LIPS.AKKUR AS ExchangeRateForLetterForeignTrade_AKKUR,\n        LIPS.AKMNG AS CurrentQtyFieldForArithmeticOperations_AKMNG,\n        LIPS.VKGRU AS RepairProcessing_ClassificationOfItems_VKGRU,\n        LIPS.SHKZG_UM AS Indicator_UnmatInMainPosting_SHKZG_UM,\n        LIPS.INSMK AS StockType_INSMK,\n        LIPS.KZECH AS DeterminationOfBatchEntryInTheProductionprocessOrder_KZECH,\n        LIPS.FLGWM AS DestStorageDataFromPrecedingDocument_FLGWM,\n        LIPS.BERKZ AS MaterialStagingIndicatorForProductionSupply_BERKZ,\n        LIPS.HUPOS AS Indicator_DeliveryItemIsAHuItem_HUPOS,\n        LIPS.NOWAB AS Indicator_ItemNotRelevantForGoodsMovements_NOWAB,\n        LIPS.KONTO AS GlAccountNumber_KONTO,\n        LIPS.KZEAR AS FinalIssueForThisReservation_KZEAR,\n        LIPS.HSDAT AS DateOfManufacture_HSDAT,\n        LIPS.VFDAT AS BestBeforeDate_VFDAT,\n        LIPS.LFGJA AS FiscalYearOfCurrentPeriod_LFGJA,\n        LIPS.LFBNR AS AReferenceDocument_LFBNR,\n        LIPS.LFPOS AS ItemOfAReferenceDocument_LFPOS,\n        LIPS.GRUND AS ReasonForGoodsMovment_GRUND,\n        LIPS.FOBWA AS SubsequentMovementType_FOBWA,\n        LIPS.DLVTP AS DeliveryCategory_DLVTP,\n        LIPS.EXBWR AS ExternallyEnteredPostingAmountInLocalCurrency_EXBWR,\n        LIPS.BPMNG AS QuantityInPurchaseOrderPriceUnit_BPMNG,\n        LIPS.EXVKW AS ExternallyEnteredSalesValueInLocalCurrency_EXVKW,\n        LIPS.CMPRE_FLT AS ItemCreditPrice_CMPRE_FLT,\n        LIPS.KZPOD AS PodIndicator_KZPOD,\n        LIPS.LFDEZ AS NotRelevantForDistributionForWms_LFDEZ,\n        LIPS.UMREV AS ConversionFactorOfDeliveryQuantityVrkmeForMeins_UMREV,\n        LIPS.PODREL AS PodControl_ProofOfDelivery_PODREL,\n        LIPS.KZUML AS StockTransfertransferPosting_KZUML,\n        LIPS.FKBER AS FunctionalArea_FKBER,\n        LIPS.GRANT_NBR AS Grant_GRANT_NBR,\n        LIPS.KZWSO AS UnitsOfMeasureUsage_KZWSO,\n        LIPS.GMCONTROL AS GoodsMovementControl_GMCONTROL,\n        LIPS.POSTING_CHANGE AS GoodsMovementControl_Hu_POSTING_CHANGE,\n        LIPS.UM_PS_PSP_PNR AS Receivingissuing_wbsElement_UM_PS_PSP_PNR,\n        LIPS.PRE_VL_ETENS AS SequentialNumberOfVendorConfirmation_PRE_VL_ETENS,\n        LIPS.SPE_GEN_ELIKZ AS deliveryCompleted_SPE_GEN_ELIKZ,\n        LIPS.SPE_SCRAP_IND AS ScrapIndicatorForEwmProcessing_SPE_SCRAP_IND,\n        LIPS.SPE_AUTH_NUMBER AS ReturnMaterialAuthorizationNumber_SPE_AUTH_NUMBER,\n        LIPS.SPE_INSPOUT_GUID AS Inspections_InspectionOutcomeGuidSetByEwm_SPE_INSPOUT_GUID,\n        LIPS.SPE_FOLLOW_UP AS DefaultFollow_SPE_FOLLOW_UP,\n        LIPS.SPE_EXP_DATE_EXT AS EndDateOfValidityPeriodOfReturnsDelivery_SPE_EXP_DATE_EXT,\n        LIPS.SPE_EXP_DATE_INT AS EndDateOfInternalValidityPeriodOfReturnsDelivery_SPE_EXP_DATE_INT,\n        LIPS.SPE_AUTH_COMPLET AS RmaCompletionIndicator_SPE_AUTH_COMPLET,\n        LIPS.ORMNG AS OriginalQuantityOfDeliveryItem_ORMNG,\n        LIPS.SPE_ATP_TMSTMP AS AtpTimeStamp_SPE_ATP_TMSTMP,\n        LIPS.SPE_ORIG_SYS AS OriginalSystemTypeItm_SPE_ORIG_SYS,\n        LIPS.SPE_LIEFFZ AS CumulativeQtyForSchedagrVendorPOV_SPE_LIEFFZ,\n        LIPS.SPE_IMWRK AS InboundDeliveryItemHasStatusinPlant_SPE_IMWRK,\n        LIPS.SPE_LIFEXPOS2 AS ExternalItemIdentifier_SPE_LIFEXPOS2,\n        LIPS.SPE_EXCEPT_CODE AS ExceptionCodeWarehouseForQuantityDifference_SPE_EXCEPT_CODE,\n        LIPS.SPE_KEEP_QTY AS RetentionQuantityForScrap_SPE_KEEP_QTY,\n        LIPS.SPE_ALTERNATE AS AlternateProductNumber_SPE_ALTERNATE,\n        LIPS.SPE_MAT_SUBST AS ReasonForMaterialSubstitution_SPE_MAT_SUBST,\n        LIPS.SPE_STRUC AS StructureOfItemsThatAreDeliveredTogether_SPE_STRUC,\n        LIPS.SPE_APO_QNTYFAC AS NumeratorOfQuotientForUnitOfMeasureConversion_SPE_APO_QNTYFAC,\n        LIPS.SPE_APO_QNTYDIV AS DenominatorOfQuotientForUnitOfMeasureConversion_SPE_APO_QNTYDIV,\n        LIPS.SPE_HERKL AS NonPreferentialOrigin_SPE_HERKL,\n        LIPS.SPE_BXP_DATE_EXT AS BeginDateOfValidityPeriodOfReturnsDelivery_SPE_BXP_DATE_EXT,\n        LIPS.SPE_VERSION AS DeliveryVersionAtConfirmation_SPE_VERSION,\n        LIPS.SPE_COMPL_MVT AS CompletionOfGoodsMovementsAfterDifferencePostings_SPE_COMPL_MVT,\n        LIPS.J_1BTAXLW4 AS CofinsTaxLaw_J_1BTAXLW4,\n        LIPS.J_1BTAXLW5 AS PisTaxLaw_J_1BTAXLW5,\n        LIPS.J_1BTAXLW3 AS IssTaxLaw_J_1BTAXLW3,\n        LIPS.BUDGET_PD AS Fm_BudgetPeriod_BUDGET_PD,\n        LIPS.KBNKZ AS KanbanIndicator_KBNKZ,\n        LIPS.FARR_RELTYPE AS RevenueAccountingType_FARR_RELTYPE,\n        LIPS.SITKZ AS SpecificationForIssuingValuatedStockInTransit_SITKZ,\n        LIPS.SGT_RCAT AS RequirementSegment_SGT_RCAT,\n        LIPS.SGT_SCAT AS StockSegment_SGT_SCAT,\n        LIPS.FSH_SEASON_YEAR AS SeasonYear_FSH_SEASON_YEAR,\n        LIPS.FSH_SEASON AS Season_FSH_SEASON,\n        LIPS.FSH_COLLECTION AS FashionCollection_FSH_COLLECTION,\n        LIPS.FSH_THEME AS FashionTheme_FSH_THEME,\n        LIPS.FSH_KVGR6 AS CustomerGroup6_FSH_KVGR6,\n        LIPS.FSH_KVGR7 AS CustomerGroup7_FSH_KVGR7,\n        LIPS.FSH_KVGR8 AS CustomerGroup8_FSH_KVGR8,\n        LIPS.FSH_KVGR9 AS CustomerGroup9_FSH_KVGR9,\n        LIPS.FSH_KVGR10 AS CustomerGroup10_FSH_KVGR10,\n        LIPS.FSH_VAS_REL AS VasRelevant_FSH_VAS_REL,\n        LIPS.FSH_VAS_PRNT_ID AS DeliveryItem_FSH_VAS_PRNT_ID,\n        LIPS.FSH_TRANSACTION AS TransactionNumber_FSH_TRANSACTION,\n        LIPS.FSH_ITEM_GROUP AS ItemGroup_FSH_ITEM_GROUP,\n        LIPS.FSH_ITEM AS ItemNumber_FSH_ITEM,\n        LIPS.FSH_RSNUM AS NumberOfReservationdependentRequirements_FSH_RSNUM,\n        LIPS.FSH_RSPOS AS ItemNumberOfReservationDependentRequirements_FSH_RSPOS,\n        LIPS.CONS_ORDER AS PurchaseOrderForConsignment_CONS_ORDER,\n        LIPS.WRF_CHARSTC1 AS CharacteristicValue1_WRF_CHARSTC1,\n        LIPS.WRF_CHARSTC2 AS CharacteristicValue2_WRF_CHARSTC2,\n        LIPS.WRF_CHARSTC3 AS CharacteristicValue3_WRF_CHARSTC3,\n        CalendarDateDimension_LFDAT.CalYear AS YearOfDeliveryDate_LFDAT,\n        CalendarDateDimension_LFDAT.CalMonth AS MonthOfDeliveryDate_LFDAT,\n        CalendarDateDimension_LFDAT.CalWeek AS WeekOfDeliveryDate_LFDAT,\n        CalendarDateDimension_LFDAT.DayOfMonth AS DayOfDeliveryDate_LFDAT,\n        CalendarDateDimension_LFDAT.CalQuarter AS QuarterOfDeliveryDate_LFDAT,\n        CalendarDateDimension_PODAT.CalYear AS YearOfProofOfDeliveryDate_PODAT,\n        CalendarDateDimension_PODAT.CalMonth AS MonthOfProofOfDeliveryDate_PODAT,\n        CalendarDateDimension_PODAT.CalWeek AS WeekOfProofOfDeliveryDate_PODAT,\n        CalendarDateDimension_PODAT.DayOfMonth AS DayOfProofOfDeliveryDate_PODAT,\n        CalendarDateDimension_PODAT.CalQuarter AS QuarterOfProofOfDeliveryDate_PODAT,\n\n        COALESCE(\n            LIKP.NETWR * currency_decimal.CURRFIX * CASE WHEN LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6') THEN -1 ELSE 1 END,\n            LIKP.NETWR * CASE WHEN LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6') THEN -1 ELSE 1 END\n        ) AS NetValueOfTheSalesOrderInDocumentCurrency_NETWR,\n        CASE \n            WHEN LIPS.SHKZG IN ('B', 'S', 'X') THEN LIPS.NTGEW * -1 \n            ELSE LIPS.NTGEW \n        END AS NetWeight_NTGEW,\n        CASE \n            WHEN LIPS.SHKZG IN ('B', 'S', 'X') THEN LIPS.BRGEW * -1 \n            ELSE LIPS.BRGEW \n        END AS GrossWeight_BRGEW,\n        CASE \n            WHEN LIPS.SHKZG IN ('B', 'S', 'X') THEN LIPS.VOLUM * -1 \n            ELSE LIPS.VOLUM \n        END AS Volume_VOLUM,\n        COALESCE(LIPS.WAVWR * currency_decimal.CURRFIX, LIPS.WAVWR) AS CostInDocumentCurrency_WAVWR,\n        COALESCE(LIPS.NETWR * currency_decimal.CURRFIX, LIPS.NETWR) AS NetValueInDocumentCurrency_NETWR,\n        DATEDIFF(DAY, LIKP.WADAT, LIKP.WADAT_IST) AS Delivery_Delay,\n        LIPS.LFIMG * LIPS.NETPR AS DeliveredNetValue,\n        CASE \n            WHEN LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6') OR LIPS.SHKZG IN ('B', 'S', 'X') THEN 'X' \n            ELSE '' \n        END AS IS_RETURN\n\n        -- IF(\n        -- LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6'),\n        -- COALESCE(LIKP.NETWR * currency_decimal.CURRFIX * -1, LIKP.NETWR * -1),\n        -- COALESCE(LIKP.NETWR * currency_decimal.CURRFIX, LIKP.NETWR)\n        -- ) AS NetValueOfTheSalesOrderInDocumentCurrency_NETWR,\n        -- IF(LIPS.SHKZG IN ('B', 'S', 'X'), (LIPS.NTGEW * -1), LIPS.NTGEW ) AS NetWeight_NTGEW,\n        -- IF(LIPS.SHKZG IN ('B', 'S', 'X'), (LIPS.BRGEW * -1), LIPS.BRGEW) AS GrossWeight_BRGEW,\n        -- IF(LIPS.SHKZG IN ('B', 'S', 'X'), (LIPS.VOLUM * -1), LIPS.VOLUM) AS Volume_VOLUM,\n        -- COALESCE(LIPS.WAVWR * currency_decimal.CURRFIX, LIPS.WAVWR) AS CostInDocumentCurrency_WAVWR,\n        -- COALESCE(LIPS.NETWR * currency_decimal.CURRFIX, LIPS.NETWR) AS NetValueInDocumentCurrency_NETWR,\n        -- DATEDIFF(DAY ,LIKP.WADAT, LIKP.WADAT_IST) AS Delivery_Delay,\n        -- LIPS.LFIMG * LIPS.NETPR AS DeliveredNetValue,\n        -- IF(LIKP.VBTYP IN ('H', 'K', 'N', 'O', 'T', '6') OR LIPS.SHKZG IN ('B', 'S', 'X'), 'X', '') AS IS_RETURN\n\n\n        \n    FROM SSI_SAP_TO_SNOW.RAW.lips AS LIPS\n    INNER JOIN SSI_SAP_TO_SNOW.RAW.likp AS LIKP\n        ON\n        LIKP.VBELN = LIPS.VBELN\n        AND LIKP.MANDT = LIPS.MANDT\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.currency_decimal AS currency_decimal\n        ON LIKP.WAERK = currency_decimal.CURRKEY\n    LEFT JOIN calendar_date_dim AS CalendarDateDimension_LFDAT\n        ON CalendarDateDimension_LFDAT.Date = LIKP.LFDAT\n    LEFT JOIN calendar_date_dim AS CalendarDateDimension_PODAT\n        ON CalendarDateDimension_PODAT.Date = LIKP.PODAT\n)\n\nSELECT * FROM deliveries", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.currency_decimal": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "currency_decimal", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/currency_decimal.sql", "original_file_path": "models/views/currency_decimal.sql", "unique_id": "model.sap_order_to_cash.currency_decimal", "fqn": ["sap_order_to_cash", "views", "currency_decimal"], "alias": "currency_decimal", "checksum": {"name": "sha256", "checksum": "89edad4d5b756b9aac07757c1db8150741ec974d3f283cfd9d4ddc246cce19af"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/currency_decimal.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.896261, "relation_name": "SSI_SAP_TO_SNOW.REPORT.currency_decimal", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith currency_decimal as (\n    SELECT DISTINCT\n        tcurx.CURRKEY,\n        CAST(POWER(10, 2 - COALESCE(tcurx.CURRDEC, 0)) AS NUMERIC) AS CURRFIX\n    FROM {{ source(\"source_db\", \"tcurx\") }} AS tcurx\n)\n\nSELECT * FROM currency_decimal", "language": "sql", "refs": [], "sources": [["source_db", "tcurx"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.tcurx"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/currency_decimal.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith currency_decimal as (\n    SELECT DISTINCT\n        tcurx.CURRKEY,\n        CAST(POWER(10, 2 - COALESCE(tcurx.CURRDEC, 0)) AS NUMERIC) AS CURRFIX\n    FROM SSI_SAP_TO_SNOW.RAW.tcurx AS tcurx\n)\n\nSELECT * FROM currency_decimal", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.tcurxview": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "tcurxview", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/tcurxview.sql", "original_file_path": "models/views/tcurxview.sql", "unique_id": "model.sap_order_to_cash.tcurxview", "fqn": ["sap_order_to_cash", "views", "tcurxview"], "alias": "tcurxview", "checksum": {"name": "sha256", "checksum": "44b739f62e794cee3af02b0bf54a49560b57ef257a7d7b3b4d6d43d5996634a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/tcurxview.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.8986702, "relation_name": "SSI_SAP_TO_SNOW.REPORT.tcurxview", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith tcurxview AS (\n    SELECT DISTINCT\n        CURRKEY,\n        CAST(POWER(10, 2 - COALESCE(CURRDEC, 0)) AS NUMERIC) AS CURRFIX\n    FROM\n        {{ source(\"source_db\", \"tcurx\") }}\n)\n\nSELECT * FROM tcurxview", "language": "sql", "refs": [], "sources": [["source_db", "tcurx"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.tcurx"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/tcurxview.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith tcurxview AS (\n    SELECT DISTINCT\n        CURRKEY,\n        CAST(POWER(10, 2 - COALESCE(CURRDEC, 0)) AS NUMERIC) AS CURRFIX\n    FROM\n        SSI_SAP_TO_SNOW.RAW.tcurx\n)\n\nSELECT * FROM tcurxview", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.aggvbpaheader": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "aggvbpaheader", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/aggvbpaheader.sql", "original_file_path": "models/views/aggvbpaheader.sql", "unique_id": "model.sap_order_to_cash.aggvbpaheader", "fqn": ["sap_order_to_cash", "views", "aggvbpaheader"], "alias": "aggvbpaheader", "checksum": {"name": "sha256", "checksum": "8f93e30af3566ffebd400e9fcba924dba2b5126f3e1b2c093116b9034751705d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/aggvbpaheader.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.9006748, "relation_name": "SSI_SAP_TO_SNOW.REPORT.aggvbpaheader", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith aggvbpaheader AS (\n    SELECT VBPA.mandt, VBPA.vbeln, VBPA.posnr,\n    \n        MAX(CASE WHEN VBPA.PARVW = 'AG' THEN VBPA.KUNNR ELSE NULL END) AS SoldToPartyHeader_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'AG' THEN KNA1.name1 ELSE NULL END) AS SoldToPartyHeaderName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'WE' THEN VBPA.KUNNR ELSE NULL END) AS ShipToPartyHeader_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'WE' THEN KNA1.name1 ELSE NULL END) AS ShipToPartyHeaderName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RE' THEN VBPA.KUNNR ELSE NULL END) AS BillToPartyHeader_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RE' THEN KNA1.name1 ELSE NULL END) AS BillToPartyHeaderName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RG' THEN VBPA.KUNNR ELSE NULL END) AS PayerHeader_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RG' THEN KNA1.name1 ELSE NULL END) AS PayerHeaderName_KUNNR\n\n        -- MAX(IF((VBPA.PARVW = 'AG'), VBPA.KUNNR, NULL)) AS SoldToPartyHeader_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'AG'), KNA1.name1, NULL)) AS SoldToPartyHeaderName_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'WE'), VBPA.KUNNR, NULL)) AS ShipToPartyHeader_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'WE'), KNA1.name1, NULL)) AS ShipToPartyHeaderName_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'RE'), VBPA.KUNNR, NULL)) AS BillToPartyHeader_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'RE'), KNA1.name1, NULL)) AS BillToPartyHeaderName_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'RG'), VBPA.KUNNR, NULL)) AS PayerHeader_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'RG'), KNA1.name1, NULL)) AS PayerHeaderName_KUNNR\n    FROM\n        {{ source(\"source_db\", \"vbpa\") }} AS VBPA\n    INNER JOIN {{ source(\"source_db\", \"kna1\") }} AS KNA1\n        ON\n        VBPA.mandt = KNA1.mandt\n        AND VBPA.kunnr = KNA1.kunnr\n    GROUP BY VBPA.mandt, VBPA.vbeln, VBPA.posnr\n)\n\nSELECT * FROM aggvbpaheader", "language": "sql", "refs": [], "sources": [["source_db", "kna1"], ["source_db", "vbpa"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.kna1", "source.sap_order_to_cash.source_db.vbpa"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/aggvbpaheader.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith aggvbpaheader AS (\n    SELECT VBPA.mandt, VBPA.vbeln, VBPA.posnr,\n    \n        MAX(CASE WHEN VBPA.PARVW = 'AG' THEN VBPA.KUNNR ELSE NULL END) AS SoldToPartyHeader_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'AG' THEN KNA1.name1 ELSE NULL END) AS SoldToPartyHeaderName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'WE' THEN VBPA.KUNNR ELSE NULL END) AS ShipToPartyHeader_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'WE' THEN KNA1.name1 ELSE NULL END) AS ShipToPartyHeaderName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RE' THEN VBPA.KUNNR ELSE NULL END) AS BillToPartyHeader_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RE' THEN KNA1.name1 ELSE NULL END) AS BillToPartyHeaderName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RG' THEN VBPA.KUNNR ELSE NULL END) AS PayerHeader_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RG' THEN KNA1.name1 ELSE NULL END) AS PayerHeaderName_KUNNR\n\n        -- MAX(IF((VBPA.PARVW = 'AG'), VBPA.KUNNR, NULL)) AS SoldToPartyHeader_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'AG'), KNA1.name1, NULL)) AS SoldToPartyHeaderName_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'WE'), VBPA.KUNNR, NULL)) AS ShipToPartyHeader_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'WE'), KNA1.name1, NULL)) AS ShipToPartyHeaderName_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'RE'), VBPA.KUNNR, NULL)) AS BillToPartyHeader_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'RE'), KNA1.name1, NULL)) AS BillToPartyHeaderName_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'RG'), VBPA.KUNNR, NULL)) AS PayerHeader_KUNNR,\n        -- MAX(IF((VBPA.PARVW = 'RG'), KNA1.name1, NULL)) AS PayerHeaderName_KUNNR\n    FROM\n        SSI_SAP_TO_SNOW.RAW.vbpa AS VBPA\n    INNER JOIN SSI_SAP_TO_SNOW.RAW.kna1 AS KNA1\n        ON\n        VBPA.mandt = KNA1.mandt\n        AND VBPA.kunnr = KNA1.kunnr\n    GROUP BY VBPA.mandt, VBPA.vbeln, VBPA.posnr\n)\n\nSELECT * FROM aggvbpaheader", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.aggvbpaitem": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "aggvbpaitem", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/aggvbpaitem.sql", "original_file_path": "models/views/aggvbpaitem.sql", "unique_id": "model.sap_order_to_cash.aggvbpaitem", "fqn": ["sap_order_to_cash", "views", "aggvbpaitem"], "alias": "aggvbpaitem", "checksum": {"name": "sha256", "checksum": "a83715d8c63a5b4473c18ce17f1575a498bd7c5bb79f549b3ae84970eac7a20e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/aggvbpaitem.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.9032855, "relation_name": "SSI_SAP_TO_SNOW.REPORT.aggvbpaitem", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith aggvbpaitem AS (\n    SELECT VBPA.mandt, VBPA.vbeln, VBPA.posnr,\n\n        MAX(CASE WHEN VBPA.PARVW = 'AG' THEN VBPA.KUNNR ELSE NULL END) AS SoldToPartyItem_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'AG' THEN KNA1.name1 ELSE NULL END) AS SoldToPartyItemName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'WE' THEN VBPA.KUNNR ELSE NULL END) AS ShipToPartyItem_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'WE' THEN KNA1.name1 ELSE NULL END) AS ShipToPartyItemName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RE' THEN VBPA.KUNNR ELSE NULL END) AS BillToPartyItem_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RE' THEN KNA1.name1 ELSE NULL END) AS BillToPartyItemName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RG' THEN VBPA.KUNNR ELSE NULL END) AS PayerItem_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RG' THEN KNA1.name1 ELSE NULL END) AS PayerItemName_KUNNR\n\n\n\n\n        -- MAX(IF((VBPA.PARVW = 'AG'), KNA1.name1, NULL)) AS SoldToPartyItemName_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'WE'), VBPA.KUNNR, NULL)) AS ShipToPartyItem_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'WE'), KNA1.name1, NULL)) AS ShipToPartyItemName_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'RE'), VBPA.KUNNR, NULL)) AS BillToPartyItem_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'RE'), KNA1.name1, NULL)) AS BillToPartyItemName_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'RG'), VBPA.KUNNR, NULL)) AS PayerItem_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'RG'), KNA1.name1, NULL)) AS PayerItemName_KUNNR\n    FROM\n        {{ source(\"source_db\", \"vbpa\") }} AS VBPA\n    INNER JOIN {{ source(\"source_db\", \"kna1\") }} AS KNA1\n        ON\n        VBPA.mandt = KNA1.mandt\n        AND VBPA.kunnr = KNA1.kunnr\n    GROUP BY VBPA.mandt, VBPA.vbeln, VBPA.posnr\n)\n\nSELECT * FROM aggvbpaitem\n\n\n-- CASE\n--     WHEN EXTRACT(QUARTER FROM generated_date) IN (1, 2) THEN '01'\n--     ELSE '02'", "language": "sql", "refs": [], "sources": [["source_db", "kna1"], ["source_db", "vbpa"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.kna1", "source.sap_order_to_cash.source_db.vbpa"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/aggvbpaitem.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith aggvbpaitem AS (\n    SELECT VBPA.mandt, VBPA.vbeln, VBPA.posnr,\n\n        MAX(CASE WHEN VBPA.PARVW = 'AG' THEN VBPA.KUNNR ELSE NULL END) AS SoldToPartyItem_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'AG' THEN KNA1.name1 ELSE NULL END) AS SoldToPartyItemName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'WE' THEN VBPA.KUNNR ELSE NULL END) AS ShipToPartyItem_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'WE' THEN KNA1.name1 ELSE NULL END) AS ShipToPartyItemName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RE' THEN VBPA.KUNNR ELSE NULL END) AS BillToPartyItem_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RE' THEN KNA1.name1 ELSE NULL END) AS BillToPartyItemName_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RG' THEN VBPA.KUNNR ELSE NULL END) AS PayerItem_KUNNR,\n        MAX(CASE WHEN VBPA.PARVW = 'RG' THEN KNA1.name1 ELSE NULL END) AS PayerItemName_KUNNR\n\n\n\n\n        -- MAX(IF((VBPA.PARVW = 'AG'), KNA1.name1, NULL)) AS SoldToPartyItemName_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'WE'), VBPA.KUNNR, NULL)) AS ShipToPartyItem_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'WE'), KNA1.name1, NULL)) AS ShipToPartyItemName_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'RE'), VBPA.KUNNR, NULL)) AS BillToPartyItem_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'RE'), KNA1.name1, NULL)) AS BillToPartyItemName_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'RG'), VBPA.KUNNR, NULL)) AS PayerItem_KUNNR,\n        -- MAX( IF((VBPA.PARVW = 'RG'), KNA1.name1, NULL)) AS PayerItemName_KUNNR\n    FROM\n        SSI_SAP_TO_SNOW.RAW.vbpa AS VBPA\n    INNER JOIN SSI_SAP_TO_SNOW.RAW.kna1 AS KNA1\n        ON\n        VBPA.mandt = KNA1.mandt\n        AND VBPA.kunnr = KNA1.kunnr\n    GROUP BY VBPA.mandt, VBPA.vbeln, VBPA.posnr\n)\n\nSELECT * FROM aggvbpaitem\n\n\n-- CASE\n--     WHEN EXTRACT(QUARTER FROM generated_date) IN (1, 2) THEN '01'\n--     ELSE '02'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.customersmd": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "customersmd", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/customersmd.sql", "original_file_path": "models/views/customersmd.sql", "unique_id": "model.sap_order_to_cash.customersmd", "fqn": ["sap_order_to_cash", "views", "customersmd"], "alias": "customersmd", "checksum": {"name": "sha256", "checksum": "f61c047ef79454aacc749555cfd98cbef90d98b5c28490061afcbf15f4c5268b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/customersmd.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.9063618, "relation_name": "SSI_SAP_TO_SNOW.REPORT.customersmd", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith customers AS (\n    SELECT\n        KNA1.MANDT AS Client_MANDT,\n        KNA1.KUNNR AS CustomerNumber_KUNNR,\n        KNA1.LAND1 AS CountryKey_LAND1,\n        KNA1.NAME1 AS Name1_NAME1,\n        KNA1.NAME2 AS Name2_NAME2,\n        KNA1.ORT01 AS City_ORT01,\n        COALESCE(KNA1.PSTLZ, ADRC.POST_CODE1) AS PostalCode_PSTLZ,\n        COALESCE(KNA1.REGIO, ADRC.REGION) AS CustomerRegion_REGIO,\n        KNA1.SORTL AS SortField_SORTL,\n        KNA1.STRAS AS StreetAndNumber_STRAS,\n        KNA1.TELF1 AS FirstTelephoneNumber_TELF1,\n        KNA1.TELFX AS FaxNumber_TELFX,\n        KNA1.XCPDK AS OneTimeAccount_XCPDK,\n        KNA1.ADRNR AS Address_ADRNR,\n        KNA1.MCOD1 AS MatchcodeSearch_MCOD1,\n        KNA1.MCOD2 AS MatchcodeSearch_MCOD2,\n        KNA1.MCOD3 AS MatchcodeSearch_MCOD3,\n        KNA1.ANRED AS Title_ANRED,\n        KNA1.AUFSD AS CentralOrderBlockForCustomer_AUFSD,\n        KNA1.BAHNE AS ExpressTrainStation_BAHNE,\n        KNA1.BAHNS AS TrainStation_BAHNS,\n        KNA1.BBBNR AS InternationalLocationNumber_BBBNR,\n        KNA1.BBSNR AS InternationalLocationNumber_BBSNR,\n        KNA1.BEGRU AS AuthorizationGroup_BEGRU,\n        KNA1.BRSCH AS IndustryKey_BRSCH,\n        KNA1.BUBKZ AS CheckDigitForTheInternationalLocationNumber_BUBKZ,\n        KNA1.DATLT AS DataCommunicationLineNo_DATLT,\n        KNA1.ERDAT AS DateCreated_ERDAT,\n        KNA1.ERNAM AS CreatedBy_ERNAM,\n        KNA1.EXABL AS UnloadingPointsExist_EXABL,\n        KNA1.FAKSD AS CentralBillingBlock_FAKSD,\n        KNA1.FISKN AS AccountNumberFiscalAddress_FISKN,\n        KNA1.KNAZK AS WorkingTimeCalendar_KNAZK,\n        KNA1.KNRZA AS AlternativePayer_KNRZA,\n        KNA1.KONZS AS GroupKey_KONZS,\n        KNA1.KTOKD AS CustomerAccountGroup_KTOKD,\n        KNA1.KUKLA AS CustomerClassification_KUKLA,\n        KNA1.LIFNR AS AccountNumberOfVendorOrCreditor_LIFNR,\n        KNA1.LIFSD AS CentralDeliveryBlockForTheCustomer_LIFSD,\n        KNA1.LOCCO AS CityCoordinates_LOCCO,\n        KNA1.LOEVM AS CentralDeletionFlagForMasterRecord_LOEVM,\n        KNA1.NAME3 AS Name3_NAME3,\n        KNA1.NAME4 AS Name4_NAME4,\n        KNA1.NIELS AS NielsenId_NIELS,\n        KNA1.ORT02 AS District_ORT02,\n        KNA1.PFACH AS PoBox_PFACH,\n        KNA1.PSTL2 AS POBoxPostalCode_PSTL2,\n        KNA1.COUNC AS CountyCode_COUNC,\n        KNA1.CITYC AS CityCode_CITYC,\n        KNA1.RPMKR AS RegionalMarket_RPMKR,\n        KNA1.SPERR AS CentralPostingBlock_SPERR,\n        KNA1.SPRAS AS LanguageKey_SPRAS,\n        KNA1.STCD1 AS TaxNumber1_STCD1,\n        KNA1.STCD2 AS TaxNumber2_STCD2,\n        KNA1.STKZA AS SubjectToEqualizationTax_STKZA,\n        KNA1.STKZU AS LiableForVat_STKZU,\n        KNA1.TELBX AS TeleboxNumber_TELBX,\n        KNA1.TELF2 AS SecondTelephoneNumber_TELF2,\n        KNA1.TELTX AS TeletexNumber_TELTX,\n        KNA1.TELX1 AS TelexNumber_TELX1,\n        KNA1.LZONE AS TransportationZone_LZONE,\n        KNA1.XZEMP AS AlternativePayerAllowed_XZEMP,\n        KNA1.VBUND AS CompanyIdOfTradingPartner_VBUND,\n        KNA1.STCEG AS VatRegistrationNumber_STCEG,\n        KNA1.DEAR1 AS Competitor_DEAR1,\n        KNA1.DEAR2 AS SalesPartner_DEAR2,\n        KNA1.DEAR3 AS SalesProspect_DEAR3,\n        KNA1.DEAR4 AS CustomerType4_DEAR4,\n        KNA1.DEAR5 AS IdForDefaultSoldToParty_DEAR5,\n        KNA1.GFORM AS LegalStatus_GFORM,\n        KNA1.BRAN1 AS IndustryCode1_BRAN1,\n        KNA1.BRAN2 AS IndustryCode2_BRAN2,\n        KNA1.BRAN3 AS IndustryCode3_BRAN3,\n        KNA1.BRAN4 AS IndustryCode4_BRAN4,\n        KNA1.BRAN5 AS IndustryCode5_BRAN5,\n        KNA1.EKONT AS InitialContact_EKONT,\n        KNA1.UMSAT AS AnnualSales_UMSAT,\n        KNA1.UMJAH AS YearForWhichSalesAreGiven_UMJAH,\n        KNA1.UWAER AS CurrencyOfSalesFigure_UWAER,\n        KNA1.JMZAH AS YearlyNumberOfEmployees_JMZAH,\n        KNA1.JMJAH AS YearForWhichTheNumberOfEmployeesIsGiven_JMJAH,\n        KNA1.KATR1 AS Attribute1_KATR1,\n        KNA1.KATR2 AS Attribute2_KATR2,\n        KNA1.KATR3 AS Attribute3_KATR3,\n        KNA1.KATR4 AS Attribute4_KATR4,\n        KNA1.KATR5 AS Attribute5_KATR5,\n        KNA1.KATR6 AS Attribute6_KATR6,\n        KNA1.KATR7 AS Attribute7_KATR7,\n        KNA1.KATR8 AS Attribute8_KATR8,\n        KNA1.KATR9 AS Attribute9_KATR9,\n        KNA1.KATR10 AS Attribute10_KATR10,\n        KNA1.STKZN AS NaturalPerson_STKZN,\n        KNA1.UMSA1 AS AnnualSales_UMSA1,\n        KNA1.TXJCD AS TaxJurisdiction_TXJCD,\n        KNA1.PERIV AS FiscalYearVariant_PERIV,\n        KNA1.ABRVW AS UsageIndicator_ABRVW,\n        KNA1.INSPBYDEBI AS InspectionCarriedOutByCustomer_INSPBYDEBI,\n        KNA1.INSPATDEBI AS InspectionForADeliveryNote_INSPATDEBI,\n        KNA1.KTOCD AS ReferenceAccountGroup_KTOCD,\n        KNA1.PFORT AS PoBoxCity_PFORT,\n        KNA1.WERKS AS Plant_WERKS,\n        KNA1.DTAMS AS ReportKeyForDataMediumExchange_DTAMS,\n        KNA1.DTAWS AS InstructionKeyForDataMediumExchange_DTAWS,\n        KNA1.DUEFL AS StatusOfDataTransferIntoSubsequentRelease_DUEFL,\n        KNA1.HZUOR AS AssignmentToHierarchy_HZUOR,\n        KNA1.SPERZ AS PaymentBlock_SPERZ,\n        KNA1.ETIKG AS RLabeling_CustomerplantGroup_ETIKG,\n        KNA1.CIVVE AS IdNonMilitaryUse_CIVVE,\n        KNA1.MILVE AS IdForMilitaryUse_MILVE,\n        KNA1.KDKG1 AS ConditionGroup1_KDKG1,\n        KNA1.KDKG2 AS ConditionGroup2_KDKG2,\n        KNA1.KDKG3 AS ConditionGroup3_KDKG3,\n        KNA1.KDKG4 AS ConditionGroup4_KDKG4,\n        KNA1.KDKG5 AS ConditionGroup5_KDKG5,\n        KNA1.XKNZA AS AlternativePayerUsingAccountNumber_XKNZA,\n        KNA1.FITYP AS TaxType_FITYP,\n        KNA1.STCDT AS TaxNumberType_STCDT,\n        KNA1.STCD3 AS TaxNumber3_STCD3,\n        KNA1.STCD4 AS TaxNumber4_STCD4,\n        KNA1.STCD5 AS TaxNumber5_STCD5,\n        KNA1.XICMS AS CustomerIsIcmsExempt_XICMS,\n        KNA1.XXIPI AS CustomerIsIpiExempt_XXIPI,\n        KNA1.XSUBT AS CustomerGroupForSubstituicaoTributariaCalculation_XSUBT,\n        KNA1.CFOPC AS CustomerCfopCategory_CFOPC,\n        KNA1.TXLW1 AS TaxLaw_Icms_TXLW1,\n        KNA1.TXLW2 AS TaxLaw_Ipi_TXLW2,\n        KNA1.CCC01 AS IndicatorForBiochemicalWarfare_CCC01,\n        KNA1.CCC02 AS IndicatorForNuclearNonproliferation_CCC02,\n        KNA1.CCC03 AS IndicatorForNationalSecurity_CCC03,\n        KNA1.CCC04 AS IndicatorForMissileTechnology_CCC04,\n        KNA1.CASSD AS CentralSalesBlock_CASSD,\n        KNA1.KNURL AS UniformResourceLocator_KNURL,\n        KNA1.J_1KFREPRE AS NameOfRepresentative_J_1KFREPRE,\n        KNA1.J_1KFTBUS AS TypeOfBusiness_J_1KFTBUS,\n        KNA1.J_1KFTIND AS TypeOfIndustry_J_1KFTIND,\n        KNA1.CONFS AS StatusOfChangeAuthorization_CONFS,\n        KNA1.UPDAT AS DateOnWhichTheChangesWereConfirmed_UPDAT,\n        KNA1.UPTIM AS TimeOfLastChangeConfirmation_UPTIM,\n        KNA1.NODEL AS CentralDeletionBlockForMasterRecord_NODEL,\n        KNA1.DEAR6 AS Indicator_Consumer_DEAR6,\n        KNA1.CVP_XBLCK AS BusinessPurposeCompletedFlag_CVP_XBLCK,\n        KNA1.SUFRAMA AS SuframaCode_SUFRAMA,\n        KNA1.RG AS RgNumber_RG,\n        KNA1.EXP AS IssuedBy_EXP,\n        KNA1.UF AS State_UF,\n        KNA1.RGDATE AS RgIssuingDate_RGDATE,\n        KNA1.RIC AS RicNumber_RIC,\n        KNA1.RNE AS ForeignNationalRegistration_RNE,\n        KNA1.RNEDATE AS RneIssuingDate_RNEDATE,\n        KNA1.CNAE AS Cnae_CNAE,\n        KNA1.LEGALNAT AS LegalNature_LEGALNAT,\n        KNA1.CRTN AS CrtNumber_CRTN,\n        KNA1.ICMSTAXPAY AS IcmsTaxpayer_ICMSTAXPAY,\n        KNA1.INDTYP AS IndustryMainType_INDTYP,\n        KNA1.TDT AS TaxDeclarationType_TDT,\n        KNA1.COMSIZE AS CompanySize_COMSIZE,\n        KNA1.DECREGPC AS DeclarationRegimenForPiscofins_DECREGPC,\n        KNA1.ALC AS AgencyLocationCode_ALC,\n        KNA1.PMT_OFFICE AS PaymentOffice_PMT_OFFICE,\n        KNA1.FEE_SCHEDULE AS FeeSchedule_FEE_SCHEDULE,\n        KNA1.DUNS AS DunsNumber_DUNS,\n        KNA1.DUNS4 AS Duns4_DUNS4,\n        KNA1.PSOFG AS ProcessorGroup_PSOFG,\n        KNA1.PSOIS AS SubledgerAcctPreprocessingProcedure_PSOIS,\n        KNA1.PSON1 AS Name1_PSON1,\n        KNA1.PSON2 AS Name2_PSON2,\n        KNA1.PSON3 AS Name3_PSON3,\n        KNA1.PSOVN AS FirstName_PSOVN,\n        KNA1.PSOTL AS Title_PSOTL,\n        KNA1.PSOO1 AS Description_PSOO1,\n        KNA1.PSOO2 AS Description_PSOO2,\n        KNA1.PSOO3 AS Description_PSOO3,\n        KNA1.PSOO4 AS Description_PSOO4,\n        KNA1.PSOO5 AS Description_PSOO5,\n        ADRC.DATE_FROM AS ValidFromDate_DATE_FROM,\n        ADRC.NATION AS VersionIdForInternationalAddresses_NATION,\n        ADRC.DATE_TO AS ValidToDate_DATE_TO,\n        ADRC.TITLE AS FormOfAddressKey_TITLE,\n        ADRC.NAME1 AS Addr_NAME1,\n        ADRC.NAME2 AS Addr_NAME2,\n        ADRC.NAME3 AS Addr_NAME3,\n        ADRC.NAME4 AS Addr_NAME4,\n        ADRC.CITY1 AS City_CITY1,\n        ADRC.CITY2 AS District_CITY2,\n        ADRC.CITY_CODE AS CityCodeForCitystreetFile_CITY_CODE,\n        ADRC.CITYP_CODE AS DistrictCodeForCityAndStreetFile_CITYP_CODE,\n        ADRC.HOME_CITY AS City_HOME_CITY,\n        ADRC.CITYH_CODE AS DifferentCityForCitystreetFile_CITYH_CODE,\n        ADRC.REGIOGROUP AS RegionalStructureGrouping_REGIOGROUP,\n        ADRC.POST_CODE1 AS CityPostalCode_POST_CODE1,\n        ADRC.POST_CODE2 AS PoBoxPostalCode_POST_CODE2,\n        ADRC.POST_CODE3 AS CompanyPostalCode_POST_CODE3,\n        ADRC.PO_BOX AS PoBox_PO_BOX,\n        ADRC.DONT_USE_P AS PoBoxAddressUndeliverableFlag_DONT_USE_P,\n        ADRC.PO_BOX_NUM AS Flag_PoBoxWithoutNumber_PO_BOX_NUM,\n        ADRC.PO_BOX_LOC AS PoBoxCity_PO_BOX_LOC,\n        ADRC.CITY_CODE2 AS CityPoBoxCode_CityFile_CITY_CODE2,\n        ADRC.PO_BOX_REG AS RegionForPoBox_PO_BOX_REG,\n        ADRC.PO_BOX_CTY AS PoBoxCountry_PO_BOX_CTY,\n        ADRC.TRANSPZONE AS TransportationZoneToOrFromWhichTheGoodsAreDelivered_TRANSPZONE,\n        ADRC.STREET AS Street_STREET,\n        ADRC.DONT_USE_S AS StreetAddressUndeliverableFlag_DONT_USE_S,\n        ADRC.STREETCODE AS StreetNumberForCitystreetFile_STREETCODE,\n        ADRC.HOUSE_NUM1 AS HouseNumber_HOUSE_NUM1,\n        ADRC.HOUSE_NUM2 AS HouseNumberSupplement_HOUSE_NUM2,\n        ADRC.STR_SUPPL1 AS Street2_STR_SUPPL1,\n        ADRC.STR_SUPPL2 AS Street3_STR_SUPPL2,\n        ADRC.STR_SUPPL3 AS Street4_STR_SUPPL3,\n        ADRC.LOCATION AS Street5_LOCATION,\n        ADRC.BUILDING AS Building_NumberOrCode_BUILDING,\n        ADRC.FLOOR AS FloorInBuilding_FLOOR,\n        ADRC.ROOMNUMBER AS RoomOrAppartmentNumber_ROOMNUMBER,\n        ADRC.COUNTRY AS CountryKey_COUNTRY,\n        ADRC.LANGU AS Language_LANGU,\n        ADRC.REGION AS Region__REGION,\n        ADRC.ADDR_GROUP AS AddressGroup_Key_BusinessAddressServices_ADDR_GROUP,\n        ADRC.FLAGGROUPS AS Flag_ThereAreMoreAddressGroupAssignments_FLAGGROUPS,\n        ADRC.PERS_ADDR AS Flag_ThisIsAPersonalAddress_PERS_ADDR,\n        ADRC.SORT1 AS SearchTerm1_SORT1,\n        ADRC.SORT2 AS SearchTerm2_SORT2,\n        ADRC.TEL_NUMBER AS FirstTelephoneNo_DiallingCodenumber_TEL_NUMBER,\n        ADRC.TEL_EXTENS AS FirstTelephoneNo_Extension_TEL_EXTENS,\n        ADRC.COUNTY_CODE AS CountyCodeForCounty_COUNTY_CODE,\n        ADRC.COUNTY AS County_COUNTY,\n        ADRC.TOWNSHIP_CODE AS TownshipCodeForTownship_TOWNSHIP_CODE,\n        ADRC.TOWNSHIP AS Township_TOWNSHIP,\n        ADRC.MC_COUNTY AS CountyNameInUpperCaseForSearchHelp_MC_COUNTY,\n        ADRC.MC_TOWNSHIP AS TownshipNameInUpperCaseForSearchHelp_MC_TOWNSHIP,\n        ADRC.XPCPT AS BusinessPurposeCompletedFlag_XPCPT\n    FROM\n        {{ source(\"source_db\", \"kna1\") }} AS KNA1\n    LEFT OUTER JOIN\n        {{ source(\"source_db\", \"adrc\") }} AS ADRC\n    ON\n        KNA1.ADRNR = ADRC.ADDRNUMBER\n        AND KNA1.MANDT = ADRC.CLIENT\n        AND ADRC.date_to = cast('9999-12-31' as DATE)\n    ORDER BY\n        Client_MANDT\n)\n\nSELECT * FROM customers", "language": "sql", "refs": [], "sources": [["source_db", "adrc"], ["source_db", "kna1"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.adrc", "source.sap_order_to_cash.source_db.kna1"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/customersmd.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith customers AS (\n    SELECT\n        KNA1.MANDT AS Client_MANDT,\n        KNA1.KUNNR AS CustomerNumber_KUNNR,\n        KNA1.LAND1 AS CountryKey_LAND1,\n        KNA1.NAME1 AS Name1_NAME1,\n        KNA1.NAME2 AS Name2_NAME2,\n        KNA1.ORT01 AS City_ORT01,\n        COALESCE(KNA1.PSTLZ, ADRC.POST_CODE1) AS PostalCode_PSTLZ,\n        COALESCE(KNA1.REGIO, ADRC.REGION) AS CustomerRegion_REGIO,\n        KNA1.SORTL AS SortField_SORTL,\n        KNA1.STRAS AS StreetAndNumber_STRAS,\n        KNA1.TELF1 AS FirstTelephoneNumber_TELF1,\n        KNA1.TELFX AS FaxNumber_TELFX,\n        KNA1.XCPDK AS OneTimeAccount_XCPDK,\n        KNA1.ADRNR AS Address_ADRNR,\n        KNA1.MCOD1 AS MatchcodeSearch_MCOD1,\n        KNA1.MCOD2 AS MatchcodeSearch_MCOD2,\n        KNA1.MCOD3 AS MatchcodeSearch_MCOD3,\n        KNA1.ANRED AS Title_ANRED,\n        KNA1.AUFSD AS CentralOrderBlockForCustomer_AUFSD,\n        KNA1.BAHNE AS ExpressTrainStation_BAHNE,\n        KNA1.BAHNS AS TrainStation_BAHNS,\n        KNA1.BBBNR AS InternationalLocationNumber_BBBNR,\n        KNA1.BBSNR AS InternationalLocationNumber_BBSNR,\n        KNA1.BEGRU AS AuthorizationGroup_BEGRU,\n        KNA1.BRSCH AS IndustryKey_BRSCH,\n        KNA1.BUBKZ AS CheckDigitForTheInternationalLocationNumber_BUBKZ,\n        KNA1.DATLT AS DataCommunicationLineNo_DATLT,\n        KNA1.ERDAT AS DateCreated_ERDAT,\n        KNA1.ERNAM AS CreatedBy_ERNAM,\n        KNA1.EXABL AS UnloadingPointsExist_EXABL,\n        KNA1.FAKSD AS CentralBillingBlock_FAKSD,\n        KNA1.FISKN AS AccountNumberFiscalAddress_FISKN,\n        KNA1.KNAZK AS WorkingTimeCalendar_KNAZK,\n        KNA1.KNRZA AS AlternativePayer_KNRZA,\n        KNA1.KONZS AS GroupKey_KONZS,\n        KNA1.KTOKD AS CustomerAccountGroup_KTOKD,\n        KNA1.KUKLA AS CustomerClassification_KUKLA,\n        KNA1.LIFNR AS AccountNumberOfVendorOrCreditor_LIFNR,\n        KNA1.LIFSD AS CentralDeliveryBlockForTheCustomer_LIFSD,\n        KNA1.LOCCO AS CityCoordinates_LOCCO,\n        KNA1.LOEVM AS CentralDeletionFlagForMasterRecord_LOEVM,\n        KNA1.NAME3 AS Name3_NAME3,\n        KNA1.NAME4 AS Name4_NAME4,\n        KNA1.NIELS AS NielsenId_NIELS,\n        KNA1.ORT02 AS District_ORT02,\n        KNA1.PFACH AS PoBox_PFACH,\n        KNA1.PSTL2 AS POBoxPostalCode_PSTL2,\n        KNA1.COUNC AS CountyCode_COUNC,\n        KNA1.CITYC AS CityCode_CITYC,\n        KNA1.RPMKR AS RegionalMarket_RPMKR,\n        KNA1.SPERR AS CentralPostingBlock_SPERR,\n        KNA1.SPRAS AS LanguageKey_SPRAS,\n        KNA1.STCD1 AS TaxNumber1_STCD1,\n        KNA1.STCD2 AS TaxNumber2_STCD2,\n        KNA1.STKZA AS SubjectToEqualizationTax_STKZA,\n        KNA1.STKZU AS LiableForVat_STKZU,\n        KNA1.TELBX AS TeleboxNumber_TELBX,\n        KNA1.TELF2 AS SecondTelephoneNumber_TELF2,\n        KNA1.TELTX AS TeletexNumber_TELTX,\n        KNA1.TELX1 AS TelexNumber_TELX1,\n        KNA1.LZONE AS TransportationZone_LZONE,\n        KNA1.XZEMP AS AlternativePayerAllowed_XZEMP,\n        KNA1.VBUND AS CompanyIdOfTradingPartner_VBUND,\n        KNA1.STCEG AS VatRegistrationNumber_STCEG,\n        KNA1.DEAR1 AS Competitor_DEAR1,\n        KNA1.DEAR2 AS SalesPartner_DEAR2,\n        KNA1.DEAR3 AS SalesProspect_DEAR3,\n        KNA1.DEAR4 AS CustomerType4_DEAR4,\n        KNA1.DEAR5 AS IdForDefaultSoldToParty_DEAR5,\n        KNA1.GFORM AS LegalStatus_GFORM,\n        KNA1.BRAN1 AS IndustryCode1_BRAN1,\n        KNA1.BRAN2 AS IndustryCode2_BRAN2,\n        KNA1.BRAN3 AS IndustryCode3_BRAN3,\n        KNA1.BRAN4 AS IndustryCode4_BRAN4,\n        KNA1.BRAN5 AS IndustryCode5_BRAN5,\n        KNA1.EKONT AS InitialContact_EKONT,\n        KNA1.UMSAT AS AnnualSales_UMSAT,\n        KNA1.UMJAH AS YearForWhichSalesAreGiven_UMJAH,\n        KNA1.UWAER AS CurrencyOfSalesFigure_UWAER,\n        KNA1.JMZAH AS YearlyNumberOfEmployees_JMZAH,\n        KNA1.JMJAH AS YearForWhichTheNumberOfEmployeesIsGiven_JMJAH,\n        KNA1.KATR1 AS Attribute1_KATR1,\n        KNA1.KATR2 AS Attribute2_KATR2,\n        KNA1.KATR3 AS Attribute3_KATR3,\n        KNA1.KATR4 AS Attribute4_KATR4,\n        KNA1.KATR5 AS Attribute5_KATR5,\n        KNA1.KATR6 AS Attribute6_KATR6,\n        KNA1.KATR7 AS Attribute7_KATR7,\n        KNA1.KATR8 AS Attribute8_KATR8,\n        KNA1.KATR9 AS Attribute9_KATR9,\n        KNA1.KATR10 AS Attribute10_KATR10,\n        KNA1.STKZN AS NaturalPerson_STKZN,\n        KNA1.UMSA1 AS AnnualSales_UMSA1,\n        KNA1.TXJCD AS TaxJurisdiction_TXJCD,\n        KNA1.PERIV AS FiscalYearVariant_PERIV,\n        KNA1.ABRVW AS UsageIndicator_ABRVW,\n        KNA1.INSPBYDEBI AS InspectionCarriedOutByCustomer_INSPBYDEBI,\n        KNA1.INSPATDEBI AS InspectionForADeliveryNote_INSPATDEBI,\n        KNA1.KTOCD AS ReferenceAccountGroup_KTOCD,\n        KNA1.PFORT AS PoBoxCity_PFORT,\n        KNA1.WERKS AS Plant_WERKS,\n        KNA1.DTAMS AS ReportKeyForDataMediumExchange_DTAMS,\n        KNA1.DTAWS AS InstructionKeyForDataMediumExchange_DTAWS,\n        KNA1.DUEFL AS StatusOfDataTransferIntoSubsequentRelease_DUEFL,\n        KNA1.HZUOR AS AssignmentToHierarchy_HZUOR,\n        KNA1.SPERZ AS PaymentBlock_SPERZ,\n        KNA1.ETIKG AS RLabeling_CustomerplantGroup_ETIKG,\n        KNA1.CIVVE AS IdNonMilitaryUse_CIVVE,\n        KNA1.MILVE AS IdForMilitaryUse_MILVE,\n        KNA1.KDKG1 AS ConditionGroup1_KDKG1,\n        KNA1.KDKG2 AS ConditionGroup2_KDKG2,\n        KNA1.KDKG3 AS ConditionGroup3_KDKG3,\n        KNA1.KDKG4 AS ConditionGroup4_KDKG4,\n        KNA1.KDKG5 AS ConditionGroup5_KDKG5,\n        KNA1.XKNZA AS AlternativePayerUsingAccountNumber_XKNZA,\n        KNA1.FITYP AS TaxType_FITYP,\n        KNA1.STCDT AS TaxNumberType_STCDT,\n        KNA1.STCD3 AS TaxNumber3_STCD3,\n        KNA1.STCD4 AS TaxNumber4_STCD4,\n        KNA1.STCD5 AS TaxNumber5_STCD5,\n        KNA1.XICMS AS CustomerIsIcmsExempt_XICMS,\n        KNA1.XXIPI AS CustomerIsIpiExempt_XXIPI,\n        KNA1.XSUBT AS CustomerGroupForSubstituicaoTributariaCalculation_XSUBT,\n        KNA1.CFOPC AS CustomerCfopCategory_CFOPC,\n        KNA1.TXLW1 AS TaxLaw_Icms_TXLW1,\n        KNA1.TXLW2 AS TaxLaw_Ipi_TXLW2,\n        KNA1.CCC01 AS IndicatorForBiochemicalWarfare_CCC01,\n        KNA1.CCC02 AS IndicatorForNuclearNonproliferation_CCC02,\n        KNA1.CCC03 AS IndicatorForNationalSecurity_CCC03,\n        KNA1.CCC04 AS IndicatorForMissileTechnology_CCC04,\n        KNA1.CASSD AS CentralSalesBlock_CASSD,\n        KNA1.KNURL AS UniformResourceLocator_KNURL,\n        KNA1.J_1KFREPRE AS NameOfRepresentative_J_1KFREPRE,\n        KNA1.J_1KFTBUS AS TypeOfBusiness_J_1KFTBUS,\n        KNA1.J_1KFTIND AS TypeOfIndustry_J_1KFTIND,\n        KNA1.CONFS AS StatusOfChangeAuthorization_CONFS,\n        KNA1.UPDAT AS DateOnWhichTheChangesWereConfirmed_UPDAT,\n        KNA1.UPTIM AS TimeOfLastChangeConfirmation_UPTIM,\n        KNA1.NODEL AS CentralDeletionBlockForMasterRecord_NODEL,\n        KNA1.DEAR6 AS Indicator_Consumer_DEAR6,\n        KNA1.CVP_XBLCK AS BusinessPurposeCompletedFlag_CVP_XBLCK,\n        KNA1.SUFRAMA AS SuframaCode_SUFRAMA,\n        KNA1.RG AS RgNumber_RG,\n        KNA1.EXP AS IssuedBy_EXP,\n        KNA1.UF AS State_UF,\n        KNA1.RGDATE AS RgIssuingDate_RGDATE,\n        KNA1.RIC AS RicNumber_RIC,\n        KNA1.RNE AS ForeignNationalRegistration_RNE,\n        KNA1.RNEDATE AS RneIssuingDate_RNEDATE,\n        KNA1.CNAE AS Cnae_CNAE,\n        KNA1.LEGALNAT AS LegalNature_LEGALNAT,\n        KNA1.CRTN AS CrtNumber_CRTN,\n        KNA1.ICMSTAXPAY AS IcmsTaxpayer_ICMSTAXPAY,\n        KNA1.INDTYP AS IndustryMainType_INDTYP,\n        KNA1.TDT AS TaxDeclarationType_TDT,\n        KNA1.COMSIZE AS CompanySize_COMSIZE,\n        KNA1.DECREGPC AS DeclarationRegimenForPiscofins_DECREGPC,\n        KNA1.ALC AS AgencyLocationCode_ALC,\n        KNA1.PMT_OFFICE AS PaymentOffice_PMT_OFFICE,\n        KNA1.FEE_SCHEDULE AS FeeSchedule_FEE_SCHEDULE,\n        KNA1.DUNS AS DunsNumber_DUNS,\n        KNA1.DUNS4 AS Duns4_DUNS4,\n        KNA1.PSOFG AS ProcessorGroup_PSOFG,\n        KNA1.PSOIS AS SubledgerAcctPreprocessingProcedure_PSOIS,\n        KNA1.PSON1 AS Name1_PSON1,\n        KNA1.PSON2 AS Name2_PSON2,\n        KNA1.PSON3 AS Name3_PSON3,\n        KNA1.PSOVN AS FirstName_PSOVN,\n        KNA1.PSOTL AS Title_PSOTL,\n        KNA1.PSOO1 AS Description_PSOO1,\n        KNA1.PSOO2 AS Description_PSOO2,\n        KNA1.PSOO3 AS Description_PSOO3,\n        KNA1.PSOO4 AS Description_PSOO4,\n        KNA1.PSOO5 AS Description_PSOO5,\n        ADRC.DATE_FROM AS ValidFromDate_DATE_FROM,\n        ADRC.NATION AS VersionIdForInternationalAddresses_NATION,\n        ADRC.DATE_TO AS ValidToDate_DATE_TO,\n        ADRC.TITLE AS FormOfAddressKey_TITLE,\n        ADRC.NAME1 AS Addr_NAME1,\n        ADRC.NAME2 AS Addr_NAME2,\n        ADRC.NAME3 AS Addr_NAME3,\n        ADRC.NAME4 AS Addr_NAME4,\n        ADRC.CITY1 AS City_CITY1,\n        ADRC.CITY2 AS District_CITY2,\n        ADRC.CITY_CODE AS CityCodeForCitystreetFile_CITY_CODE,\n        ADRC.CITYP_CODE AS DistrictCodeForCityAndStreetFile_CITYP_CODE,\n        ADRC.HOME_CITY AS City_HOME_CITY,\n        ADRC.CITYH_CODE AS DifferentCityForCitystreetFile_CITYH_CODE,\n        ADRC.REGIOGROUP AS RegionalStructureGrouping_REGIOGROUP,\n        ADRC.POST_CODE1 AS CityPostalCode_POST_CODE1,\n        ADRC.POST_CODE2 AS PoBoxPostalCode_POST_CODE2,\n        ADRC.POST_CODE3 AS CompanyPostalCode_POST_CODE3,\n        ADRC.PO_BOX AS PoBox_PO_BOX,\n        ADRC.DONT_USE_P AS PoBoxAddressUndeliverableFlag_DONT_USE_P,\n        ADRC.PO_BOX_NUM AS Flag_PoBoxWithoutNumber_PO_BOX_NUM,\n        ADRC.PO_BOX_LOC AS PoBoxCity_PO_BOX_LOC,\n        ADRC.CITY_CODE2 AS CityPoBoxCode_CityFile_CITY_CODE2,\n        ADRC.PO_BOX_REG AS RegionForPoBox_PO_BOX_REG,\n        ADRC.PO_BOX_CTY AS PoBoxCountry_PO_BOX_CTY,\n        ADRC.TRANSPZONE AS TransportationZoneToOrFromWhichTheGoodsAreDelivered_TRANSPZONE,\n        ADRC.STREET AS Street_STREET,\n        ADRC.DONT_USE_S AS StreetAddressUndeliverableFlag_DONT_USE_S,\n        ADRC.STREETCODE AS StreetNumberForCitystreetFile_STREETCODE,\n        ADRC.HOUSE_NUM1 AS HouseNumber_HOUSE_NUM1,\n        ADRC.HOUSE_NUM2 AS HouseNumberSupplement_HOUSE_NUM2,\n        ADRC.STR_SUPPL1 AS Street2_STR_SUPPL1,\n        ADRC.STR_SUPPL2 AS Street3_STR_SUPPL2,\n        ADRC.STR_SUPPL3 AS Street4_STR_SUPPL3,\n        ADRC.LOCATION AS Street5_LOCATION,\n        ADRC.BUILDING AS Building_NumberOrCode_BUILDING,\n        ADRC.FLOOR AS FloorInBuilding_FLOOR,\n        ADRC.ROOMNUMBER AS RoomOrAppartmentNumber_ROOMNUMBER,\n        ADRC.COUNTRY AS CountryKey_COUNTRY,\n        ADRC.LANGU AS Language_LANGU,\n        ADRC.REGION AS Region__REGION,\n        ADRC.ADDR_GROUP AS AddressGroup_Key_BusinessAddressServices_ADDR_GROUP,\n        ADRC.FLAGGROUPS AS Flag_ThereAreMoreAddressGroupAssignments_FLAGGROUPS,\n        ADRC.PERS_ADDR AS Flag_ThisIsAPersonalAddress_PERS_ADDR,\n        ADRC.SORT1 AS SearchTerm1_SORT1,\n        ADRC.SORT2 AS SearchTerm2_SORT2,\n        ADRC.TEL_NUMBER AS FirstTelephoneNo_DiallingCodenumber_TEL_NUMBER,\n        ADRC.TEL_EXTENS AS FirstTelephoneNo_Extension_TEL_EXTENS,\n        ADRC.COUNTY_CODE AS CountyCodeForCounty_COUNTY_CODE,\n        ADRC.COUNTY AS County_COUNTY,\n        ADRC.TOWNSHIP_CODE AS TownshipCodeForTownship_TOWNSHIP_CODE,\n        ADRC.TOWNSHIP AS Township_TOWNSHIP,\n        ADRC.MC_COUNTY AS CountyNameInUpperCaseForSearchHelp_MC_COUNTY,\n        ADRC.MC_TOWNSHIP AS TownshipNameInUpperCaseForSearchHelp_MC_TOWNSHIP,\n        ADRC.XPCPT AS BusinessPurposeCompletedFlag_XPCPT\n    FROM\n        SSI_SAP_TO_SNOW.RAW.kna1 AS KNA1\n    LEFT OUTER JOIN\n        SSI_SAP_TO_SNOW.RAW.adrc AS ADRC\n    ON\n        KNA1.ADRNR = ADRC.ADDRNUMBER\n        AND KNA1.MANDT = ADRC.CLIENT\n        AND ADRC.date_to = cast('9999-12-31' as DATE)\n    ORDER BY\n        Client_MANDT\n)\n\nSELECT * FROM customers", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.countriesmd": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "countriesmd", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/countriesmd.sql", "original_file_path": "models/views/countriesmd.sql", "unique_id": "model.sap_order_to_cash.countriesmd", "fqn": ["sap_order_to_cash", "views", "countriesmd"], "alias": "countriesmd", "checksum": {"name": "sha256", "checksum": "18136e0cd1007673499d2722e1b812972a4900923b60c8e3463f1e423b7390ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/countriesmd.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.9089887, "relation_name": "SSI_SAP_TO_SNOW.REPORT.countriesmd", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith countries as (\n    SELECT\n        T005.MANDT AS Client_MANDT,\n        T005.LAND1 AS CountryKey_LAND1,\n        T005T.LANDX AS CountryName_LANDX,\n        T005T.SPRAS AS Language_SPRAS,\n        T005T.NATIO AS Nationality_NATIO,\n        T005T.LANDX50 AS CountryName__max50Characters___LANDX50,\n        T005T.NATIO50 AS Nationality__max50Characters___NATIO50,\n        T005T.PRQ_SPREGT AS SuperRegionPerCountryText_PRQ_SPREGT,\n        T005.LANDK AS VehicleCountryKey_LANDK,\n        T005.LNPLZ AS PostalCodeLength_LNPLZ,\n        T005.PRPLZ AS RuleForThePostalCodeFieldCheck_PRPLZ,\n        T005.ADDRS AS FormattingRoutineKeyForPrintingAddresses_ADDRS,\n        T005.XPLZS AS Flag_StreetAddressPostalCodeRequiredEntry_XPLZS,\n        T005.XPLPF AS Flag_PoBoxPostalCodeRequired_XPLPF,\n        T005.SPRAS AS CountryLanguage_SPRAS,\n        T005.XLAND AS CountryVersionFlag_XLAND,\n        T005.XADDR AS Flag_PrintCountryNameInForeignAddresses_XADDR,\n        T005.NMFMT AS StandardNameFormat_NMFMT,\n        T005.XREGS AS Flag_CityFileAddressCheck_XREGS,\n        T005.XPLST AS FlagStreetSpecificPostalCode__cityFile___XPLST,\n        T005.INTCA AS CountryIsoCode_INTCA,\n        T005.INTCA3 AS IsoCountryCode3Char_INTCA3,\n        T005.INTCN3 AS IsoCountryCodeNumeric3Characters_INTCN3,\n        T005.XEGLD AS Indicator_EuropeanUnionMember_XEGLD,\n        T005.XSKFN AS Indicator_DiscountBaseAmountIsTheNetValue_XSKFN,\n        T005.XMWSN AS Indicator_BaseAmountForTaxIsNetOfDiscount_XMWSN,\n        T005.LNBKN AS BankAccountNumberLength_LNBKN,\n        T005.PRBKN AS RuleForCheckingBankAccountNumberField_PRBKN,\n        T005.LNBLZ AS BankNumberLength_LNBLZ,\n        T005.PRBLZ AS RuleForCheckingBankNumberField_PRBLZ,\n        T005.LNPSK AS PostOfficeBankCurrentAccountNumberLength_LNPSK,\n        T005.PRPSK AS RuleForCheckingPostalCheckAccountNumberField_PRPSK,\n        T005.XPRBK AS Indicator_UseCheckModuleForBankFields_XPRBK,\n        T005.BNKEY AS NameOfTheBankKey_BNKEY,\n        T005.LNBKS AS LengthOfBankKey_LNBKS,\n        T005.PRBKS AS RuleForCheckingBankKeyField_PRBKS,\n        T005.XPRSO AS Indicator_UseCheckModuleForTaxFieldsEtc_XPRSO,\n        T005.PRUIN AS RuleForCheckingVatRegistrationNumberField_PRUIN,\n        T005.UINLN AS VatRegistrationNumberLength_UINLN,\n        T005.LNST1 AS PermittedInputLengthForTaxNumbre1_LNST1,\n        T005.PRST1 AS RuleForCheckingTaxCode1Field_PRST1,\n        T005.LNST2 AS PermittedInputLengthForTaxNumber2_LNST2,\n        T005.PRST2 AS RuleForCheckingTaxCode2Field_PRST2,\n        T005.LNST3 AS PermittedInputLengthForTaxNumber3_LNST3,\n        T005.PRST3 AS RuleForCheckingTaxCode3Field_PRST3,\n        T005.LNST4 AS PermittedInputLengthForTaxNumber4_LNST4,\n        T005.PRST4 AS RuleForCheckingTaxCode4Field_PRST4,\n        T005.LNST5 AS PermittedInputLengthForTaxNumber5_LNST5,\n        T005.PRST5 AS RuleForCheckingTaxCode5Field_PRST5,\n        T005.LANDD AS Duevo_Nationality_LANDD,\n        T005.KALSM AS Procedure__pricing_KALSM,\n        T005.LANDA AS AlternativeCountryKey_LANDA,\n        T005.WECHF AS PaymentPeriodForBillOfExchange_WECHF,\n        T005.LKVRZ AS ShortNameForForeignTradeStatistics_LKVRZ,\n        T005.INTCN AS IntrastatCode_INTCN,\n        T005.XDEZP AS DecimalPointFormat_XDEZP,\n        T005.DATFM AS DateFormat_DATFM,\n        T005.CURIN AS CurrencyKeyOfTheIndexBasedCurrency_CURIN,\n        T005.CURHA AS CurrencyKeyOfTheHardCurrency_CURHA,\n        T005.WAERS AS CountryCurrency_WAERS,\n        T005.KURST AS ExchangeRateTypeForTranslationIntoCountryCurrency_KURST,\n        T005.AFAPL AS ChartOfDepreciatonForAssetValuation_AFAPL,\n        T005.GWGWRT AS MaximumLowValueAssetAmount_GWGWRT,\n        T005.UMRWRT AS NetBookValueForChangeoverOfDepreciationMethod_UMRWRT,\n        T005.KZRBWB AS IndicatorPostNetBookValueForRetirement_KZRBWB,\n        T005.XANZUM AS IndicatorTransferDownPaymentsFromPreviousYears_XANZUM,\n        T005.CTNCONCEPT AS WithholdingTaxCertificateNumbering_Concepts_CTNCONCEPT,\n        T005.KZSRV AS TaxesAtIndividualServiceLevel_KZSRV,\n        T005.XXINVE AS Indicator_DisplayCapitalGoodsIndicator_XXINVE,\n        T005.SUREG AS SuperRegionPerCountry_SUREG\n    FROM\n        {{ source(\"source_db\", \"t005\") }} AS T005\n    INNER JOIN\n        {{ source(\"source_db\", \"t005t\") }} AS T005T\n    ON\n        T005.MANDT = T005T.MANDT\n        AND T005.LAND1 = T005T.LAND1\n)\n\nSELECT * FROM countries", "language": "sql", "refs": [], "sources": [["source_db", "t005"], ["source_db", "t005t"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.t005", "source.sap_order_to_cash.source_db.t005t"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/countriesmd.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith countries as (\n    SELECT\n        T005.MANDT AS Client_MANDT,\n        T005.LAND1 AS CountryKey_LAND1,\n        T005T.LANDX AS CountryName_LANDX,\n        T005T.SPRAS AS Language_SPRAS,\n        T005T.NATIO AS Nationality_NATIO,\n        T005T.LANDX50 AS CountryName__max50Characters___LANDX50,\n        T005T.NATIO50 AS Nationality__max50Characters___NATIO50,\n        T005T.PRQ_SPREGT AS SuperRegionPerCountryText_PRQ_SPREGT,\n        T005.LANDK AS VehicleCountryKey_LANDK,\n        T005.LNPLZ AS PostalCodeLength_LNPLZ,\n        T005.PRPLZ AS RuleForThePostalCodeFieldCheck_PRPLZ,\n        T005.ADDRS AS FormattingRoutineKeyForPrintingAddresses_ADDRS,\n        T005.XPLZS AS Flag_StreetAddressPostalCodeRequiredEntry_XPLZS,\n        T005.XPLPF AS Flag_PoBoxPostalCodeRequired_XPLPF,\n        T005.SPRAS AS CountryLanguage_SPRAS,\n        T005.XLAND AS CountryVersionFlag_XLAND,\n        T005.XADDR AS Flag_PrintCountryNameInForeignAddresses_XADDR,\n        T005.NMFMT AS StandardNameFormat_NMFMT,\n        T005.XREGS AS Flag_CityFileAddressCheck_XREGS,\n        T005.XPLST AS FlagStreetSpecificPostalCode__cityFile___XPLST,\n        T005.INTCA AS CountryIsoCode_INTCA,\n        T005.INTCA3 AS IsoCountryCode3Char_INTCA3,\n        T005.INTCN3 AS IsoCountryCodeNumeric3Characters_INTCN3,\n        T005.XEGLD AS Indicator_EuropeanUnionMember_XEGLD,\n        T005.XSKFN AS Indicator_DiscountBaseAmountIsTheNetValue_XSKFN,\n        T005.XMWSN AS Indicator_BaseAmountForTaxIsNetOfDiscount_XMWSN,\n        T005.LNBKN AS BankAccountNumberLength_LNBKN,\n        T005.PRBKN AS RuleForCheckingBankAccountNumberField_PRBKN,\n        T005.LNBLZ AS BankNumberLength_LNBLZ,\n        T005.PRBLZ AS RuleForCheckingBankNumberField_PRBLZ,\n        T005.LNPSK AS PostOfficeBankCurrentAccountNumberLength_LNPSK,\n        T005.PRPSK AS RuleForCheckingPostalCheckAccountNumberField_PRPSK,\n        T005.XPRBK AS Indicator_UseCheckModuleForBankFields_XPRBK,\n        T005.BNKEY AS NameOfTheBankKey_BNKEY,\n        T005.LNBKS AS LengthOfBankKey_LNBKS,\n        T005.PRBKS AS RuleForCheckingBankKeyField_PRBKS,\n        T005.XPRSO AS Indicator_UseCheckModuleForTaxFieldsEtc_XPRSO,\n        T005.PRUIN AS RuleForCheckingVatRegistrationNumberField_PRUIN,\n        T005.UINLN AS VatRegistrationNumberLength_UINLN,\n        T005.LNST1 AS PermittedInputLengthForTaxNumbre1_LNST1,\n        T005.PRST1 AS RuleForCheckingTaxCode1Field_PRST1,\n        T005.LNST2 AS PermittedInputLengthForTaxNumber2_LNST2,\n        T005.PRST2 AS RuleForCheckingTaxCode2Field_PRST2,\n        T005.LNST3 AS PermittedInputLengthForTaxNumber3_LNST3,\n        T005.PRST3 AS RuleForCheckingTaxCode3Field_PRST3,\n        T005.LNST4 AS PermittedInputLengthForTaxNumber4_LNST4,\n        T005.PRST4 AS RuleForCheckingTaxCode4Field_PRST4,\n        T005.LNST5 AS PermittedInputLengthForTaxNumber5_LNST5,\n        T005.PRST5 AS RuleForCheckingTaxCode5Field_PRST5,\n        T005.LANDD AS Duevo_Nationality_LANDD,\n        T005.KALSM AS Procedure__pricing_KALSM,\n        T005.LANDA AS AlternativeCountryKey_LANDA,\n        T005.WECHF AS PaymentPeriodForBillOfExchange_WECHF,\n        T005.LKVRZ AS ShortNameForForeignTradeStatistics_LKVRZ,\n        T005.INTCN AS IntrastatCode_INTCN,\n        T005.XDEZP AS DecimalPointFormat_XDEZP,\n        T005.DATFM AS DateFormat_DATFM,\n        T005.CURIN AS CurrencyKeyOfTheIndexBasedCurrency_CURIN,\n        T005.CURHA AS CurrencyKeyOfTheHardCurrency_CURHA,\n        T005.WAERS AS CountryCurrency_WAERS,\n        T005.KURST AS ExchangeRateTypeForTranslationIntoCountryCurrency_KURST,\n        T005.AFAPL AS ChartOfDepreciatonForAssetValuation_AFAPL,\n        T005.GWGWRT AS MaximumLowValueAssetAmount_GWGWRT,\n        T005.UMRWRT AS NetBookValueForChangeoverOfDepreciationMethod_UMRWRT,\n        T005.KZRBWB AS IndicatorPostNetBookValueForRetirement_KZRBWB,\n        T005.XANZUM AS IndicatorTransferDownPaymentsFromPreviousYears_XANZUM,\n        T005.CTNCONCEPT AS WithholdingTaxCertificateNumbering_Concepts_CTNCONCEPT,\n        T005.KZSRV AS TaxesAtIndividualServiceLevel_KZSRV,\n        T005.XXINVE AS Indicator_DisplayCapitalGoodsIndicator_XXINVE,\n        T005.SUREG AS SuperRegionPerCountry_SUREG\n    FROM\n        SSI_SAP_TO_SNOW.RAW.t005 AS T005\n    INNER JOIN\n        SSI_SAP_TO_SNOW.RAW.t005t AS T005T\n    ON\n        T005.MANDT = T005T.MANDT\n        AND T005.LAND1 = T005T.LAND1\n)\n\nSELECT * FROM countries", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.divisionsmd": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "divisionsmd", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/divisionsmd.sql", "original_file_path": "models/views/divisionsmd.sql", "unique_id": "model.sap_order_to_cash.divisionsmd", "fqn": ["sap_order_to_cash", "views", "divisionsmd"], "alias": "divisionsmd", "checksum": {"name": "sha256", "checksum": "d1812490bbad022c109d45b31cecab223a4a84bad58ed258a8f8a358c62c74a7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/divisionsmd.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.911474, "relation_name": "SSI_SAP_TO_SNOW.REPORT.divisionsmd", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith divisions AS (\n    SELECT\n        TSPA.mandt AS Client_MANDT,\n        TSPA.spart AS Division_SPART,\n        TSPAT.spras AS LanguageKey_SPRAS,\n        TSPAT.vtext AS DivisionName_VTEXT\n    FROM\n        {{ source(\"source_db\", \"tspa\") }} AS TSPA\n    LEFT JOIN\n        {{ source(\"source_db\", \"tspat\") }} AS TSPAT\n    ON\n        TSPA.MANDT = TSPAT.MANDT\n        AND TSPA.SPART = TSPAT.SPART\n)\n\nSELECT * FROM divisions", "language": "sql", "refs": [], "sources": [["source_db", "tspa"], ["source_db", "tspat"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.tspa", "source.sap_order_to_cash.source_db.tspat"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/divisionsmd.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith divisions AS (\n    SELECT\n        TSPA.mandt AS Client_MANDT,\n        TSPA.spart AS Division_SPART,\n        TSPAT.spras AS LanguageKey_SPRAS,\n        TSPAT.vtext AS DivisionName_VTEXT\n    FROM\n        SSI_SAP_TO_SNOW.RAW.tspa AS TSPA\n    LEFT JOIN\n        SSI_SAP_TO_SNOW.RAW.tspat AS TSPAT\n    ON\n        TSPA.MANDT = TSPAT.MANDT\n        AND TSPA.SPART = TSPAT.SPART\n)\n\nSELECT * FROM divisions", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.distributionchannelmd": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "distributionchannelmd", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/distributionchannelmd.sql", "original_file_path": "models/views/distributionchannelmd.sql", "unique_id": "model.sap_order_to_cash.distributionchannelmd", "fqn": ["sap_order_to_cash", "views", "distributionchannelmd"], "alias": "distributionchannelmd", "checksum": {"name": "sha256", "checksum": "44f52571dfe61d9387844fd72362a9b7ba4baf1d25d83dc3f3c6b697a04a7b9f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/distributionchannelmd.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.9139247, "relation_name": "SSI_SAP_TO_SNOW.REPORT.distributionchannelmd", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith distribution_channel AS (\n    SELECT\n        TVTW.MANDT AS Client_MANDT,\n        TVTW.VTWEG AS DistributionChannel_VTWEG,\n        TVTWT.SPRAS AS Language_SPRAS,\n        TVTWT.VTEXT AS DistributionChannelName_VTEXT\n    FROM\n        {{ source(\"source_db\", \"tvtw\") }} AS TVTW\n    INNER JOIN\n        {{ source(\"source_db\", \"tvtwt\") }} AS TVTWT\n        ON\n        TVTW.MANDT = TVTWT.MANDT\n        AND TVTW.VTWEG = TVTWT.VTWEG\n)\n\nSELECT * FROM distribution_channel", "language": "sql", "refs": [], "sources": [["source_db", "tvtwt"], ["source_db", "tvtw"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.tvtwt", "source.sap_order_to_cash.source_db.tvtw"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/distributionchannelmd.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith distribution_channel AS (\n    SELECT\n        TVTW.MANDT AS Client_MANDT,\n        TVTW.VTWEG AS DistributionChannel_VTWEG,\n        TVTWT.SPRAS AS Language_SPRAS,\n        TVTWT.VTEXT AS DistributionChannelName_VTEXT\n    FROM\n        SSI_SAP_TO_SNOW.RAW.tvtw AS TVTW\n    INNER JOIN\n        SSI_SAP_TO_SNOW.RAW.tvtwt AS TVTWT\n        ON\n        TVTW.MANDT = TVTWT.MANDT\n        AND TVTW.VTWEG = TVTWT.VTWEG\n)\n\nSELECT * FROM distribution_channel", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.salesorganizationsmd": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "salesorganizationsmd", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/salesorganizationsmd.sql", "original_file_path": "models/views/salesorganizationsmd.sql", "unique_id": "model.sap_order_to_cash.salesorganizationsmd", "fqn": ["sap_order_to_cash", "views", "salesorganizationsmd"], "alias": "salesorganizationsmd", "checksum": {"name": "sha256", "checksum": "735ebcdc5fc91b228b99de729b73dc618ea5de9162a9cd9901abd9ce0a570dd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/salesorganizationsmd.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.916735, "relation_name": "SSI_SAP_TO_SNOW.REPORT.salesorganizationsmd", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith sales_organizations AS (\n  SELECT\n    TVKO.MANDT AS Client_MANDT,\n    TVKO.VKORG AS SalesOrg_VKORG,\n    TVKO.WAERS AS SalesOrgCurrency_WAERS,\n    TVKO.KUNNR AS SalesOrgCustomer_KUNNR,\n    TVKO.BUKRS AS CompanyCode_BUKRS,\n    T001.LAND1 AS Country_LAND1,\n    T001.WAERS AS CoCoCurrency_WAERS,\n    T001.PERIV AS FiscalYrVariant_PERIV,\n    T001.BUTXT AS Company_BUTXT,\n    TVKOT.VTEXT AS SalesOrgName_VTEXT,\n    TVKOT.SPRAS AS Language_SPRAS\n  FROM\n    {{ source(\"source_db\", \"tvko\") }} AS TVKO\n  LEFT OUTER JOIN\n    {{ source(\"source_db\", \"t001\") }} AS T001\n    ON\n      TVKO.MANDT = T001.MANDT\n      AND TVKO.BUKRS = T001.BUKRS\n  INNER JOIN\n    {{ source(\"source_db\", \"tvkot\") }} AS TVKOT\n    ON\n      TVKO.MANDT = TVKOT.MANDT\n      AND TVKO.VKORG = TVKOT.VKORG\n)\n\nSELECT * FROM sales_organizations", "language": "sql", "refs": [], "sources": [["source_db", "tvkot"], ["source_db", "tvko"], ["source_db", "t001"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.tvkot", "source.sap_order_to_cash.source_db.tvko", "source.sap_order_to_cash.source_db.t001"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/salesorganizationsmd.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith sales_organizations AS (\n  SELECT\n    TVKO.MANDT AS Client_MANDT,\n    TVKO.VKORG AS SalesOrg_VKORG,\n    TVKO.WAERS AS SalesOrgCurrency_WAERS,\n    TVKO.KUNNR AS SalesOrgCustomer_KUNNR,\n    TVKO.BUKRS AS CompanyCode_BUKRS,\n    T001.LAND1 AS Country_LAND1,\n    T001.WAERS AS CoCoCurrency_WAERS,\n    T001.PERIV AS FiscalYrVariant_PERIV,\n    T001.BUTXT AS Company_BUTXT,\n    TVKOT.VTEXT AS SalesOrgName_VTEXT,\n    TVKOT.SPRAS AS Language_SPRAS\n  FROM\n    SSI_SAP_TO_SNOW.RAW.tvko AS TVKO\n  LEFT OUTER JOIN\n    SSI_SAP_TO_SNOW.RAW.t001 AS T001\n    ON\n      TVKO.MANDT = T001.MANDT\n      AND TVKO.BUKRS = T001.BUKRS\n  INNER JOIN\n    SSI_SAP_TO_SNOW.RAW.tvkot AS TVKOT\n    ON\n      TVKO.MANDT = TVKOT.MANDT\n      AND TVKO.VKORG = TVKOT.VKORG\n)\n\nSELECT * FROM sales_organizations", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.deliveryblockingreasonsmd": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "deliveryblockingreasonsmd", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/deliveryblockingreasonsmd.sql", "original_file_path": "models/views/deliveryblockingreasonsmd.sql", "unique_id": "model.sap_order_to_cash.deliveryblockingreasonsmd", "fqn": ["sap_order_to_cash", "views", "deliveryblockingreasonsmd"], "alias": "deliveryblockingreasonsmd", "checksum": {"name": "sha256", "checksum": "636e7594bf00ca9a148132242287cdabc28bd9aad32ef364b8fe81d08ffd3f5d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/deliveryblockingreasonsmd.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.9189522, "relation_name": "SSI_SAP_TO_SNOW.REPORT.deliveryblockingreasonsmd", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith delivery_blocking_reasons AS (\n    SELECT\n        TVLST.MANDT AS Client_MANDT,\n        TVLST.SPRAS AS LanguageKey_SPRAS,\n        TVLST.LIFSP AS DefaultDeliveryBlock_LIFSP,\n        TVLST.VTEXT AS DeliveryBlockReason_VTEXT\n    FROM {{ source(\"source_db\", \"tvlst\") }} AS TVLST\n)\n\nSELECT * FROM delivery_blocking_reasons", "language": "sql", "refs": [], "sources": [["source_db", "tvlst"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.tvlst"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/deliveryblockingreasonsmd.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith delivery_blocking_reasons AS (\n    SELECT\n        TVLST.MANDT AS Client_MANDT,\n        TVLST.SPRAS AS LanguageKey_SPRAS,\n        TVLST.LIFSP AS DefaultDeliveryBlock_LIFSP,\n        TVLST.VTEXT AS DeliveryBlockReason_VTEXT\n    FROM SSI_SAP_TO_SNOW.RAW.tvlst AS TVLST\n)\n\nSELECT * FROM delivery_blocking_reasons", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.billingblockingreasonsmd": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "billingblockingreasonsmd", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/billingblockingreasonsmd.sql", "original_file_path": "models/views/billingblockingreasonsmd.sql", "unique_id": "model.sap_order_to_cash.billingblockingreasonsmd", "fqn": ["sap_order_to_cash", "views", "billingblockingreasonsmd"], "alias": "billingblockingreasonsmd", "checksum": {"name": "sha256", "checksum": "7d40d7baef980b75fec125732c4e812f2d81e5613f1105dd30bc3d44915c2c24"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/billingblockingreasonsmd.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.9210238, "relation_name": "SSI_SAP_TO_SNOW.REPORT.billingblockingreasonsmd", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith billing_blocking_reasons AS (\n    SELECT\n        TVFST.MANDT AS Client_MANDT,\n        TVFST.SPRAS AS LanguageKey_SPRAS,\n        TVFST.FAKSP AS Block_FAKSP,\n        TVFST.VTEXT AS BillingBlockReason_VTEXT\n    FROM {{ source(\"source_db\", \"tvfst\") }} AS TVFST\n)\n\nSELECT * FROM billing_blocking_reasons", "language": "sql", "refs": [], "sources": [["source_db", "tvfst"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.tvfst"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/billingblockingreasonsmd.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith billing_blocking_reasons AS (\n    SELECT\n        TVFST.MANDT AS Client_MANDT,\n        TVFST.SPRAS AS LanguageKey_SPRAS,\n        TVFST.FAKSP AS Block_FAKSP,\n        TVFST.VTEXT AS BillingBlockReason_VTEXT\n    FROM SSI_SAP_TO_SNOW.RAW.tvfst AS TVFST\n)\n\nSELECT * FROM billing_blocking_reasons", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.materialsmd": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "materialsmd", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/materialsmd.sql", "original_file_path": "models/views/materialsmd.sql", "unique_id": "model.sap_order_to_cash.materialsmd", "fqn": ["sap_order_to_cash", "views", "materialsmd"], "alias": "materialsmd", "checksum": {"name": "sha256", "checksum": "f6cdfbf8679eaefffb1ff690cd2fcb22c29992f354e87ac8cc7db05e303197ab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/materialsmd.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.923547, "relation_name": "SSI_SAP_TO_SNOW.REPORT.materialsmd", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith materials AS (\n    SELECT\n        MARA.MANDT AS Client_Mandt,\n        MARA.MATNR AS Materialnumber_Matnr,\n        MARA.ERSDA AS Createdon_Ersda,\n        MARA.ERNAM AS Nameofpersonwhocreatedtheobject_Ernam,\n        MARA.LAEDA AS Dateoflastchange_Laeda,\n        MARA.AENAM AS Nameofpersonwhochangedobject_Aenam,\n        MARA.VPSTA AS Maintenancestatusofcompletematerial_Vpsta,\n        MARA.PSTAT AS Maintenancestatus_Pstat,\n        MARA.LVORM AS Flagmaterialfordeletionatclientlevel_Lvorm,\n        MARA.MTART AS Materialtype_Mtart,\n        MARA.MBRSH AS Industrysector_Mbrsh,\n        MARA.MATKL AS Materialgroup_Matkl,\n        MARA.BISMT AS Oldmaterialnumber_Bismt,\n        MARA.MEINS AS Baseunitofmeasure_Meins,\n        MARA.BSTME AS Orderunit_Bstme,\n        MARA.ZEINR AS Documentnumberwithoutdocumentmanagementsystem_Zeinr,\n        MARA.ZEIAR AS Documenttypewithoutdocumentmanagementsystem_Zeiar,\n        MARA.ZEIVR AS Documentversionwithoutdocumentmanagementsystem_Zeivr,\n        MARA.ZEIFO AS Pageformatofdocumentwithoutdocumentmanagementsystem_Zeifo,\n        MARA.AESZN AS Documentchangenumberwithoutdocumentmanagementsystem_Aeszn,\n        MARA.BLATT AS Pagenumberofdocumentwithoutdocumentmanagementsystem_Blatt,\n        MARA.BLANZ AS Numberofsheetswithoutdocumentmanagementsystem_Blanz,\n        MARA.FERTH AS Productioninspectionmemo_Ferth,\n        MARA.FORMT AS Pageformatofproductionmemo_Formt,\n        MARA.GROES AS Sizedimensions_Groes,\n        MARA.WRKST AS Basicmaterial_Wrkst,\n        MARA.NORMT AS Industrystandarddescriptionsuchasansioriso_Normt,\n        MARA.LABOR AS Laboratorydesignoffice_Labor,\n        MARA.EKWSL AS Purchasingvaluekey_Ekwsl,\n        MARA.BRGEW AS Grossweight_Brgew,\n        MARA.NTGEW AS Netweight_Ntgew,\n        MARA.GEWEI AS Weightunit_Gewei,\n        MARA.VOLUM AS Volume_Volum,\n        MARA.VOLEH AS Volumeunit_Voleh,\n        MARA.BEHVO AS Containerrequirements_Behvo,\n        MARA.RAUBE AS Storageconditions_Raube,\n        MARA.TEMPB AS Temperatureconditionsindicator_Tempb,\n        MARA.DISST AS Lowlevelcode_Disst,\n        MARA.TRAGR AS Transportationgroup_Tragr,\n        MARA.STOFF AS Hazardousmaterialnumber_Stoff,\n        MARA.SPART AS Division_Spart,\n        MARA.KUNNR AS Competitor_Kunnr,\n        MARA.EANNR AS Europeanarticlenumber_Eannr,\n        MARA.WESCH AS Quantitynumberofgrgislipstobeprinted_Wesch,\n        MARA.BWVOR AS Procurementrule_Bwvor,\n        MARA.BWSCL AS Sourceofsupply_Bwscl,\n        MARA.SAISO AS Seasoncategory_Saiso,\n        MARA.ETIAR AS Labeltype_Etiar,\n        MARA.ETIFO AS Labelform_Etifo,\n        MARA.ENTAR AS Deactivated_Entar,\n        MARA.EAN11 AS Internationalarticlenumbereanupc_Ean11,\n        MARA.NUMTP AS Categoryofinternationalarticlenumberean_Numtp,\n        MARA.LAENG AS Length_Laeng,\n        MARA.BREIT AS Width_Breit,\n        MARA.HOEHE AS Height_Hoehe,\n        MARA.MEABM AS Unitofdimensionforlengthwidthheight_Meabm,\n        MARA.PRDHA AS ProductHierarchy_Prdha,\n        MARA.AEKLK AS Stocktransfernetchangecosting_Aeklk,\n        MARA.CADKZ AS Cadindicator_Cadkz,\n        MARA.QMPUR AS Qminprocurementisactive_Qmpur,\n        MARA.ERGEW AS Allowedpackagingweight_Ergew,\n        MARA.ERGEI AS Unitofweightallowedpackagingweight_Ergew,\n        MARA.ERVOL AS Allowedpackagingvolume_Ervol,\n        MARA.ERVOE AS Volumeunitallowedpackagingvolume_Ervoe,\n        MARA.GEWTO AS Excessweighttoleranceforhandlingunit_Gewto,\n        MARA.VOLTO AS Excessvolumetoleranceofthehandlingunit_Volto,\n        MARA.VABME AS Variablepurchaseorderunitactive_Vabme,\n        MARA.KZREV AS Revisionlevelhasbeenassignedtothematerial_Kzrev,\n        MARA.KZKFG AS Configurablematerial_Kzkfg,\n        MARA.XCHPF AS Batchmanagementrequirementindicator_Xchpf,\n        MARA.VHART AS Packagingmaterialtype_Vhart,\n        MARA.FUELG AS Maximumlevelbyvolume_Fuelg,\n        MARA.STFAK AS Stackingfactor_Stfak,\n        MARA.MAGRV AS Materialgrouppackagingmaterials_Magrv,\n        MARA.BEGRU AS Authorizationgroup_Begru,\n        MARA.DATAB AS Validfromdate_Datab,\n        MARA.LIQDT AS Deletiondate_Liqdt,\n        MARA.SAISJ AS Seasonyear_Saisj,\n        MARA.PLGTP AS Pricebandcategory_Plgtp,\n        MARA.MLGUT AS Emptiesbillofmaterial_Mlgut,\n        MARA.EXTWG AS Externalmaterialgroup_Extwg,\n        MARA.SATNR AS Crossplantconfigurablematerial_Satnr,\n        MARA.ATTYP AS Materialcategory_Attyp,\n        MARA.KZKUP AS Indicatormaterialcanbecoproduct_Kzkup,\n        MARA.KZNFM AS Indicatorthematerialhasafollowupmaterial_Kznfm,\n        MARA.PMATA AS Pricingreferencematerial_Pmata,\n        MARA.MSTAE AS Crossplantmaterialstatus_Mstae,\n        MARA.MSTAV AS Crossdistributionchainmaterialstatus_Mstav,\n        MARA.MSTDE AS Datefromwhichthecrossplantmaterialstatusisvalid_Mstde,\n        MARA.MSTDV AS Datefromwhichthexdistrchainmaterialstatusisvalid_Mstdv,\n        MARA.TAKLV AS Taxclassificationofthematerial_Taklv,\n        MARA.RBNRM AS Catalogprofile_Rbnrm,\n        MARA.MHDRZ AS Minimumremainingshelflife_Mhdrz,\n        MARA.MHDHB AS Totalshelflife_Mhdhb,\n        MARA.MHDLP AS Storagepercentage_Mhdlp,\n        MARA.INHME AS Contentunit_Inhme,\n        MARA.INHAL AS Netcontents_Inhal,\n        MARA.VPREH AS Comparisonpriceunit_Vpreh,\n        MARA.INHBR AS Grosscontents_Inhbr,\n        MARA.CMETH AS Quantityconversionmethod_Cmeth,\n        MARA.CUOBF AS Internalobjectnumber_Cuobf,\n        MARA.KZUMW AS Environmentallyrelevant_Kzumw,\n        MARA.KOSCH AS Productallocationdeterminationprocedure_Kosch,\n        MARA.SPROF AS Pricingprofileforvariants_Sprof,\n        MARA.NRFHG AS Materialqualifiesfordiscountinkind_Nrfhg,\n        MARA.MFRPN AS Manufacturerpartnumber_Mfrpn,\n        MARA.MFRNR AS Manufacturernumber_Mfrpn,\n        MARA.BMATN AS Numberinventorymanagedmaterial_Bmatn,\n        MARA.MPROF AS Mfrpartprofile_Mprof,\n        MARA.KZWSM AS Unitsofmeasureusage_Kzwsm,\n        MARA.SAITY AS Rolloutinaseason_Saity,\n        MARA.PROFL AS Dangerousgoodsindicatorprofile_Profl,\n        MARA.IHIVI AS Indicatorhighlyviscous_Ihivi,\n        MARA.ILOOS AS Indicatorinbulkliquid_Iloos,\n        MARA.SERLV AS Levelofexplicitnessforserialnumber_Serlv,\n        MARA.KZGVH AS Packagingmaterialisclosedpackaging_Kzgvh,\n        MARA.XGCHP AS Indicatorapprovedbatchrecordrequired_Xgchp,\n        MARA.KZEFF AS Assigneffectivityparametervaluesoverridechangenumbers_Kzeff,\n        MARA.COMPL AS Materialcompletionlevel_Compl,\n        MARA.IPRKZ AS Periodindicatorforshelflifeexpirationdate_Iprkz,\n        MARA.RDMHD AS Roundingruleforcalculationofsled_Rdmhd,\n        MARA.PRZUS AS Indicatorproductcompositionprintedonpackaging_Przus,\n        MARA.MTPOS_MARA AS Generalitemcategorygroup_Mtpos_Mara,\n        MARA.BFLME AS Genericmaterialwithlogisticalvariants_Bflme,\n        MARA.MATFI AS Materialislocked_Matfi,\n        MARA.CMREL AS Relevantforconfigurationmanagement_Cmrel,\n        MARA.BBTYP AS Assortmentlisttype_Bbtyp,\n        MARA.SLED_BBD AS Expirationdate_Sled_Bbd,\n        MARA.GTIN_VARIANT AS Globaltradeitemnumbervariant_Gtin_Variant,\n        MARA.GENNR AS Materialnumberofthegenericmaterialinprepackmaterials_Gennr,\n        MARA.RMATP AS Referencematerialformaterialspackedinsameway_Rmatp,\n        MARA.GDS_RELEVANT AS Indicatorglobaldatasynchronizationrelevant_Gds_Relevant,\n        MARA.WEORA AS Acceptanceatorigin_Weora,\n        MARA.HUTYP_DFLT AS Standardhutype_Hutyp_Dflt,\n        MARA.PILFERABLE AS Pilferable_Pilferable,\n        MARA.WHSTC AS Warehousestoragecondition_Whstc,\n        MARA.WHMATGR AS Warehousematerialgroup_Whmatgr,\n        MARA.HNDLCODE AS Handlingindicator_Hndlcode,\n        MARA.HAZMAT AS Relevantforhazardoussubstances_Hazmat,\n        MARA.HUTYP AS Handlingunittype_Hutyp,\n        MARA.TARE_VAR AS Variabletareweight_Tare_Var,\n        MARA.MAXC AS Maximumallowedcapacityofpackagingmaterial_Maxc,\n        MARA.MAXC_TOL AS Overcapacitytoleranceofthehandlingunit_Maxc_Tol,\n        MARA.MAXL AS Maximumpackinglengthofpackagingmaterial_Maxl,\n        MARA.MAXB AS Maximumpackingwidthofpackagingmaterial_Maxb,\n        MARA.MAXH AS Maximumpackingheightofpackagingmaterial_Maxh,\n        MARA.MAXDIM_UOM AS Unitofmeasureformaximumpackinglengthwidthheight_Maxdim_Uom,\n        MARA.HERKL AS Countryoforiginofmaterial_Herkl,\n        MARA.MFRGR AS Materialfreightgroup_Mfrgr,\n        MARA.QQTIME AS Quarantineperiod_Qqtime,\n        MARA.QQTIMEUOM AS Timeunitforquarantineperiod_Qqtimeuom,\n        MARA.QGRP AS Qualityinspectiongroup_Qgrp,\n        MARA.SERIAL AS Serialnumberprofile_Serial,\n        MARA.PS_SMARTFORM AS Formname_Ps_Smartform,\n        MARA.LOGUNIT AS Ewmcwlogisticsunitofmeasure_Logunit,\n        MARA.CWQREL AS Ewmcwmaterialisacatchweightmaterial_Cwqrel,\n        MARA.CWQPROC AS Ewmcwcatchweightprofileforenteringcwquantity_Cwqproc,\n        MARA.CWQTOLGR AS Ewmcatchweighttolerancegroupforewm_Cwqtolgr,\n        MARA.ADPROF AS Adjustmentprofile_Adprof,\n        MARA.IPMIPPRODUCT AS Idforanintellectualpropertycrmproduct_Ipmipproduct,\n        MARA.ALLOW_PMAT_IGNO AS Variantpriceallowedformaterialmaster_Allow_Pmat_Igno,\n        MARA.MEDIUM AS Medium_Medium,\n        MARA.COMMODITY AS Physicalcommodity_Commodity,\n        MARA.BRAND_ID AS Brand_Brand_Id,\n        MAKT.SPRAS AS Language_Spras,\n        MAKT.MAKTX AS Materialtext_Maktx\n    FROM\n       {{ source(\"source_db\", \"mara\") }} AS MARA\n    INNER JOIN\n        {{ source(\"source_db\", \"makt\") }} AS MAKT\n        ON\n        MARA.MANDT = MAKT.MANDT\n        AND MARA.MATNR = MAKT.MATNR\n)\n\nSELECT * FROM materials", "language": "sql", "refs": [], "sources": [["source_db", "mara"], ["source_db", "makt"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.mara", "source.sap_order_to_cash.source_db.makt"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/materialsmd.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith materials AS (\n    SELECT\n        MARA.MANDT AS Client_Mandt,\n        MARA.MATNR AS Materialnumber_Matnr,\n        MARA.ERSDA AS Createdon_Ersda,\n        MARA.ERNAM AS Nameofpersonwhocreatedtheobject_Ernam,\n        MARA.LAEDA AS Dateoflastchange_Laeda,\n        MARA.AENAM AS Nameofpersonwhochangedobject_Aenam,\n        MARA.VPSTA AS Maintenancestatusofcompletematerial_Vpsta,\n        MARA.PSTAT AS Maintenancestatus_Pstat,\n        MARA.LVORM AS Flagmaterialfordeletionatclientlevel_Lvorm,\n        MARA.MTART AS Materialtype_Mtart,\n        MARA.MBRSH AS Industrysector_Mbrsh,\n        MARA.MATKL AS Materialgroup_Matkl,\n        MARA.BISMT AS Oldmaterialnumber_Bismt,\n        MARA.MEINS AS Baseunitofmeasure_Meins,\n        MARA.BSTME AS Orderunit_Bstme,\n        MARA.ZEINR AS Documentnumberwithoutdocumentmanagementsystem_Zeinr,\n        MARA.ZEIAR AS Documenttypewithoutdocumentmanagementsystem_Zeiar,\n        MARA.ZEIVR AS Documentversionwithoutdocumentmanagementsystem_Zeivr,\n        MARA.ZEIFO AS Pageformatofdocumentwithoutdocumentmanagementsystem_Zeifo,\n        MARA.AESZN AS Documentchangenumberwithoutdocumentmanagementsystem_Aeszn,\n        MARA.BLATT AS Pagenumberofdocumentwithoutdocumentmanagementsystem_Blatt,\n        MARA.BLANZ AS Numberofsheetswithoutdocumentmanagementsystem_Blanz,\n        MARA.FERTH AS Productioninspectionmemo_Ferth,\n        MARA.FORMT AS Pageformatofproductionmemo_Formt,\n        MARA.GROES AS Sizedimensions_Groes,\n        MARA.WRKST AS Basicmaterial_Wrkst,\n        MARA.NORMT AS Industrystandarddescriptionsuchasansioriso_Normt,\n        MARA.LABOR AS Laboratorydesignoffice_Labor,\n        MARA.EKWSL AS Purchasingvaluekey_Ekwsl,\n        MARA.BRGEW AS Grossweight_Brgew,\n        MARA.NTGEW AS Netweight_Ntgew,\n        MARA.GEWEI AS Weightunit_Gewei,\n        MARA.VOLUM AS Volume_Volum,\n        MARA.VOLEH AS Volumeunit_Voleh,\n        MARA.BEHVO AS Containerrequirements_Behvo,\n        MARA.RAUBE AS Storageconditions_Raube,\n        MARA.TEMPB AS Temperatureconditionsindicator_Tempb,\n        MARA.DISST AS Lowlevelcode_Disst,\n        MARA.TRAGR AS Transportationgroup_Tragr,\n        MARA.STOFF AS Hazardousmaterialnumber_Stoff,\n        MARA.SPART AS Division_Spart,\n        MARA.KUNNR AS Competitor_Kunnr,\n        MARA.EANNR AS Europeanarticlenumber_Eannr,\n        MARA.WESCH AS Quantitynumberofgrgislipstobeprinted_Wesch,\n        MARA.BWVOR AS Procurementrule_Bwvor,\n        MARA.BWSCL AS Sourceofsupply_Bwscl,\n        MARA.SAISO AS Seasoncategory_Saiso,\n        MARA.ETIAR AS Labeltype_Etiar,\n        MARA.ETIFO AS Labelform_Etifo,\n        MARA.ENTAR AS Deactivated_Entar,\n        MARA.EAN11 AS Internationalarticlenumbereanupc_Ean11,\n        MARA.NUMTP AS Categoryofinternationalarticlenumberean_Numtp,\n        MARA.LAENG AS Length_Laeng,\n        MARA.BREIT AS Width_Breit,\n        MARA.HOEHE AS Height_Hoehe,\n        MARA.MEABM AS Unitofdimensionforlengthwidthheight_Meabm,\n        MARA.PRDHA AS ProductHierarchy_Prdha,\n        MARA.AEKLK AS Stocktransfernetchangecosting_Aeklk,\n        MARA.CADKZ AS Cadindicator_Cadkz,\n        MARA.QMPUR AS Qminprocurementisactive_Qmpur,\n        MARA.ERGEW AS Allowedpackagingweight_Ergew,\n        MARA.ERGEI AS Unitofweightallowedpackagingweight_Ergew,\n        MARA.ERVOL AS Allowedpackagingvolume_Ervol,\n        MARA.ERVOE AS Volumeunitallowedpackagingvolume_Ervoe,\n        MARA.GEWTO AS Excessweighttoleranceforhandlingunit_Gewto,\n        MARA.VOLTO AS Excessvolumetoleranceofthehandlingunit_Volto,\n        MARA.VABME AS Variablepurchaseorderunitactive_Vabme,\n        MARA.KZREV AS Revisionlevelhasbeenassignedtothematerial_Kzrev,\n        MARA.KZKFG AS Configurablematerial_Kzkfg,\n        MARA.XCHPF AS Batchmanagementrequirementindicator_Xchpf,\n        MARA.VHART AS Packagingmaterialtype_Vhart,\n        MARA.FUELG AS Maximumlevelbyvolume_Fuelg,\n        MARA.STFAK AS Stackingfactor_Stfak,\n        MARA.MAGRV AS Materialgrouppackagingmaterials_Magrv,\n        MARA.BEGRU AS Authorizationgroup_Begru,\n        MARA.DATAB AS Validfromdate_Datab,\n        MARA.LIQDT AS Deletiondate_Liqdt,\n        MARA.SAISJ AS Seasonyear_Saisj,\n        MARA.PLGTP AS Pricebandcategory_Plgtp,\n        MARA.MLGUT AS Emptiesbillofmaterial_Mlgut,\n        MARA.EXTWG AS Externalmaterialgroup_Extwg,\n        MARA.SATNR AS Crossplantconfigurablematerial_Satnr,\n        MARA.ATTYP AS Materialcategory_Attyp,\n        MARA.KZKUP AS Indicatormaterialcanbecoproduct_Kzkup,\n        MARA.KZNFM AS Indicatorthematerialhasafollowupmaterial_Kznfm,\n        MARA.PMATA AS Pricingreferencematerial_Pmata,\n        MARA.MSTAE AS Crossplantmaterialstatus_Mstae,\n        MARA.MSTAV AS Crossdistributionchainmaterialstatus_Mstav,\n        MARA.MSTDE AS Datefromwhichthecrossplantmaterialstatusisvalid_Mstde,\n        MARA.MSTDV AS Datefromwhichthexdistrchainmaterialstatusisvalid_Mstdv,\n        MARA.TAKLV AS Taxclassificationofthematerial_Taklv,\n        MARA.RBNRM AS Catalogprofile_Rbnrm,\n        MARA.MHDRZ AS Minimumremainingshelflife_Mhdrz,\n        MARA.MHDHB AS Totalshelflife_Mhdhb,\n        MARA.MHDLP AS Storagepercentage_Mhdlp,\n        MARA.INHME AS Contentunit_Inhme,\n        MARA.INHAL AS Netcontents_Inhal,\n        MARA.VPREH AS Comparisonpriceunit_Vpreh,\n        MARA.INHBR AS Grosscontents_Inhbr,\n        MARA.CMETH AS Quantityconversionmethod_Cmeth,\n        MARA.CUOBF AS Internalobjectnumber_Cuobf,\n        MARA.KZUMW AS Environmentallyrelevant_Kzumw,\n        MARA.KOSCH AS Productallocationdeterminationprocedure_Kosch,\n        MARA.SPROF AS Pricingprofileforvariants_Sprof,\n        MARA.NRFHG AS Materialqualifiesfordiscountinkind_Nrfhg,\n        MARA.MFRPN AS Manufacturerpartnumber_Mfrpn,\n        MARA.MFRNR AS Manufacturernumber_Mfrpn,\n        MARA.BMATN AS Numberinventorymanagedmaterial_Bmatn,\n        MARA.MPROF AS Mfrpartprofile_Mprof,\n        MARA.KZWSM AS Unitsofmeasureusage_Kzwsm,\n        MARA.SAITY AS Rolloutinaseason_Saity,\n        MARA.PROFL AS Dangerousgoodsindicatorprofile_Profl,\n        MARA.IHIVI AS Indicatorhighlyviscous_Ihivi,\n        MARA.ILOOS AS Indicatorinbulkliquid_Iloos,\n        MARA.SERLV AS Levelofexplicitnessforserialnumber_Serlv,\n        MARA.KZGVH AS Packagingmaterialisclosedpackaging_Kzgvh,\n        MARA.XGCHP AS Indicatorapprovedbatchrecordrequired_Xgchp,\n        MARA.KZEFF AS Assigneffectivityparametervaluesoverridechangenumbers_Kzeff,\n        MARA.COMPL AS Materialcompletionlevel_Compl,\n        MARA.IPRKZ AS Periodindicatorforshelflifeexpirationdate_Iprkz,\n        MARA.RDMHD AS Roundingruleforcalculationofsled_Rdmhd,\n        MARA.PRZUS AS Indicatorproductcompositionprintedonpackaging_Przus,\n        MARA.MTPOS_MARA AS Generalitemcategorygroup_Mtpos_Mara,\n        MARA.BFLME AS Genericmaterialwithlogisticalvariants_Bflme,\n        MARA.MATFI AS Materialislocked_Matfi,\n        MARA.CMREL AS Relevantforconfigurationmanagement_Cmrel,\n        MARA.BBTYP AS Assortmentlisttype_Bbtyp,\n        MARA.SLED_BBD AS Expirationdate_Sled_Bbd,\n        MARA.GTIN_VARIANT AS Globaltradeitemnumbervariant_Gtin_Variant,\n        MARA.GENNR AS Materialnumberofthegenericmaterialinprepackmaterials_Gennr,\n        MARA.RMATP AS Referencematerialformaterialspackedinsameway_Rmatp,\n        MARA.GDS_RELEVANT AS Indicatorglobaldatasynchronizationrelevant_Gds_Relevant,\n        MARA.WEORA AS Acceptanceatorigin_Weora,\n        MARA.HUTYP_DFLT AS Standardhutype_Hutyp_Dflt,\n        MARA.PILFERABLE AS Pilferable_Pilferable,\n        MARA.WHSTC AS Warehousestoragecondition_Whstc,\n        MARA.WHMATGR AS Warehousematerialgroup_Whmatgr,\n        MARA.HNDLCODE AS Handlingindicator_Hndlcode,\n        MARA.HAZMAT AS Relevantforhazardoussubstances_Hazmat,\n        MARA.HUTYP AS Handlingunittype_Hutyp,\n        MARA.TARE_VAR AS Variabletareweight_Tare_Var,\n        MARA.MAXC AS Maximumallowedcapacityofpackagingmaterial_Maxc,\n        MARA.MAXC_TOL AS Overcapacitytoleranceofthehandlingunit_Maxc_Tol,\n        MARA.MAXL AS Maximumpackinglengthofpackagingmaterial_Maxl,\n        MARA.MAXB AS Maximumpackingwidthofpackagingmaterial_Maxb,\n        MARA.MAXH AS Maximumpackingheightofpackagingmaterial_Maxh,\n        MARA.MAXDIM_UOM AS Unitofmeasureformaximumpackinglengthwidthheight_Maxdim_Uom,\n        MARA.HERKL AS Countryoforiginofmaterial_Herkl,\n        MARA.MFRGR AS Materialfreightgroup_Mfrgr,\n        MARA.QQTIME AS Quarantineperiod_Qqtime,\n        MARA.QQTIMEUOM AS Timeunitforquarantineperiod_Qqtimeuom,\n        MARA.QGRP AS Qualityinspectiongroup_Qgrp,\n        MARA.SERIAL AS Serialnumberprofile_Serial,\n        MARA.PS_SMARTFORM AS Formname_Ps_Smartform,\n        MARA.LOGUNIT AS Ewmcwlogisticsunitofmeasure_Logunit,\n        MARA.CWQREL AS Ewmcwmaterialisacatchweightmaterial_Cwqrel,\n        MARA.CWQPROC AS Ewmcwcatchweightprofileforenteringcwquantity_Cwqproc,\n        MARA.CWQTOLGR AS Ewmcatchweighttolerancegroupforewm_Cwqtolgr,\n        MARA.ADPROF AS Adjustmentprofile_Adprof,\n        MARA.IPMIPPRODUCT AS Idforanintellectualpropertycrmproduct_Ipmipproduct,\n        MARA.ALLOW_PMAT_IGNO AS Variantpriceallowedformaterialmaster_Allow_Pmat_Igno,\n        MARA.MEDIUM AS Medium_Medium,\n        MARA.COMMODITY AS Physicalcommodity_Commodity,\n        MARA.BRAND_ID AS Brand_Brand_Id,\n        MAKT.SPRAS AS Language_Spras,\n        MAKT.MAKTX AS Materialtext_Maktx\n    FROM\n       SSI_SAP_TO_SNOW.RAW.mara AS MARA\n    INNER JOIN\n        SSI_SAP_TO_SNOW.RAW.makt AS MAKT\n        ON\n        MARA.MANDT = MAKT.MANDT\n        AND MARA.MATNR = MAKT.MATNR\n)\n\nSELECT * FROM materials", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.onetouchorder": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "onetouchorder", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/onetouchorder.sql", "original_file_path": "models/views/onetouchorder.sql", "unique_id": "model.sap_order_to_cash.onetouchorder", "fqn": ["sap_order_to_cash", "views", "onetouchorder"], "alias": "onetouchorder", "checksum": {"name": "sha256", "checksum": "2a5767b5df8cd98ff737bcd1b3b76701081ce646fb081db2b6803b7e468d4b10"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/onetouchorder.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.9268565, "relation_name": "SSI_SAP_TO_SNOW.REPORT.onetouchorder", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith one_touch_order AS (\n    SELECT DISTINCT\n        OneTouchOrder.VBAPClient_MANDT,\n        OneTouchOrder.VBAPSalesDocument_VBELN,\n        OneTouchOrder.VBAPSalesDocument_Item_POSNR,\n        OneTouchOrder.VBAPTotalOrder_KWMENG,\n        vbrp.FKIMG AS ActualBilledQuantity_FKIMG,\n        OneTouchOrder.OneTouchOrderCount\n    FROM\n        (\n        SELECT\n            vbap.MANDT AS VBAPClient_MANDT,\n            vbap.VBELN AS VBAPSalesDocument_VBELN,\n            vbap.POSNR AS VBAPSalesDocument_Item_POSNR,\n            vbap.KWMENG AS VBAPTotalOrder_KWMENG,\n            vbap.NETWR AS VBAPNetValueOfTheOrderItemInDocumentCurrency_NETWR,\n            -- vbap.RECORDSTAMP AS VBAPRecordTimeStamp,\n            vbep.MANDT AS VBEPClient_MANDT,\n            vbep.VBELN AS VBEPSalesDocument_VBELN,\n            vbep.POSNR AS VBEPSalesDocumentItem_POSNR,\n            vbep.ETENR AS VBEPScheduleLineNumber_ETENR,\n            vbep.BMENG AS VBEPConfirmedQuantity_BMENG,\n            lips.MANDT AS LIPSClient_MANDT,\n            lips.VBELN AS LIPSDelivery_VBELN,\n            lips.POSNR AS LIPSDeliveryItem_POSNR,\n            lips.ERDAT AS LIPSCreationDate_ERDAT,\n            lips.AEDAT AS LIPSDateOfLastChange_AEDAT,\n            -- lips.RECORDSTAMP AS LIPSRecordTimeStamp,\n            COUNT(*) AS OneTouchOrderCount\n        FROM\n            {{ source(\"source_db\", \"vbap\") }} AS vbap,\n            {{ source(\"source_db\", \"vbep\") }} AS vbep,\n            {{ source(\"source_db\", \"lips\") }} AS lips\n        WHERE\n            vbap.mandt = vbep.mandt\n            AND vbap.vbeln = vbep.vbeln\n            AND vbap.posnr = vbep.posnr\n            AND vbap.mandt = lips.mandt\n            AND vbap.vbeln = lips.vgbel\n            AND vbap.posnr = lips.vgpos\n        GROUP BY\n            vbap.mandt,\n            vbap.vbeln,\n            vbap.posnr,\n            vbap.kwmeng,\n            vbap.netwr,\n            -- vbap.recordstamp,\n            vbep.mandt,\n            vbep.vbeln,\n            vbep.posnr,\n            vbep.etenr,\n            vbep.bmeng,\n            lips.mandt,\n            lips.vbeln,\n            lips.posnr,\n            lips.erdat,\n            lips.aedat \n            -- lips.recordstamp\n        HAVING\n            COUNT(*) < 2 ) AS OneTouchOrder\n    INNER JOIN\n        {{ source(\"source_db\", \"vbrp\") }} AS vbrp\n        ON\n        OneTouchOrder.VBAPClient_MANDT = vbrp.mandt\n        AND OneTouchOrder.VBAPSalesDocument_VBELN = vbrp.aubel\n        AND OneTouchOrder.VBAPSalesDocument_Item_POSNR = vbrp.posnr\n    WHERE\n        OneTouchOrder.VBAPTotalOrder_KWMENG = vbrp.fkimg\n)\n\nSELECT * FROM one_touch_order", "language": "sql", "refs": [], "sources": [["source_db", "vbep"], ["source_db", "lips"], ["source_db", "vbap"], ["source_db", "vbrp"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.vbep", "source.sap_order_to_cash.source_db.lips", "source.sap_order_to_cash.source_db.vbap", "source.sap_order_to_cash.source_db.vbrp"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/onetouchorder.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith one_touch_order AS (\n    SELECT DISTINCT\n        OneTouchOrder.VBAPClient_MANDT,\n        OneTouchOrder.VBAPSalesDocument_VBELN,\n        OneTouchOrder.VBAPSalesDocument_Item_POSNR,\n        OneTouchOrder.VBAPTotalOrder_KWMENG,\n        vbrp.FKIMG AS ActualBilledQuantity_FKIMG,\n        OneTouchOrder.OneTouchOrderCount\n    FROM\n        (\n        SELECT\n            vbap.MANDT AS VBAPClient_MANDT,\n            vbap.VBELN AS VBAPSalesDocument_VBELN,\n            vbap.POSNR AS VBAPSalesDocument_Item_POSNR,\n            vbap.KWMENG AS VBAPTotalOrder_KWMENG,\n            vbap.NETWR AS VBAPNetValueOfTheOrderItemInDocumentCurrency_NETWR,\n            -- vbap.RECORDSTAMP AS VBAPRecordTimeStamp,\n            vbep.MANDT AS VBEPClient_MANDT,\n            vbep.VBELN AS VBEPSalesDocument_VBELN,\n            vbep.POSNR AS VBEPSalesDocumentItem_POSNR,\n            vbep.ETENR AS VBEPScheduleLineNumber_ETENR,\n            vbep.BMENG AS VBEPConfirmedQuantity_BMENG,\n            lips.MANDT AS LIPSClient_MANDT,\n            lips.VBELN AS LIPSDelivery_VBELN,\n            lips.POSNR AS LIPSDeliveryItem_POSNR,\n            lips.ERDAT AS LIPSCreationDate_ERDAT,\n            lips.AEDAT AS LIPSDateOfLastChange_AEDAT,\n            -- lips.RECORDSTAMP AS LIPSRecordTimeStamp,\n            COUNT(*) AS OneTouchOrderCount\n        FROM\n            SSI_SAP_TO_SNOW.RAW.vbap AS vbap,\n            SSI_SAP_TO_SNOW.RAW.vbep AS vbep,\n            SSI_SAP_TO_SNOW.RAW.lips AS lips\n        WHERE\n            vbap.mandt = vbep.mandt\n            AND vbap.vbeln = vbep.vbeln\n            AND vbap.posnr = vbep.posnr\n            AND vbap.mandt = lips.mandt\n            AND vbap.vbeln = lips.vgbel\n            AND vbap.posnr = lips.vgpos\n        GROUP BY\n            vbap.mandt,\n            vbap.vbeln,\n            vbap.posnr,\n            vbap.kwmeng,\n            vbap.netwr,\n            -- vbap.recordstamp,\n            vbep.mandt,\n            vbep.vbeln,\n            vbep.posnr,\n            vbep.etenr,\n            vbep.bmeng,\n            lips.mandt,\n            lips.vbeln,\n            lips.posnr,\n            lips.erdat,\n            lips.aedat \n            -- lips.recordstamp\n        HAVING\n            COUNT(*) < 2 ) AS OneTouchOrder\n    INNER JOIN\n        SSI_SAP_TO_SNOW.RAW.vbrp AS vbrp\n        ON\n        OneTouchOrder.VBAPClient_MANDT = vbrp.mandt\n        AND OneTouchOrder.VBAPSalesDocument_VBELN = vbrp.aubel\n        AND OneTouchOrder.VBAPSalesDocument_Item_POSNR = vbrp.posnr\n    WHERE\n        OneTouchOrder.VBAPTotalOrder_KWMENG = vbrp.fkimg\n)\n\nSELECT * FROM one_touch_order", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.aggvbep": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "aggvbep", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/aggvbep.sql", "original_file_path": "models/views/aggvbep.sql", "unique_id": "model.sap_order_to_cash.aggvbep", "fqn": ["sap_order_to_cash", "views", "aggvbep"], "alias": "aggvbep", "checksum": {"name": "sha256", "checksum": "1746f7f9f1ba69ff96fe320b8fd3f6916d8dc5b78aef594efca36fdad81e6baa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/aggvbep.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720615552.9310167, "relation_name": "SSI_SAP_TO_SNOW.REPORT.aggvbep", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith aggvbep AS (\n    SELECT MANDT, VBELN, POSNR, SUM(BMENG) AS ConfirmedOrderQuantity_BMENG\n    FROM {{ source(\"source_db\", \"vbep\") }}\n    GROUP BY MANDT, VBELN, POSNR\n)\n\nSELECT * FROM aggvbep", "language": "sql", "refs": [], "sources": [["source_db", "vbep"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.vbep"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/aggvbep.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith aggvbep AS (\n    SELECT MANDT, VBELN, POSNR, SUM(BMENG) AS ConfirmedOrderQuantity_BMENG\n    FROM SSI_SAP_TO_SNOW.RAW.vbep\n    GROUP BY MANDT, VBELN, POSNR\n)\n\nSELECT * FROM aggvbep", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.salesorders": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "salesorders", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "views/salesorders.sql", "original_file_path": "models/views/salesorders.sql", "unique_id": "model.sap_order_to_cash.salesorders", "fqn": ["sap_order_to_cash", "views", "salesorders"], "alias": "salesorders", "checksum": {"name": "sha256", "checksum": "54df971580d8c769c62d2e1ce977c4033004df671799ea2c492ed83610bb3b69"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/views/salesorders.sql", "unrendered_config": {"file_format": "delta", "materialized": "view"}, "created_at": 1720616072.3406277, "relation_name": "SSI_SAP_TO_SNOW.REPORT.salesorders", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith sales_orders AS (\n    SELECT\n        VBAK.MANDT AS Client_MANDT,\n        VBAK.VBELN AS SalesDocument_VBELN,\n        VBAP.POSNR AS Item_POSNR,\n        VBAP.MATNR AS MaterialNumber_MATNR,\n        VBAP.ERDAT AS CreationDate_ERDAT,\n        VBAK.ERZET AS CreationTime_ERZET,\n        VBAK.ERNAM AS CreatedBy_ERNAM,\n        VBAK.ANGDT AS QuotationDateFrom_ANGDT,\n        VBAK.BNDDT AS QuotationDateTo_BNDDT,\n        VBAK.AUDAT AS DocumentDate_AUDAT,\n        VBAK.VBTYP AS DocumentCategory_VBTYP,\n        VBAK.TRVOG AS TransactionGroup_TRVOG,\n        VBAK.AUART AS SalesDocumentType_AUART,\n        VBAK.AUGRU AS Reason_AUGRU,\n        VBAK.GWLDT AS WarrantyDate_GWLDT,\n        VBAK.SUBMI AS CollectiveNumber_SUBMI,\n        VBAK.LIFSK AS DeliveryBlock_LIFSK,\n        VBAK.FAKSK AS BillingBlock_FAKSK,\n        VBAK.WAERK AS CurrencyHdr_WAERK,\n        VBAK.VKORG AS SalesOrganization_VKORG,\n        VBAK.VTWEG AS DistributionChannel_VTWEG,\n        VBAK.SPART AS DivisionHdr_SPART,\n        VBAK.VKGRP AS SalesGroup_VKGRP,\n        VBAK.VKBUR AS SalesOffice_VKBUR,\n        VBAK.GSBER AS BusinessAreaHdr_GSBER,\n        VBAK.GSKST AS CostCtrBusinessArea_GSKST,\n        VBAK.GUEBG AS AgreementValidFrom_GUEBG,\n        VBAK.GUEEN AS AgreementValidTo_GUEEN,\n        VBAK.KNUMV AS ConditionNumber_KNUMV,\n        VBAK.VDATU AS RequestedDeliveryDate_VDATU,\n        VBAK.VPRGR AS ProposedDateType_VPRGR,\n        VBAK.AUTLF AS CompleteDeliveryFlag_AUTLF,\n        VBAK.VBKLA AS OriginalSystem_VBKLA,\n        VBAK.VBKLT AS DocumentIndicator_VBKLT,\n        VBAK.KALSM AS PricingProcedure_KALSM,\n        VBAK.VSBED AS ShippingConditions_VSBED,\n        VBAK.FKARA AS ProposedBillingType_FKARA,\n        VBAK.AWAHR AS SalesProbability_AWAHR,\n        VBAK.KTEXT AS SearchTermForProductProposal_KTEXT,\n        VBAK.BSTNK AS CustomerPurchaseOrderNumber_BSTNK,\n        VBAK.BSARK AS CustomerPurchaseOrderType_BSARK,\n        VBAK.BSTDK AS CustomerPurchaseOrdERDATe_BSTDK,\n        VBAK.BSTZD AS PurchaseOrderNumberSupplement_BSTZD,\n        VBAK.IHREZ AS YourReference_IHREZ,\n        VBAK.BNAME AS NameOfOrderer_BNAME,\n        VBAK.TELF1 AS TelephoneNumber_TELF1,\n        VBAK.MAHZA AS NumberOfContactsFromTheCustomer_MAHZA,\n        VBAK.MAHDT AS LastCustomerContactDate_MAHDT,\n        VBAK.KUNNR AS SoldToParty_KUNNR,\n        VBAK.KOSTL AS CostCenterHdr_KOSTL,\n        VBAK.STAFO AS UpdateGroupForStatistics_STAFO,\n        VBAK.STWAE AS StatisticScurrency_STWAE,\n        VBAK.AEDAT AS ChangedOn_AEDAT,\n        VBAK.KVGR1 AS CustomerGroup1_KVGR1,\n        VBAK.KVGR2 AS CustomerGroup2_KVGR2,\n        VBAK.KVGR3 AS CustomerGroup3_KVGR3,\n        VBAK.KVGR4 AS CustomerGroup4_KVGR4,\n        VBAK.KVGR5 AS CustomerGroup5_KVGR5,\n        VBAK.KNUMA AS Agreement_KNUMA,\n        VBAK.KOKRS AS ControllingArea_KOKRS,\n        VBAK.PS_PSP_PNR AS WBSElementHdr_PS_PSP_PNR,\n        VBAK.KURST AS ExchangeRateType_KURST,\n        VBAK.KKBER AS CreditControlArea_KKBER,\n        VBAK.KNKLI AS CustomerCreditLimitRef_KNKLI,\n        VBAK.GRUPP AS CustomerCreditGroup_GRUPP,\n        VBAK.SBGRP AS CreditRepresentativeGroupForCreditManagement_SBGRP,\n        VBAK.CTLPC AS RiskCategory_CTLPC,\n        VBAK.CMWAE AS CurrencyKeyOfCreditControlArea_CMWAE,\n        VBAK.CMFRE AS ReleaseDateOfTheDocumentDeterminedByCreditManagement_CMFRE,\n        VBAK.CMNUP AS DateOfNextCreditCheckOfDocument_CMNUP,\n        VBAK.CMNGV AS NextDate_CMNGV,\n        VBAK.AMTBL AS ReleasedCreditValueOfTheDocument_AMTBL,\n        VBAK.HITYP_PR AS HierarchyTypeForPricing_HITYP_PR,\n        VBAK.ABRVW AS UsageIndicator_ABRVW,\n        VBAK.ABDIS AS MRPForDeliveryScheduleTypes_ABDIS,\n        VBAK.VGBEL AS DocumentNumberOfTheReferenceDocument_VGBEL,\n        VBAK.OBJNR AS ObjectNumberAtHeaderLevel_OBJNR,\n        VBAK.BUKRS_VF AS CompanyCodeToBeBilled_BUKRS_VF,\n        VBAK.TAXK1 AS AlternativeTaxClassification_TAXK1,\n        VBAK.TAXK2 AS TaxClassification2_TAXK2,\n        VBAK.TAXK3 AS TaxClassification3_TAXK3,\n        VBAK.TAXK4 AS TaxClassification4_TAXK4,\n        VBAK.TAXK5 AS TaxClassification5_TAXK5,\n        VBAK.TAXK6 AS TaxClassification6_TAXK6,\n        VBAK.TAXK7 AS TaxClassification7_TAXK7,\n        VBAK.TAXK8 AS TaxClassification8_TAXK8,\n        VBAK.TAXK9 AS TaxClassification9_TAXK9,\n        VBAK.XBLNR AS ReferenceDocumentNumber_XBLNR,\n        VBAK.ZUONR AS ASsignmentNumber_ZUONR,\n        VBAK.VGTYP AS PreDocCategory_VGTYP,\n        VBAK.AUFNR AS OrderNumberHdr_AUFNR,\n        VBAK.QMNUM AS NotificationNo_QMNUM,\n        VBAK.VBELN_GRP AS MasterContractNumber_VBELN_GRP,\n        VBAK.STCEG_L AS TaxDestinationCountry_STCEG_L,\n        VBAK.LANDTX AS TaxDepartureCountry_LANDTX,\n        VBAK.HANDLE AS InternationalUniqueKey_HANDLE,\n        VBAK.PROLI AS DangerousGoodsManagementProfile_PROLI,\n        VBAK.CONT_DG AS DangerousGoodsFlag_CONT_DG,\n        VBAK.UPD_TMSTMP AS UTCTimeStampL_UPD_TMSTMP,\n        -- VBAK.ABSTK AS RejectionsStatus_ABSTK,\n        -- VBAK.BESTK AS ConfirmationStatus_BESTK,\n        -- VBAK.CMGST AS OverallStatusOfCreditChecks_CMGST,\n        -- VBAK.DCSTK AS DelayStatus_DCSTK,\n        -- VBAK.FSSTK AS BillingBlockStatus_FSSTK,\n        -- VBAK.GBSTK AS OverallProcessingStatus_GBSTK,\n        -- VBAK.LFGSK AS OverallDeliveryStatus_LFGSK,\n        VBAP.MATWA AS MaterialEntered_MATWA,\n        VBAP.PMATN AS PricingReferenceMaterial_PMATN,\n        VBAP.CHARG AS BatchNumber_CHARG,\n        VBAP.MATKL AS MaterialGroup_MATKL,\n        VBAP.ARKTX AS ShortText_ARKTX,\n        VBAP.PSTYV AS ItemCategory_PSTYV,\n        VBAP.POSAR AS ItemType_POSAR,\n        VBAP.LFREL AS RelevantForDelivery_LFREL,\n        VBAP.FKREL AS RelevantForBilling_FKREL,\n        VBAP.UEPOS AS BOMItemLevel_UEPOS,\n        VBAP.GRPOS AS AlternativeForItem_GRPOS,\n        VBAP.ABGRU AS RejectionReason_ABGRU,\n        VBAP.PRODH AS ProductHierarchy_PRODH,\n        VBAP.ZWERT AS TargetValue_ZWERT,\n        VBAP.ZMENG AS TargetQuantityUoM_ZMENG,\n        VBAP.ZIEME AS TargetQuantityUoM_ZIEME,\n        VBAP.UMZIZ AS BaseTargetConversionFactor_UMZIZ,\n        VBAP.UMZIN AS ConversionFactor_UMZIN,\n        VBAP.MEINS AS BaseUnitOfMeasure_MEINS,\n        VBAP.SMENG AS ScaleQuantity_SMENG,\n        VBAP.ABLFZ AS RoundingQuantityForDelivery_ABLFZ,\n        VBAP.ABDAT AS ReconciliationDate_ABDAT,\n        VBAP.ABSFZ AS AllowedDeviation_ABSFZ,\n        VBAP.POSEX AS ItemNumberOfTheUnderlyingPurchaseOrder_POSEX,\n        VBAP.KDMAT AS CustomerMaterialNumber_KDMAT,\n        VBAP.KBVER AS AllowedDeviationPercent_KBVER,\n        VBAP.KEVER AS DaysByWhichTheQuantityCanBeShifted_KEVER,\n        VBAP.VKGRU AS RepairProcessing_VKGRU,\n        VBAP.VKAUS AS UsageIndicator_VKAUS,\n        VBAP.GRKOR AS DeliveryGroup_GRKOR,\n        VBAP.FMENG AS QuantityIsFixed_FMENG,\n        VBAP.UEBTK AS UnlimitedOverDeliveryAllowed_UEBTK,\n        VBAP.UEBTO AS OverDeliveryToleranceLimit_UEBTO,\n        VBAP.UNTTO AS UnderDeliveryToleranceLimit_UNTTO,\n        VBAP.FAKSP AS BillingBlockforitem_FAKSP,\n        VBAP.ATPKZ AS ReplacementPart_ATPKZ,\n        VBAP.RKFKF AS FormOfBillingForCO_RKFKF,\n        VBAP.SPART AS Division_SPART,\n        VBAP.GSBER AS BusinessArea_GSBER,\n        VBAP.NETWR AS NetPrice_NETWR,\n        VBAP.WAERK AS Currency_WAERK,\n        VBAP.ANTLF AS MaximumPartialDeliveries_ANTLF,\n        VBAP.KZTLF AS PartialDeliveryAtItemLevel_KZTLF,\n        VBAP.CHSPL AS BatchSplitAllowed_CHSPL,\n        VBAP.KWMENG AS CumulativeOrderQuantity_KWMENG,\n        VBAP.LSMENG AS CumulativeTargetDeliveryQty_LSMENG,\n        VBAP.KBMENG AS CumulativeConfirmedQuantity_KBMENG,\n        VBAP.KLMENG AS CumulativeConfirmedQuantityInBaseUoM_KLMENG,\n        VBAP.VRKME AS SalesUnit_VRKME,\n        VBAP.UMVKZ AS NumeratorQty_UMVKZ,\n        VBAP.UMVKN AS DenominatorQty_UMVKN,\n        VBAP.BRGEW AS GrossWeightOfItem_BRGEW,\n        VBAP.NTGEW AS NetWeightOfItem_NTGEW,\n        VBAP.GEWEI AS WeightUnit_GEWEI,\n        VBAP.VOLUM AS VolumeOfTheItem_VOLUM,\n        VBAP.VOLEH AS VolumeUnit_VOLEH,\n        VBAP.VBELV AS OriginatingDocument_VBELV,\n        VBAP.POSNV AS OriginatingItem_POSNV,\n        VBAP.VGBEL AS ReferenceDocument_VGBEL,\n        VBAP.VGPOS AS ReferenceItem_VGPOS,\n        VBAP.VOREF AS ReferenceIndicator_VOREF,\n        VBAP.UPFLU AS UpdateIndicator_UPFLU,\n        VBAP.ERLRE AS CompletionRuleForQuotation_ERLRE,\n        VBAP.LPRIO AS DeliveryPriority_LPRIO,\n        VBAP.WERKS AS Plant_WERKS,\n        VBAP.LGORT AS StorageLocation_LGORT,\n        VBAP.VSTEL AS ShippingReceivingPoint_VSTEL,\n        VBAP.ROUTE AS Route_ROUTE,\n        VBAP.STKEY AS BOMOrigin_STKEY,\n        VBAP.STDAT AS BOMDate_STDAT,\n        VBAP.STLNR AS BOM_STLNR,\n        VBAP.AWAHR AS OrderProbabilityOfTheItem_AWAHR,\n        VBAP.TAXM1 AS TaxClassification1_TAXM1,\n        VBAP.TAXM2 AS TaxClassification1_TAXM2,\n        VBAP.TAXM3 AS TaxClassification1_TAXM3,\n        VBAP.TAXM4 AS TaxClassification1_TAXM4,\n        VBAP.TAXM5 AS TaxClassification1_TAXM5,\n        VBAP.TAXM6 AS TaxClassification1_TAXM6,\n        VBAP.TAXM7 AS TaxClassification1_TAXM7,\n        VBAP.TAXM8 AS TaxClassification1_TAXM8,\n        VBAP.TAXM9 AS TaxClassification1_TAXM9,\n        VBAP.VBEAF AS FixedShippingProcessingTimeInDays_VBEAF,\n        VBAP.VBEAV AS VariableShippingProcessingTimeInDays_VBEAV,\n        VBAP.VGREF AS PrecedingDocumentHasResultedFromReference_VGREF,\n        VBAP.NETPR AS NetPrice_NETPR,\n        VBAP.KPEIN AS ConditionPricingUnit_KPEIN,\n        VBAP.KMEIN AS ConditionUnit_KMEIN,\n        VBAP.SHKZG AS ReturnsItem_SHKZG,\n        VBAP.SKTOF AS CashDiscountIndicator_SKTOF,\n        VBAP.MTVFP AS CheckingGroupForAvailabilityCheck_MTVFP,\n        VBAP.SUMBD AS SummingUpOfRequirements_SUMBD,\n        VBAP.KONDM AS MaterialPricingGroup_KONDM,\n        VBAP.KTGRM AS AccountAssignmentGroupForThisMaterial_KTGRM,\n        VBAP.BONUS AS VolumeRebateGroup_BONUS,\n        VBAP.PROVG AS CommissionGroup_PROVG,\n        VBAP.PRSOK AS PricingIsOK_PRSOK,\n        VBAP.BWTAR AS ValuationType_BWTAR,\n        VBAP.BWTEX AS SeparateValuation_BWTEX,\n        VBAP.XCHPF AS BatchManagementRequirementIndicator_XCHPF,\n        VBAP.XCHAR AS BatchManagementIndicator_XCHAR,\n        VBAP.LFMNG AS MinimumDeliveryQuantityInDeliveryNoteProcessing_LFMNG,\n        VBAP.STAFO AS UpdateGroupForStatisticsUpdate_STAFO,\n        VBAP.KZWI1 AS SubTotal1FromPricingProcedureForCondition_KZWI1,\n        VBAP.KZWI2 AS SubTotal2FromPricingProcedureForCondition_KZWI2,\n        VBAP.KZWI3 AS SubTotal3FromPricingProcedureForCondition_KZWI3,\n        VBAP.KZWI4 AS SubTotal4FromPricingProcedureForCondition_KZWI4,\n        VBAP.KZWI5 AS SubTotal5FromPricingProcedureForCondition_KZWI5,\n        VBAP.KZWI6 AS SubTotal6FromPricingProcedureForCondition_KZWI6,\n        VBAP.STCUR AS ExchangeRateForStatistics_STCUR,\n        VBAP.AEDAT AS LastChangedOn_AEDAT,\n        VBAP.EAN11 AS InternationalArticleNumber_EAN11,\n        VBAP.FIXMG AS DeliveryDateAndQuantityFixed_FIXMG,\n        VBAP.PRCTR AS ProfitCenter_PRCTR,\n        VBAP.MVGR1 AS MaterialGroup1_MVGR1,\n        VBAP.MVGR2 AS MaterialGroup2_MVGR2,\n        VBAP.MVGR3 AS MaterialGroup3_MVGR3,\n        VBAP.MVGR4 AS MaterialGroup4_MVGR4,\n        VBAP.MVGR5 AS MaterialGroup5_MVGR5,\n        VBAP.KMPMG AS ComponentQuantity_KMPMG,\n        VBAP.SUGRD AS ReasonForMaterialSubstitution_SUGRD,\n        VBAP.SOBKZ AS SpecialStockIndicator_SOBKZ,\n        VBAP.VPZUO AS AllocationIndicator_VPZUO,\n        VBAP.PAOBJNR AS ProfitabilitySegmentNumber_PAOBJNR,\n        VBAP.PS_PSP_PNR AS WBSElement_PS_PSP_PNR,\n        VBAP.AUFNR AS OrderNumber_AUFNR,\n        VBAP.VPMAT AS PlanningMaterial_VPMAT,\n        VBAP.VPWRK AS PlanningPlant_VPWRK,\n        VBAP.PRBME AS BaseUnitOfMeasureForProductGroup_PRBME,\n        VBAP.UMREF AS ConversionFactorQuantities_UMREF,\n        VBAP.KNTTP AS AccountAssignmentCategory_KNTTP,\n        VBAP.KZVBR AS ConsumptionPosting_KZVBR,\n        VBAP.SERNR AS BOMExplosionNumber_SERNR,\n        VBAP.OBJNR AS ObjectNumberAtItemLevel_OBJNR,\n        VBAP.ABGRS AS ResultsAnalysisKey_ABGRS,\n        VBAP.BEDAE AS RequirementsType_BEDAE,\n        VBAP.CMPRE AS ItemCreditPrice_CMPRE,\n        VBAP.CMTFG AS CreditBlock_CMTFG,\n        VBAP.CMPNT AS RelevantForCredit_CMPNT,\n        VBAP.CUOBJ AS Configuration_CUOBJ,\n        VBAP.CUOBJ_CH AS InternalObjectNumberOfTheBatchClassification_CUOBJ_CH,\n        VBAP.CEPOK AS StatusExpectedPrice_CEPOK,\n        VBAP.KOUPD AS ConditionUpdate_KOUPD,\n        VBAP.SERAIL AS SerialNumberProfile_SERAIL,\n        VBAP.ANZSN AS NumberOfSerialNumbers_ANZSN,\n        VBAP.NACHL AS CustomerHasNotPostedGoodsReceipt_NACHL,\n        VBAP.MAGRV AS PackagingMaterials_MAGRV,\n        VBAP.MPROK AS StatusManualPriceChange_MPROK,\n        VBAP.VGTYP AS PrecedingDocCategory_VGTYP,\n        VBAP.KALNR AS CostEstimateNumber_KALNR,\n        VBAP.KLVAR AS CostingVariant_KLVAR,\n        VBAP.SPOSN AS BOMItemNumber_SPOSN,\n        VBAP.KOWRR AS StatisticalValues_KOWRR,\n        VBAP.STADAT AS StatisticsDate_STADAT,\n        VBAP.EXART AS BusinessTransactionTypeForForeignTrade_EXART,\n        VBAP.PREFE AS ImportExportFlag_PREFE,\n        VBAP.KNUMH AS NumberOfConditionRecord_KNUMH,\n        VBAP.CLINT AS InternalClassNumber_CLINT,\n        VBAP.STLTY AS BOMCategory_STLTY,\n        VBAP.STLKN AS BOMItemNodeNumber_STLKN,\n        VBAP.STPOZ AS InternalCounter_STPOZ,\n        VBAP.STMAN AS InconsistentConfiguration_STMAN,\n        VBAP.ZSCHL_K AS OverHeadKey_ZSCHL_K,\n        VBAP.KALSM_K AS CostingSheet_KALSM_K,\n        VBAP.KALVAR AS CostingVariant_KALVAR,\n        VBAP.KOSCH AS ProductAllocation_KOSCH,\n        VBAP.UPMAT AS PricingReferenceMaterial_UPMAT,\n        VBAP.UKONM AS MaterialPricingGroup_UKONM,\n        VBAP.MFRGR AS MaterialFreightGroup_MFRGR,\n        VBAP.PLAVO AS PlanningReleASeRegulation_PLAVO,\n        VBAP.KANNR AS KANBAN_KANNR,\n        VBAP.CMPRE_FLT AS ItemCreditPrice_CMPRE_FLT,\n        VBAP.ABFOR AS FormOfPaymentGuarantee_ABFOR,\n        VBAP.ABGES AS GuaranteedFactor_ABGES,\n        VBAP.WKTNR AS ValueContractNo_WKTNR,\n        VBAP.WKTPS AS ValueContractItem_WKTPS,\n        VBAP.SKOPF AS AssortmentModule_SKOPF,\n        VBAP.KZBWS AS ValuationofSpecialStock_KZBWS,\n        VBAP.WGRU1 AS MaterialGroupHierarchy1_WGRU1,\n        VBAP.WGRU2 AS MaterialGroupHierarchy2_WGRU2,\n        VBAP.KNUMA_PI AS Promotion_KNUMA_PI,\n        VBAP.KNUMA_AG AS SalesDeal_KNUMA_AG,\n        VBAP.KZFME AS LeadingUoM_KZFME,\n        VBAP.LSTANR AS FreeGoodsDeliveryControl_LSTANR,\n        VBAP.TECHS AS ParameterVariant_TECHS,\n        VBAP.BERID AS MRPArea_BERID,\n        VBAP.PCTRF AS ProfitCenterForBilling_PCTRF,\n        VBAP.STOCKLOC AS ManagingLocation_STOCKLOC,\n        VBAP.SLOCTYPE AS TypeOfFirstInventory_SLOCTYPE,\n        VBAP.MSR_RET_REASON AS ReturnReason_MSR_RET_REASON,\n        VBAP.MSR_REFUND_CODE AS ReturnsRefundCode_MSR_REFUND_CODE,\n        VBAP.MSR_APPROV_BLOCK AS ApprovalBlock_MSR_APPROV_BLOCK,\n        VBAP.NRAB_KNUMH AS ConditionRecordNumber_NRAB_KNUMH,\n        VBAP.TRMRISK_RELEVANT AS RiskRelevancyInSales_TRMRISK_RELEVANT,\n        VBAP.HANDOVERLOC AS LocationForAPhysicalHandOverOfGoods_HANDOVERLOC,\n        VBAP.HANDOVERDATE AS HandOverDateAtTheHandOverLocation_HANDOVERDATE,\n        VBAP.HANDOVERTIME AS HandOverTimeAtTheHandOverLocation_HANDOVERTIME,\n        VBAP.TC_AUT_DET AS TaxCodeAutomaticallyDetermined_TC_AUT_DET,\n        VBAP.MANUAL_TC_REASON AS ManualTaxCodeReason_MANUAL_TC_REASON,\n        VBAP.FISCAL_INCENTIVE AS TaxIncentiveType_FISCAL_INCENTIVE,\n        VBAP.FISCAL_INCENTIVE_ID AS IncentiveID_FISCAL_INCENTIVE_ID,\n        VBAP.SPCSTO AS NotAFiscalSpecialCaseForCFOPDetermination_SPCSTO,\n        VBAP.KOSTL AS CostCenter_KOSTL,\n        VBAP.FONDS AS Fund_FONDS,\n        VBAP.FISTL AS FundsCenter_FISTL,\n        VBAP.FKBER AS FunctionalArea_FKBER,\n        AGGVBPAITEM.SoldToPartyItem_KUNNR,\n        AGGVBPAITEM.SoldToPartyItemName_KUNNR,\n        AGGVBPAITEM.ShipToPartyItem_KUNNR,\n        AGGVBPAITEM.ShipToPartyItemName_KUNNR,\n        AGGVBPAITEM.BillToPartyItem_KUNNR,\n        AGGVBPAITEM.BillToPartyItemName_KUNNR,\n        AGGVBPAITEM.PayerItem_KUNNR,\n        AGGVBPAITEM.PayerItemName_KUNNR,\n        AGGVBPAHEADER.SoldToPartyHeader_KUNNR,\n        AGGVBPAHEADER.SoldToPartyHeaderName_KUNNR,\n        AGGVBPAHEADER.ShipToPartyHeader_KUNNR,\n        AGGVBPAHEADER.ShipToPartyHeaderName_KUNNR,\n        AGGVBPAHEADER.BillToPartyHeader_KUNNR,\n        AGGVBPAHEADER.BillToPartyHeaderName_KUNNR,\n        AGGVBPAHEADER.PayerHeader_KUNNR,\n        AGGVBPAHEADER.PayerHeaderName_KUNNR,\n\n        AGGVBEP.ConfirmedOrderQuantity_BMENG,\n        COALESCE(VBAK.NETWR * tcurx_VBAK.CURRFIX, VBAK.NETWR) AS NetValueOfTheSalesOrderInDocumentCurrency_NETWR,\n        COALESCE(VBAP.WAVWR * tcurx_VBAP.CURRFIX, VBAP.WAVWR) AS CostInDocumentCurrency_WAVWR,\n        COALESCE(VBAP.MWSBP * tcurx_VBAP.CURRFIX, VBAP.MWSBP) AS TaxAmountInDocumentCurrency_MWSBP,\n        EXTRACT(YEAR FROM VBAK.ERDAT) AS YearOfSalesOrderCreationDate_ERDAT,\n        EXTRACT(MONTH FROM VBAK.ERDAT) AS MonthOfSalesOrderCreationDate_ERDAT,\n        EXTRACT(WEEK FROM VBAK.ERDAT) AS WeekOfSalesOrderCreationDate_ERDAT,\n        EXTRACT(DAY FROM VBAK.ERDAT) AS DayOfSalesOrderCreationDate_ERDAT,\n        (VBAP.NETPR * VBAP.KWMENG) AS SalesOrderValueLineItem\n    FROM\n    {{ source(\"source_db\", \"vbak\") }} AS VBAK\n    INNER JOIN {{ source(\"source_db\", \"vbap\") }} AS VBAP\n        ON\n        VBAK.VBELN = VBAP.VBELN\n        AND VBAK.MANDT = VBAP.MANDT\n    LEFT OUTER JOIN {{ ref(\"aggvbep\") }}\n        ON\n        VBAP.VBELN = AGGVBEP.VBELN\n        AND VBAP.POSNR = AGGVBEP.POSNR\n        AND VBAP.MANDT = AGGVBEP.MANDT\n    LEFT OUTER JOIN {{ ref(\"aggvbpaitem\") }}\n        ON\n        VBAP.MANDT = AGGVBPAITEM.MANDT\n        AND VBAP.VBELN = AGGVBPAITEM.VBELN\n        AND VBAP.POSNR = AGGVBPAITEM.POSNR\n    LEFT OUTER JOIN {{ ref(\"aggvbpaheader\") }}\n        ON\n        VBAP.MANDT = AGGVBPAHEADER.MANDT\n        AND VBAP.VBELN = AGGVBPAHEADER.VBELN\n        AND (AGGVBPAHEADER.POSNR IS NULL OR AGGVBPAHEADER.POSNR = '000000')\n\n    LEFT JOIN {{ ref(\"tcurxview\") }} AS tcurx_VBAK\n        ON\n        VBAK.WAERK = tcurx_VBAK.CURRKEY\n    LEFT JOIN {{ ref(\"tcurxview\") }} AS tcurx_VBAP\n        ON\n        VBAP.WAERK = tcurx_VBAP.CURRKEY\n)\n\nSELECT * FROM sales_orders", "language": "sql", "refs": [{"name": "aggvbep", "package": null, "version": null}, {"name": "aggvbpaitem", "package": null, "version": null}, {"name": "aggvbpaheader", "package": null, "version": null}, {"name": "tcurxview", "package": null, "version": null}, {"name": "tcurxview", "package": null, "version": null}], "sources": [["source_db", "vbap"], ["source_db", "vbak"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_order_to_cash.source_db.vbap", "source.sap_order_to_cash.source_db.vbak", "model.sap_order_to_cash.aggvbep", "model.sap_order_to_cash.aggvbpaitem", "model.sap_order_to_cash.aggvbpaheader", "model.sap_order_to_cash.tcurxview"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/views/salesorders.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith sales_orders AS (\n    SELECT\n        VBAK.MANDT AS Client_MANDT,\n        VBAK.VBELN AS SalesDocument_VBELN,\n        VBAP.POSNR AS Item_POSNR,\n        VBAP.MATNR AS MaterialNumber_MATNR,\n        VBAP.ERDAT AS CreationDate_ERDAT,\n        VBAK.ERZET AS CreationTime_ERZET,\n        VBAK.ERNAM AS CreatedBy_ERNAM,\n        VBAK.ANGDT AS QuotationDateFrom_ANGDT,\n        VBAK.BNDDT AS QuotationDateTo_BNDDT,\n        VBAK.AUDAT AS DocumentDate_AUDAT,\n        VBAK.VBTYP AS DocumentCategory_VBTYP,\n        VBAK.TRVOG AS TransactionGroup_TRVOG,\n        VBAK.AUART AS SalesDocumentType_AUART,\n        VBAK.AUGRU AS Reason_AUGRU,\n        VBAK.GWLDT AS WarrantyDate_GWLDT,\n        VBAK.SUBMI AS CollectiveNumber_SUBMI,\n        VBAK.LIFSK AS DeliveryBlock_LIFSK,\n        VBAK.FAKSK AS BillingBlock_FAKSK,\n        VBAK.WAERK AS CurrencyHdr_WAERK,\n        VBAK.VKORG AS SalesOrganization_VKORG,\n        VBAK.VTWEG AS DistributionChannel_VTWEG,\n        VBAK.SPART AS DivisionHdr_SPART,\n        VBAK.VKGRP AS SalesGroup_VKGRP,\n        VBAK.VKBUR AS SalesOffice_VKBUR,\n        VBAK.GSBER AS BusinessAreaHdr_GSBER,\n        VBAK.GSKST AS CostCtrBusinessArea_GSKST,\n        VBAK.GUEBG AS AgreementValidFrom_GUEBG,\n        VBAK.GUEEN AS AgreementValidTo_GUEEN,\n        VBAK.KNUMV AS ConditionNumber_KNUMV,\n        VBAK.VDATU AS RequestedDeliveryDate_VDATU,\n        VBAK.VPRGR AS ProposedDateType_VPRGR,\n        VBAK.AUTLF AS CompleteDeliveryFlag_AUTLF,\n        VBAK.VBKLA AS OriginalSystem_VBKLA,\n        VBAK.VBKLT AS DocumentIndicator_VBKLT,\n        VBAK.KALSM AS PricingProcedure_KALSM,\n        VBAK.VSBED AS ShippingConditions_VSBED,\n        VBAK.FKARA AS ProposedBillingType_FKARA,\n        VBAK.AWAHR AS SalesProbability_AWAHR,\n        VBAK.KTEXT AS SearchTermForProductProposal_KTEXT,\n        VBAK.BSTNK AS CustomerPurchaseOrderNumber_BSTNK,\n        VBAK.BSARK AS CustomerPurchaseOrderType_BSARK,\n        VBAK.BSTDK AS CustomerPurchaseOrdERDATe_BSTDK,\n        VBAK.BSTZD AS PurchaseOrderNumberSupplement_BSTZD,\n        VBAK.IHREZ AS YourReference_IHREZ,\n        VBAK.BNAME AS NameOfOrderer_BNAME,\n        VBAK.TELF1 AS TelephoneNumber_TELF1,\n        VBAK.MAHZA AS NumberOfContactsFromTheCustomer_MAHZA,\n        VBAK.MAHDT AS LastCustomerContactDate_MAHDT,\n        VBAK.KUNNR AS SoldToParty_KUNNR,\n        VBAK.KOSTL AS CostCenterHdr_KOSTL,\n        VBAK.STAFO AS UpdateGroupForStatistics_STAFO,\n        VBAK.STWAE AS StatisticScurrency_STWAE,\n        VBAK.AEDAT AS ChangedOn_AEDAT,\n        VBAK.KVGR1 AS CustomerGroup1_KVGR1,\n        VBAK.KVGR2 AS CustomerGroup2_KVGR2,\n        VBAK.KVGR3 AS CustomerGroup3_KVGR3,\n        VBAK.KVGR4 AS CustomerGroup4_KVGR4,\n        VBAK.KVGR5 AS CustomerGroup5_KVGR5,\n        VBAK.KNUMA AS Agreement_KNUMA,\n        VBAK.KOKRS AS ControllingArea_KOKRS,\n        VBAK.PS_PSP_PNR AS WBSElementHdr_PS_PSP_PNR,\n        VBAK.KURST AS ExchangeRateType_KURST,\n        VBAK.KKBER AS CreditControlArea_KKBER,\n        VBAK.KNKLI AS CustomerCreditLimitRef_KNKLI,\n        VBAK.GRUPP AS CustomerCreditGroup_GRUPP,\n        VBAK.SBGRP AS CreditRepresentativeGroupForCreditManagement_SBGRP,\n        VBAK.CTLPC AS RiskCategory_CTLPC,\n        VBAK.CMWAE AS CurrencyKeyOfCreditControlArea_CMWAE,\n        VBAK.CMFRE AS ReleaseDateOfTheDocumentDeterminedByCreditManagement_CMFRE,\n        VBAK.CMNUP AS DateOfNextCreditCheckOfDocument_CMNUP,\n        VBAK.CMNGV AS NextDate_CMNGV,\n        VBAK.AMTBL AS ReleasedCreditValueOfTheDocument_AMTBL,\n        VBAK.HITYP_PR AS HierarchyTypeForPricing_HITYP_PR,\n        VBAK.ABRVW AS UsageIndicator_ABRVW,\n        VBAK.ABDIS AS MRPForDeliveryScheduleTypes_ABDIS,\n        VBAK.VGBEL AS DocumentNumberOfTheReferenceDocument_VGBEL,\n        VBAK.OBJNR AS ObjectNumberAtHeaderLevel_OBJNR,\n        VBAK.BUKRS_VF AS CompanyCodeToBeBilled_BUKRS_VF,\n        VBAK.TAXK1 AS AlternativeTaxClassification_TAXK1,\n        VBAK.TAXK2 AS TaxClassification2_TAXK2,\n        VBAK.TAXK3 AS TaxClassification3_TAXK3,\n        VBAK.TAXK4 AS TaxClassification4_TAXK4,\n        VBAK.TAXK5 AS TaxClassification5_TAXK5,\n        VBAK.TAXK6 AS TaxClassification6_TAXK6,\n        VBAK.TAXK7 AS TaxClassification7_TAXK7,\n        VBAK.TAXK8 AS TaxClassification8_TAXK8,\n        VBAK.TAXK9 AS TaxClassification9_TAXK9,\n        VBAK.XBLNR AS ReferenceDocumentNumber_XBLNR,\n        VBAK.ZUONR AS ASsignmentNumber_ZUONR,\n        VBAK.VGTYP AS PreDocCategory_VGTYP,\n        VBAK.AUFNR AS OrderNumberHdr_AUFNR,\n        VBAK.QMNUM AS NotificationNo_QMNUM,\n        VBAK.VBELN_GRP AS MasterContractNumber_VBELN_GRP,\n        VBAK.STCEG_L AS TaxDestinationCountry_STCEG_L,\n        VBAK.LANDTX AS TaxDepartureCountry_LANDTX,\n        VBAK.HANDLE AS InternationalUniqueKey_HANDLE,\n        VBAK.PROLI AS DangerousGoodsManagementProfile_PROLI,\n        VBAK.CONT_DG AS DangerousGoodsFlag_CONT_DG,\n        VBAK.UPD_TMSTMP AS UTCTimeStampL_UPD_TMSTMP,\n        -- VBAK.ABSTK AS RejectionsStatus_ABSTK,\n        -- VBAK.BESTK AS ConfirmationStatus_BESTK,\n        -- VBAK.CMGST AS OverallStatusOfCreditChecks_CMGST,\n        -- VBAK.DCSTK AS DelayStatus_DCSTK,\n        -- VBAK.FSSTK AS BillingBlockStatus_FSSTK,\n        -- VBAK.GBSTK AS OverallProcessingStatus_GBSTK,\n        -- VBAK.LFGSK AS OverallDeliveryStatus_LFGSK,\n        VBAP.MATWA AS MaterialEntered_MATWA,\n        VBAP.PMATN AS PricingReferenceMaterial_PMATN,\n        VBAP.CHARG AS BatchNumber_CHARG,\n        VBAP.MATKL AS MaterialGroup_MATKL,\n        VBAP.ARKTX AS ShortText_ARKTX,\n        VBAP.PSTYV AS ItemCategory_PSTYV,\n        VBAP.POSAR AS ItemType_POSAR,\n        VBAP.LFREL AS RelevantForDelivery_LFREL,\n        VBAP.FKREL AS RelevantForBilling_FKREL,\n        VBAP.UEPOS AS BOMItemLevel_UEPOS,\n        VBAP.GRPOS AS AlternativeForItem_GRPOS,\n        VBAP.ABGRU AS RejectionReason_ABGRU,\n        VBAP.PRODH AS ProductHierarchy_PRODH,\n        VBAP.ZWERT AS TargetValue_ZWERT,\n        VBAP.ZMENG AS TargetQuantityUoM_ZMENG,\n        VBAP.ZIEME AS TargetQuantityUoM_ZIEME,\n        VBAP.UMZIZ AS BaseTargetConversionFactor_UMZIZ,\n        VBAP.UMZIN AS ConversionFactor_UMZIN,\n        VBAP.MEINS AS BaseUnitOfMeasure_MEINS,\n        VBAP.SMENG AS ScaleQuantity_SMENG,\n        VBAP.ABLFZ AS RoundingQuantityForDelivery_ABLFZ,\n        VBAP.ABDAT AS ReconciliationDate_ABDAT,\n        VBAP.ABSFZ AS AllowedDeviation_ABSFZ,\n        VBAP.POSEX AS ItemNumberOfTheUnderlyingPurchaseOrder_POSEX,\n        VBAP.KDMAT AS CustomerMaterialNumber_KDMAT,\n        VBAP.KBVER AS AllowedDeviationPercent_KBVER,\n        VBAP.KEVER AS DaysByWhichTheQuantityCanBeShifted_KEVER,\n        VBAP.VKGRU AS RepairProcessing_VKGRU,\n        VBAP.VKAUS AS UsageIndicator_VKAUS,\n        VBAP.GRKOR AS DeliveryGroup_GRKOR,\n        VBAP.FMENG AS QuantityIsFixed_FMENG,\n        VBAP.UEBTK AS UnlimitedOverDeliveryAllowed_UEBTK,\n        VBAP.UEBTO AS OverDeliveryToleranceLimit_UEBTO,\n        VBAP.UNTTO AS UnderDeliveryToleranceLimit_UNTTO,\n        VBAP.FAKSP AS BillingBlockforitem_FAKSP,\n        VBAP.ATPKZ AS ReplacementPart_ATPKZ,\n        VBAP.RKFKF AS FormOfBillingForCO_RKFKF,\n        VBAP.SPART AS Division_SPART,\n        VBAP.GSBER AS BusinessArea_GSBER,\n        VBAP.NETWR AS NetPrice_NETWR,\n        VBAP.WAERK AS Currency_WAERK,\n        VBAP.ANTLF AS MaximumPartialDeliveries_ANTLF,\n        VBAP.KZTLF AS PartialDeliveryAtItemLevel_KZTLF,\n        VBAP.CHSPL AS BatchSplitAllowed_CHSPL,\n        VBAP.KWMENG AS CumulativeOrderQuantity_KWMENG,\n        VBAP.LSMENG AS CumulativeTargetDeliveryQty_LSMENG,\n        VBAP.KBMENG AS CumulativeConfirmedQuantity_KBMENG,\n        VBAP.KLMENG AS CumulativeConfirmedQuantityInBaseUoM_KLMENG,\n        VBAP.VRKME AS SalesUnit_VRKME,\n        VBAP.UMVKZ AS NumeratorQty_UMVKZ,\n        VBAP.UMVKN AS DenominatorQty_UMVKN,\n        VBAP.BRGEW AS GrossWeightOfItem_BRGEW,\n        VBAP.NTGEW AS NetWeightOfItem_NTGEW,\n        VBAP.GEWEI AS WeightUnit_GEWEI,\n        VBAP.VOLUM AS VolumeOfTheItem_VOLUM,\n        VBAP.VOLEH AS VolumeUnit_VOLEH,\n        VBAP.VBELV AS OriginatingDocument_VBELV,\n        VBAP.POSNV AS OriginatingItem_POSNV,\n        VBAP.VGBEL AS ReferenceDocument_VGBEL,\n        VBAP.VGPOS AS ReferenceItem_VGPOS,\n        VBAP.VOREF AS ReferenceIndicator_VOREF,\n        VBAP.UPFLU AS UpdateIndicator_UPFLU,\n        VBAP.ERLRE AS CompletionRuleForQuotation_ERLRE,\n        VBAP.LPRIO AS DeliveryPriority_LPRIO,\n        VBAP.WERKS AS Plant_WERKS,\n        VBAP.LGORT AS StorageLocation_LGORT,\n        VBAP.VSTEL AS ShippingReceivingPoint_VSTEL,\n        VBAP.ROUTE AS Route_ROUTE,\n        VBAP.STKEY AS BOMOrigin_STKEY,\n        VBAP.STDAT AS BOMDate_STDAT,\n        VBAP.STLNR AS BOM_STLNR,\n        VBAP.AWAHR AS OrderProbabilityOfTheItem_AWAHR,\n        VBAP.TAXM1 AS TaxClassification1_TAXM1,\n        VBAP.TAXM2 AS TaxClassification1_TAXM2,\n        VBAP.TAXM3 AS TaxClassification1_TAXM3,\n        VBAP.TAXM4 AS TaxClassification1_TAXM4,\n        VBAP.TAXM5 AS TaxClassification1_TAXM5,\n        VBAP.TAXM6 AS TaxClassification1_TAXM6,\n        VBAP.TAXM7 AS TaxClassification1_TAXM7,\n        VBAP.TAXM8 AS TaxClassification1_TAXM8,\n        VBAP.TAXM9 AS TaxClassification1_TAXM9,\n        VBAP.VBEAF AS FixedShippingProcessingTimeInDays_VBEAF,\n        VBAP.VBEAV AS VariableShippingProcessingTimeInDays_VBEAV,\n        VBAP.VGREF AS PrecedingDocumentHasResultedFromReference_VGREF,\n        VBAP.NETPR AS NetPrice_NETPR,\n        VBAP.KPEIN AS ConditionPricingUnit_KPEIN,\n        VBAP.KMEIN AS ConditionUnit_KMEIN,\n        VBAP.SHKZG AS ReturnsItem_SHKZG,\n        VBAP.SKTOF AS CashDiscountIndicator_SKTOF,\n        VBAP.MTVFP AS CheckingGroupForAvailabilityCheck_MTVFP,\n        VBAP.SUMBD AS SummingUpOfRequirements_SUMBD,\n        VBAP.KONDM AS MaterialPricingGroup_KONDM,\n        VBAP.KTGRM AS AccountAssignmentGroupForThisMaterial_KTGRM,\n        VBAP.BONUS AS VolumeRebateGroup_BONUS,\n        VBAP.PROVG AS CommissionGroup_PROVG,\n        VBAP.PRSOK AS PricingIsOK_PRSOK,\n        VBAP.BWTAR AS ValuationType_BWTAR,\n        VBAP.BWTEX AS SeparateValuation_BWTEX,\n        VBAP.XCHPF AS BatchManagementRequirementIndicator_XCHPF,\n        VBAP.XCHAR AS BatchManagementIndicator_XCHAR,\n        VBAP.LFMNG AS MinimumDeliveryQuantityInDeliveryNoteProcessing_LFMNG,\n        VBAP.STAFO AS UpdateGroupForStatisticsUpdate_STAFO,\n        VBAP.KZWI1 AS SubTotal1FromPricingProcedureForCondition_KZWI1,\n        VBAP.KZWI2 AS SubTotal2FromPricingProcedureForCondition_KZWI2,\n        VBAP.KZWI3 AS SubTotal3FromPricingProcedureForCondition_KZWI3,\n        VBAP.KZWI4 AS SubTotal4FromPricingProcedureForCondition_KZWI4,\n        VBAP.KZWI5 AS SubTotal5FromPricingProcedureForCondition_KZWI5,\n        VBAP.KZWI6 AS SubTotal6FromPricingProcedureForCondition_KZWI6,\n        VBAP.STCUR AS ExchangeRateForStatistics_STCUR,\n        VBAP.AEDAT AS LastChangedOn_AEDAT,\n        VBAP.EAN11 AS InternationalArticleNumber_EAN11,\n        VBAP.FIXMG AS DeliveryDateAndQuantityFixed_FIXMG,\n        VBAP.PRCTR AS ProfitCenter_PRCTR,\n        VBAP.MVGR1 AS MaterialGroup1_MVGR1,\n        VBAP.MVGR2 AS MaterialGroup2_MVGR2,\n        VBAP.MVGR3 AS MaterialGroup3_MVGR3,\n        VBAP.MVGR4 AS MaterialGroup4_MVGR4,\n        VBAP.MVGR5 AS MaterialGroup5_MVGR5,\n        VBAP.KMPMG AS ComponentQuantity_KMPMG,\n        VBAP.SUGRD AS ReasonForMaterialSubstitution_SUGRD,\n        VBAP.SOBKZ AS SpecialStockIndicator_SOBKZ,\n        VBAP.VPZUO AS AllocationIndicator_VPZUO,\n        VBAP.PAOBJNR AS ProfitabilitySegmentNumber_PAOBJNR,\n        VBAP.PS_PSP_PNR AS WBSElement_PS_PSP_PNR,\n        VBAP.AUFNR AS OrderNumber_AUFNR,\n        VBAP.VPMAT AS PlanningMaterial_VPMAT,\n        VBAP.VPWRK AS PlanningPlant_VPWRK,\n        VBAP.PRBME AS BaseUnitOfMeasureForProductGroup_PRBME,\n        VBAP.UMREF AS ConversionFactorQuantities_UMREF,\n        VBAP.KNTTP AS AccountAssignmentCategory_KNTTP,\n        VBAP.KZVBR AS ConsumptionPosting_KZVBR,\n        VBAP.SERNR AS BOMExplosionNumber_SERNR,\n        VBAP.OBJNR AS ObjectNumberAtItemLevel_OBJNR,\n        VBAP.ABGRS AS ResultsAnalysisKey_ABGRS,\n        VBAP.BEDAE AS RequirementsType_BEDAE,\n        VBAP.CMPRE AS ItemCreditPrice_CMPRE,\n        VBAP.CMTFG AS CreditBlock_CMTFG,\n        VBAP.CMPNT AS RelevantForCredit_CMPNT,\n        VBAP.CUOBJ AS Configuration_CUOBJ,\n        VBAP.CUOBJ_CH AS InternalObjectNumberOfTheBatchClassification_CUOBJ_CH,\n        VBAP.CEPOK AS StatusExpectedPrice_CEPOK,\n        VBAP.KOUPD AS ConditionUpdate_KOUPD,\n        VBAP.SERAIL AS SerialNumberProfile_SERAIL,\n        VBAP.ANZSN AS NumberOfSerialNumbers_ANZSN,\n        VBAP.NACHL AS CustomerHasNotPostedGoodsReceipt_NACHL,\n        VBAP.MAGRV AS PackagingMaterials_MAGRV,\n        VBAP.MPROK AS StatusManualPriceChange_MPROK,\n        VBAP.VGTYP AS PrecedingDocCategory_VGTYP,\n        VBAP.KALNR AS CostEstimateNumber_KALNR,\n        VBAP.KLVAR AS CostingVariant_KLVAR,\n        VBAP.SPOSN AS BOMItemNumber_SPOSN,\n        VBAP.KOWRR AS StatisticalValues_KOWRR,\n        VBAP.STADAT AS StatisticsDate_STADAT,\n        VBAP.EXART AS BusinessTransactionTypeForForeignTrade_EXART,\n        VBAP.PREFE AS ImportExportFlag_PREFE,\n        VBAP.KNUMH AS NumberOfConditionRecord_KNUMH,\n        VBAP.CLINT AS InternalClassNumber_CLINT,\n        VBAP.STLTY AS BOMCategory_STLTY,\n        VBAP.STLKN AS BOMItemNodeNumber_STLKN,\n        VBAP.STPOZ AS InternalCounter_STPOZ,\n        VBAP.STMAN AS InconsistentConfiguration_STMAN,\n        VBAP.ZSCHL_K AS OverHeadKey_ZSCHL_K,\n        VBAP.KALSM_K AS CostingSheet_KALSM_K,\n        VBAP.KALVAR AS CostingVariant_KALVAR,\n        VBAP.KOSCH AS ProductAllocation_KOSCH,\n        VBAP.UPMAT AS PricingReferenceMaterial_UPMAT,\n        VBAP.UKONM AS MaterialPricingGroup_UKONM,\n        VBAP.MFRGR AS MaterialFreightGroup_MFRGR,\n        VBAP.PLAVO AS PlanningReleASeRegulation_PLAVO,\n        VBAP.KANNR AS KANBAN_KANNR,\n        VBAP.CMPRE_FLT AS ItemCreditPrice_CMPRE_FLT,\n        VBAP.ABFOR AS FormOfPaymentGuarantee_ABFOR,\n        VBAP.ABGES AS GuaranteedFactor_ABGES,\n        VBAP.WKTNR AS ValueContractNo_WKTNR,\n        VBAP.WKTPS AS ValueContractItem_WKTPS,\n        VBAP.SKOPF AS AssortmentModule_SKOPF,\n        VBAP.KZBWS AS ValuationofSpecialStock_KZBWS,\n        VBAP.WGRU1 AS MaterialGroupHierarchy1_WGRU1,\n        VBAP.WGRU2 AS MaterialGroupHierarchy2_WGRU2,\n        VBAP.KNUMA_PI AS Promotion_KNUMA_PI,\n        VBAP.KNUMA_AG AS SalesDeal_KNUMA_AG,\n        VBAP.KZFME AS LeadingUoM_KZFME,\n        VBAP.LSTANR AS FreeGoodsDeliveryControl_LSTANR,\n        VBAP.TECHS AS ParameterVariant_TECHS,\n        VBAP.BERID AS MRPArea_BERID,\n        VBAP.PCTRF AS ProfitCenterForBilling_PCTRF,\n        VBAP.STOCKLOC AS ManagingLocation_STOCKLOC,\n        VBAP.SLOCTYPE AS TypeOfFirstInventory_SLOCTYPE,\n        VBAP.MSR_RET_REASON AS ReturnReason_MSR_RET_REASON,\n        VBAP.MSR_REFUND_CODE AS ReturnsRefundCode_MSR_REFUND_CODE,\n        VBAP.MSR_APPROV_BLOCK AS ApprovalBlock_MSR_APPROV_BLOCK,\n        VBAP.NRAB_KNUMH AS ConditionRecordNumber_NRAB_KNUMH,\n        VBAP.TRMRISK_RELEVANT AS RiskRelevancyInSales_TRMRISK_RELEVANT,\n        VBAP.HANDOVERLOC AS LocationForAPhysicalHandOverOfGoods_HANDOVERLOC,\n        VBAP.HANDOVERDATE AS HandOverDateAtTheHandOverLocation_HANDOVERDATE,\n        VBAP.HANDOVERTIME AS HandOverTimeAtTheHandOverLocation_HANDOVERTIME,\n        VBAP.TC_AUT_DET AS TaxCodeAutomaticallyDetermined_TC_AUT_DET,\n        VBAP.MANUAL_TC_REASON AS ManualTaxCodeReason_MANUAL_TC_REASON,\n        VBAP.FISCAL_INCENTIVE AS TaxIncentiveType_FISCAL_INCENTIVE,\n        VBAP.FISCAL_INCENTIVE_ID AS IncentiveID_FISCAL_INCENTIVE_ID,\n        VBAP.SPCSTO AS NotAFiscalSpecialCaseForCFOPDetermination_SPCSTO,\n        VBAP.KOSTL AS CostCenter_KOSTL,\n        VBAP.FONDS AS Fund_FONDS,\n        VBAP.FISTL AS FundsCenter_FISTL,\n        VBAP.FKBER AS FunctionalArea_FKBER,\n        AGGVBPAITEM.SoldToPartyItem_KUNNR,\n        AGGVBPAITEM.SoldToPartyItemName_KUNNR,\n        AGGVBPAITEM.ShipToPartyItem_KUNNR,\n        AGGVBPAITEM.ShipToPartyItemName_KUNNR,\n        AGGVBPAITEM.BillToPartyItem_KUNNR,\n        AGGVBPAITEM.BillToPartyItemName_KUNNR,\n        AGGVBPAITEM.PayerItem_KUNNR,\n        AGGVBPAITEM.PayerItemName_KUNNR,\n        AGGVBPAHEADER.SoldToPartyHeader_KUNNR,\n        AGGVBPAHEADER.SoldToPartyHeaderName_KUNNR,\n        AGGVBPAHEADER.ShipToPartyHeader_KUNNR,\n        AGGVBPAHEADER.ShipToPartyHeaderName_KUNNR,\n        AGGVBPAHEADER.BillToPartyHeader_KUNNR,\n        AGGVBPAHEADER.BillToPartyHeaderName_KUNNR,\n        AGGVBPAHEADER.PayerHeader_KUNNR,\n        AGGVBPAHEADER.PayerHeaderName_KUNNR,\n\n        AGGVBEP.ConfirmedOrderQuantity_BMENG,\n        COALESCE(VBAK.NETWR * tcurx_VBAK.CURRFIX, VBAK.NETWR) AS NetValueOfTheSalesOrderInDocumentCurrency_NETWR,\n        COALESCE(VBAP.WAVWR * tcurx_VBAP.CURRFIX, VBAP.WAVWR) AS CostInDocumentCurrency_WAVWR,\n        COALESCE(VBAP.MWSBP * tcurx_VBAP.CURRFIX, VBAP.MWSBP) AS TaxAmountInDocumentCurrency_MWSBP,\n        EXTRACT(YEAR FROM VBAK.ERDAT) AS YearOfSalesOrderCreationDate_ERDAT,\n        EXTRACT(MONTH FROM VBAK.ERDAT) AS MonthOfSalesOrderCreationDate_ERDAT,\n        EXTRACT(WEEK FROM VBAK.ERDAT) AS WeekOfSalesOrderCreationDate_ERDAT,\n        EXTRACT(DAY FROM VBAK.ERDAT) AS DayOfSalesOrderCreationDate_ERDAT,\n        (VBAP.NETPR * VBAP.KWMENG) AS SalesOrderValueLineItem\n    FROM\n    SSI_SAP_TO_SNOW.RAW.vbak AS VBAK\n    INNER JOIN SSI_SAP_TO_SNOW.RAW.vbap AS VBAP\n        ON\n        VBAK.VBELN = VBAP.VBELN\n        AND VBAK.MANDT = VBAP.MANDT\n    LEFT OUTER JOIN SSI_SAP_TO_SNOW.REPORT.aggvbep\n        ON\n        VBAP.VBELN = AGGVBEP.VBELN\n        AND VBAP.POSNR = AGGVBEP.POSNR\n        AND VBAP.MANDT = AGGVBEP.MANDT\n    LEFT OUTER JOIN SSI_SAP_TO_SNOW.REPORT.aggvbpaitem\n        ON\n        VBAP.MANDT = AGGVBPAITEM.MANDT\n        AND VBAP.VBELN = AGGVBPAITEM.VBELN\n        AND VBAP.POSNR = AGGVBPAITEM.POSNR\n    LEFT OUTER JOIN SSI_SAP_TO_SNOW.REPORT.aggvbpaheader\n        ON\n        VBAP.MANDT = AGGVBPAHEADER.MANDT\n        AND VBAP.VBELN = AGGVBPAHEADER.VBELN\n        AND (AGGVBPAHEADER.POSNR IS NULL OR AGGVBPAHEADER.POSNR = '000000')\n\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.tcurxview AS tcurx_VBAK\n        ON\n        VBAK.WAERK = tcurx_VBAK.CURRKEY\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.tcurxview AS tcurx_VBAP\n        ON\n        VBAP.WAERK = tcurx_VBAP.CURRKEY\n)\n\nSELECT * FROM sales_orders", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sap_order_to_cash.ordertocash": {"database": "SSI_SAP_TO_SNOW", "schema": "REPORT", "name": "ordertocash", "resource_type": "model", "package_name": "sap_order_to_cash", "path": "ordertocash.sql", "original_file_path": "models/ordertocash.sql", "unique_id": "model.sap_order_to_cash.ordertocash", "fqn": ["sap_order_to_cash", "ordertocash"], "alias": "ordertocash", "checksum": {"name": "sha256", "checksum": "267df0e243740e8a6c1113ac9891a482509ff1a3650667781b18cba159ed9c49"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sap_order_to_cash/models/ordertocash.sql", "unrendered_config": {"file_format": "delta", "materialized": "table"}, "created_at": 1720617270.131983, "relation_name": "SSI_SAP_TO_SNOW.REPORT.ordertocash", "raw_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith order_to_cash AS (\n    SELECT\n        SalesOrders.Client_MANDT,\n        Deliveries.Delivery_VBELN,\n        Deliveries.DeliveryItem_POSNR,\n        SalesOrders.SalesDocument_VBELN,\n        SalesOrders.Item_POSNR,\n        Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG,\n        Deliveries.BaseUnitOfMeasure_MEINS AS BaseUoM_MEINS,\n        Deliveries.NetPrice_NETPR,\n        Deliveries.NetValueInDocumentCurrency_NETWR,\n        Deliveries.SdDocumentCurrency_WAERK AS DeliveryDocumentCurrency_WAERK,\n        Deliveries.DeliveryBlock_DocumentHeader_LIFSK,\n        Deliveries.BillingBlockInSdDocument_FAKSK,\n        Deliveries.Date__proofOfDelivery___PODAT,\n        Deliveries.BillingDateForBillingIndexAndPrintout_FKDAT,\n        Deliveries.SalesOrderNumber_VGBEL AS SalesOrderNumber,\n        Deliveries.DeliveryDate_LFDAT,\n        Deliveries.ActualGoodsMovementDate_WADAT_IST,\n        SalesOrders.ExchangeRateType_KURST,\n        SalesOrders.Requesteddeliverydate_VDATU,\n        SalesOrders.CumulativeOrderQuantity_KWMENG AS SalesOrderQty,\n        SalesOrders.BaseUnitofMeasure_MEINS,\n        SalesOrders.Netprice_NETPR AS SalesOrderNetPrice,\n        SalesOrders.Currency_WAERK AS SalesOrderDocumentCurrency_WAERK,\n        SalesOrders.ShippingReceivingPoint_VSTEL AS ShippingLocation,\n        SalesOrders.SoldToParty_KUNNR,\n        SalesOrders.SoldToPartyItem_KUNNR,\n        SalesOrders.SoldToPartyItemName_KUNNR,\n        SalesOrders.ShipToPartyItem_KUNNR,\n        SalesOrders.ShipToPartyItemName_KUNNR,\n        SalesOrders.BillToPartyItem_KUNNR,\n        SalesOrders.BillToPartyItemName_KUNNR,\n        SalesOrders.PayerItem_KUNNR,\n        SalesOrders.PayerItemName_KUNNR,\n        SalesOrders.SoldToPartyHeader_KUNNR,\n        SalesOrders.SoldToPartyHeaderName_KUNNR,\n        SalesOrders.ShipToPartyHeader_KUNNR,\n        SalesOrders.ShipToPartyHeaderName_KUNNR,\n        SalesOrders.BillToPartyHeader_KUNNR,\n        SalesOrders.BillToPartyHeaderName_KUNNR,\n        SalesOrders.PayerHeader_KUNNR,\n        SalesOrders.PayerHeaderName_KUNNR,\n        SalesOrders.SalesOrganization_VKORG AS SalesOrganization,\n        SalesOrders.DistributionChannel_VTWEG AS DistributionChannel,\n        -- SalesOrders.OverallDeliveryStatus_LFGSK AS DeliveryStatus,\n        -- SalesOrders.ListPrice AS ListPrice,\n        -- SalesOrders.AdjustedPrice AS AdjustedPrice,\n        -- SalesOrders.InterCompanyPrice AS InterCompanyPrice,\n        -- SalesOrders.Discount AS Discount,\n        SalesOrders.ConfirmedOrderQuantity_BMENG,\n        SalesOrders.BaseUnitofMeasure_MEINS AS SalesUnitMeasure,\n        SalesOrders.CreationDate_ERDAT,\n        SalesOrders.DocumentCategory_VBTYP,\n        SalesOrders.PrecedingDocCategory_VGTYP,\n        SalesOrders.Documentnumberofthereferencedocument_VGBEL,\n        SalesOrders.ReferenceItem_VGPOS,\n        SalesOrders.RejectionReason_ABGRU,\n        CustomersMD.CustomerNumber_KUNNR AS CustomerNumber,\n        CustomersMD.Name1_NAME1 AS CustomerName1,\n        CustomersMD.Name2_NAME2 AS CustomerName2,\n        CustomersMD.City_ORT01 AS City,\n        CustomersMD.CountryKey_LAND1 AS Country,\n        CustomersMD.PostalCode_PSTLZ AS PostalCode,\n        CustomersMD.CustomerRegion_REGIO AS CustomerRegion,\n        CustomersMD.Address_ADRNR AS CustomerAddress,\n        CustomersMD.LanguageKey_SPRAS AS CustomerLanguage,\n        MaterialsMD.MaterialNumber_MATNR AS MaterialNumber,\n        MaterialsMD.MaterialType_MTART AS MaterialType,\n        MaterialsMD.Division_SPART AS Division,\n        MaterialsMD.MaterialCategory_ATTYP AS ProductCategory,\n        MaterialsMD.Brand_BRAND_ID AS Brand,\n        MaterialsMD.MaterialText_MAKTX AS MaterialDescription,\n        MaterialsMD.Language_SPRAS AS Language_SPRAS,\n        Billing.ActualBilledQuantity_FKIMG AS BilledQty,\n        Billing.BillingDocument_VBELN,\n        -- Billing.Rebate,\n        Billing.TaxAmount_MWSBK,\n        Billing.Volume_VOLUM,\n        Billing.GrossWeight_BRGEW,\n        Billing.BillingDate_FKDAT,\n        Billing.BillingItem_POSNR,\n        Billing.NetWeight_NTGEW,\n        Billing.NetValue_NETWR AS BillingNetValue,\n        Billing.SdDocumentCurrency_WAERK AS BillingDOcumentCurrency_WAERK,\n        SalesOrganizationsMD.SalesOrgName_VTEXT AS SalesOrganizationName,\n        DistributionChannelMD.DistributionChannelName_VTEXT AS DistributionChannelName,\n        CountriesMD.CountryName_LANDX AS RegionDescription,\n        OneTouchOrder.OneTouchOrderCount AS OneTouchOrderCount,\n        OneTouchOrder.VBAPSalesDocument_VBELN AS OneTouchOrders,\n        DivisionsMD.DivisionName_VTEXT AS DivisionDescription,\n        -- SalesOrders.OverallProcessingStatus_GBSTK,\n        TVLST.DeliveryBlockReason_VTEXT AS DeliveryBlockReasonDescription,\n        TVFST.BillingBlockReason_VTEXT AS BillingBlockReasonDescription,\n        -- CASE SalesOrders.OverallProcessingStatus_GBSTK\n        -- WHEN 'A' THEN 'Not yet Processed'\n        -- WHEN 'B' THEN 'Partially Processed'\n        -- WHEN 'C' THEN 'Completely Processed'\n        -- ELSE 'Not relevant'\n        -- END\n        -- AS ReturnOrderDescription,\n        Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG * Deliveries.NetPrice_NETPR AS DeliveredValue,\n        Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG * Deliveries.NetValueInDocumentCurrency_NETWR AS Value,\n        SalesOrders.CumulativeOrderQuantity_KWMENG * SalesOrders.Netprice_NETPR AS SalesOrderNetValue,\n        SUM(Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG * Deliveries.NetPrice_NETPR) OVER(PARTITION BY Deliveries.DeliveryItem_POSNR, Deliveries.Delivery_VBELN) AS DeliveredNetValue,\n        \n\n\n        CASE\n            WHEN Deliveries.Date__proofOfDelivery___PODAT > Deliveries.DeliveryDate_LFDAT THEN 'Delayed'\n            ELSE 'NotDelayed'\n        END AS LateDeliveries,\n\n        CASE\n            WHEN Deliveries.DeliveryBlock_documentHeader_LIFSK IS NULL\n                AND Deliveries.BillingBlockInSdDocument_FAKSK IS NULL THEN 'NotBlocked'\n            ELSE 'Blocked'\n        END AS BlockedSalesOrder,\n\n\n        -- IF(Deliveries.Date__proofOfDelivery___PODAT > Deliveries.DeliveryDate_LFDAT,\n        -- 'Delayed',\n        -- 'NotDelayed') AS LateDeliveries,\n        -- IF(Deliveries.DeliveryBlock_documentHeader_LIFSK IS NULL\n        -- AND Deliveries.BillingBlockInSdDocument_FAKSK IS NULL,\n        -- 'NotBlocked',\n        -- 'Blocked' ) AS BlockedSalesOrder,\n\n        ARRAY_SIZE(ARRAY_AGG(DISTINCT SalesOrders.SalesDocument_VBELN) OVER (PARTITION BY SalesOrders.Client_MANDT)) AS TotalOrders,\n        ARRAY_SIZE(ARRAY_AGG(DISTINCT SalesOrders.Item_POSNR) OVER (PARTITION BY SalesOrders.Client_MANDT)) AS TotalOrderItems,\n        ARRAY_SIZE(ARRAY_AGG(DISTINCT Deliveries.DeliveryItem_POSNR) OVER (PARTITION BY SalesOrders.Client_MANDT)) AS TotalDeliveries,\n\n\n\n        SUM(SalesOrders.CumulativeOrderQuantity_KWMENG ) OVER (PARTITION BY SalesOrders.Client_MANDT, SalesOrders.SalesDocument_VBELN, SalesOrders.Item_POSNR) AS SalesOrderQuantity,\n\n        SUM(SalesOrders.Netprice_NETPR * SalesOrders.CumulativeOrderQuantity_KWMENG) OVER (PARTITION BY SalesOrders.Client_MANDT, SalesOrders.SalesDocument_VBELN, SalesOrders.Item_POSNR) AS SalesOrderValue,\n\n        CASE\n            WHEN SalesOrders.DocumentCategory_VBTYP = 'C' THEN SalesOrders.SalesDocument_VBELN\n            ELSE NULL\n        END AS IncomingOrderNum,\n\n        CASE\n            WHEN SalesOrders.CumulativeOrderQuantity_KWMENG = Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG THEN 'DeliveredInFull'\n            ELSE 'NotDeliveredInFull'\n        END AS InFullDelivery,\n\n        CASE\n            WHEN Deliveries.Date__proofOfDelivery___PODAT <= Deliveries.DeliveryDate_LFDAT\n                AND SalesOrders.CumulativeOrderQuantity_KWMENG = Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG THEN 'OTIF'\n            ELSE 'NotOTIF'\n        END AS OTIF,\n\n        (SalesOrders.ConfirmedOrderQuantity_BMENG / NULLIF(SalesOrders.CumulativeOrderQuantity_KWMENG, 0)) * 100 AS FillRatePercent,\n\n        CASE\n            WHEN SalesOrders.CumulativeOrderQuantity_KWMENG > SalesOrders.ConfirmedOrderQuantity_BMENG THEN 'BackOrder'\n            ELSE 'NotBackOrder'\n        END AS BackOrder,\n\n        CASE\n            WHEN Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG = SalesOrders.CumulativeOrderQuantity_KWMENG\n                AND SalesOrders.CumulativeOrderQuantity_KWMENG = Billing.ActualBilledQuantity_FKIMG THEN 'NotOpenOrder'\n            ELSE 'OpenOrder'\n        END AS OpenOrder,\n\n        CASE\n            WHEN SalesOrders.DocumentCategory_VBTYP = 'H' THEN\n                CASE\n                    WHEN SalesOrders.PrecedingDocCategory_VGTYP = 'C'\n                        AND SalesOrders.ReferenceDocument_VGBEL = SalesOrders.Documentnumberofthereferencedocument_VGBEL\n                        AND SalesOrders.Item_POSNR = SalesOrders.ReferenceItem_VGPOS THEN 'Returned'\n                    ELSE 'NotReturned'\n                END\n            WHEN SalesOrders.PrecedingDocCategory_VGTYP = 'M'\n                AND SalesOrders.ReferenceDocument_VGBEL = Billing.DocumentNumberOfTheReferenceDocument_VGBEL\n                AND SalesOrders.ReferenceItem_VGPOS = Billing.ItemNumberOfTheReferenceItem_VGPOS\n                AND Billing.SalesDocument_AUBEL = SalesOrders.SalesDocument_VBELN\n                AND Billing.SalesDocumentItem_AUPOS = SalesOrders.Item_POSNR THEN 'Returned'\n            ELSE 'NotReturned'\n        END AS ReturnOrder,\n\n        CASE\n            WHEN SalesOrders.RejectionReason_ABGRU IS NOT NULL THEN 'Canceled'\n            ELSE 'NotCanceled'\n        END AS CanceledOrder,\n\n        CASE\n            WHEN Deliveries.ActualGoodsMovementDate_WADAT_IST IS NOT NULL THEN\n                DATEDIFF(\n                    'DAY',\n                    CAST(CONCAT(Deliveries.Date__proofOfDelivery___PODAT, ' ',\n                        SUBSTRING(Deliveries.ConfirmationTime_POTIM, 1, 2), ':',\n                        SUBSTRING(Deliveries.ConfirmationTime_POTIM, 3, 2), ':',\n                        SUBSTRING(Deliveries.ConfirmationTime_POTIM, 5, 2)) AS TIMESTAMP),\n                    CAST(CONCAT(SalesOrders.CreationDate_ERDAT, ' ',\n                        SUBSTRING(SalesOrders.CreationTime_ERZET, 1, 2), ':',\n                        SUBSTRING(SalesOrders.CreationTime_ERZET, 3, 2), ':',\n                        SUBSTRING(SalesOrders.CreationTime_ERZET, 5, 2)) AS TIMESTAMP)\n                )\n            ELSE NULL\n        END AS OrderCycleTimeInDays,\n\n        CASE\n            WHEN Deliveries.Date__proofOfDelivery___PODAT <= Deliveries.DeliveryDate_LFDAT THEN 'DeliveredOnTime'\n            ELSE 'NotDeliveredOnTime'\n        END AS OnTimeDelivery\n\n\n\n\n\n    FROM {{ ref(\"salesorders\") }}\n    LEFT JOIN {{ ref(\"deliveries\") }} AS Deliveries\n        ON\n        SalesOrders.SalesDocument_VBELN = Deliveries.SalesOrderNumber_VGBEL\n        AND SalesOrders.Item_POSNR = Deliveries.SalesOrderItem_VGPOS\n        AND SalesOrders.Client_MANDT = Deliveries.Client_MANDT\n    LEFT JOIN {{ ref(\"billing\") }} AS Billing\n        ON\n        SalesOrders.SalesDocument_VBELN = Billing.SalesDocument_AUBEL\n        AND SalesOrders.Item_POSNR = Billing.SalesDocumentItem_AUPOS\n        AND SalesOrders.Client_MANDT = Billing.Client_MANDT\n    LEFT JOIN {{ ref(\"customersmd\") }} AS CustomersMD\n        ON\n        SalesOrders.SoldtoParty_KUNNR = CustomersMD.CustomerNumber_KUNNR\n        AND SalesOrders.Client_MANDT = CustomersMD.Client_MANDT\n    LEFT JOIN {{ ref(\"materialsmd\") }} AS MaterialsMD\n        ON\n        SalesOrders.MaterialNumber_MATNR = MaterialsMD.MaterialNumber_MATNR\n        AND SalesOrders.Client_MANDT = MaterialsMD.Client_MANDT\n    LEFT JOIN {{ ref(\"salesorganizationsmd\") }} AS SalesOrganizationsMD\n        ON\n        SalesOrders.Client_MANDT = SalesOrganizationsMD.Client_MANDT\n        AND SalesOrders.SalesOrganization_VKORG = SalesOrganizationsMD.SalesOrg_VKORG\n        AND SalesOrganizationsMD.Language_SPRAS = MaterialsMD.Language_SPRAS\n    LEFT JOIN {{ ref(\"distributionchannelmd\") }} AS DistributionChannelMD\n        ON\n        SalesOrders.Client_MANDT = DistributionChannelMD.Client_MANDT\n        AND SalesOrders.DistributionChannel_VTWEG = DistributionChannelMD.DistributionChannel_VTWEG\n        AND DistributionChannelMD.Language_SPRAS = MaterialsMD.Language_SPRAS\n    LEFT JOIN {{ ref(\"countriesmd\") }} AS CountriesMD\n        ON\n        SalesOrders.Client_MANDT = CountriesMD.Client_MANDT\n        AND CustomersMD.CountryKey_LAND1 = CountriesMD.CountryKey_LAND1\n        AND CountriesMD.Language_SPRAS = MaterialsMD.Language_SPRAS\n    LEFT JOIN {{ ref(\"onetouchorder\") }} AS OneTouchOrder\n        ON\n        SalesOrders.Client_MANDT = OneTouchOrder.VBAPClient_MANDT\n        AND SalesOrders.SalesDocument_VBELN = OneTouchOrder.VBAPSalesDocument_VBELN\n        AND SalesOrders.Item_POSNR = OneTouchOrder.VBAPSalesDocument_Item_POSNR\n    LEFT JOIN {{ ref(\"divisionsmd\") }} AS DivisionsMD\n        ON MaterialsMD.Client_MANDT = DivisionsMD.Client_MANDT\n        AND MaterialsMD.Division_SPART = DivisionsMD.Division_SPART\n        AND DivisionsMD.LanguageKey_SPRAS = MaterialsMD.Language_SPRAS\n    LEFT JOIN {{ ref(\"deliveryblockingreasonsmd\") }} AS TVLST\n        ON\n        Deliveries.Client_MANDT = TVLST.Client_MANDT\n        AND Deliveries.DeliveryBlock_DocumentHeader_LIFSK = TVLST.DefaultDeliveryBlock_LIFSP\n        AND MaterialsMD.Language_SPRAS = TVLST.LanguageKey_SPRAS\n    LEFT JOIN {{ ref(\"billingblockingreasonsmd\") }} AS TVFST\n        ON\n        Deliveries.Client_MANDT = TVFST.Client_MANDT\n        AND Deliveries.BillingBlockInSdDocument_FAKSK = TVFST.Block_FAKSP\n        AND TVFST.LanguageKey_SPRAS = MaterialsMD.Language_SPRAS\n)\n\nSELECT * FROM order_to_cash", "language": "sql", "refs": [{"name": "salesorders", "package": null, "version": null}, {"name": "deliveries", "package": null, "version": null}, {"name": "billing", "package": null, "version": null}, {"name": "customersmd", "package": null, "version": null}, {"name": "materialsmd", "package": null, "version": null}, {"name": "salesorganizationsmd", "package": null, "version": null}, {"name": "distributionchannelmd", "package": null, "version": null}, {"name": "countriesmd", "package": null, "version": null}, {"name": "onetouchorder", "package": null, "version": null}, {"name": "divisionsmd", "package": null, "version": null}, {"name": "deliveryblockingreasonsmd", "package": null, "version": null}, {"name": "billingblockingreasonsmd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sap_order_to_cash.salesorders", "model.sap_order_to_cash.deliveries", "model.sap_order_to_cash.billing", "model.sap_order_to_cash.customersmd", "model.sap_order_to_cash.materialsmd", "model.sap_order_to_cash.salesorganizationsmd", "model.sap_order_to_cash.distributionchannelmd", "model.sap_order_to_cash.countriesmd", "model.sap_order_to_cash.onetouchorder", "model.sap_order_to_cash.divisionsmd", "model.sap_order_to_cash.deliveryblockingreasonsmd", "model.sap_order_to_cash.billingblockingreasonsmd"]}, "compiled_path": "target/compiled/sap_order_to_cash/models/ordertocash.sql", "compiled": true, "compiled_code": "-- Copyright 2022 Google LLC\n-- Copyright 2023 DataSentics\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     https://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nwith order_to_cash AS (\n    SELECT\n        SalesOrders.Client_MANDT,\n        Deliveries.Delivery_VBELN,\n        Deliveries.DeliveryItem_POSNR,\n        SalesOrders.SalesDocument_VBELN,\n        SalesOrders.Item_POSNR,\n        Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG,\n        Deliveries.BaseUnitOfMeasure_MEINS AS BaseUoM_MEINS,\n        Deliveries.NetPrice_NETPR,\n        Deliveries.NetValueInDocumentCurrency_NETWR,\n        Deliveries.SdDocumentCurrency_WAERK AS DeliveryDocumentCurrency_WAERK,\n        Deliveries.DeliveryBlock_DocumentHeader_LIFSK,\n        Deliveries.BillingBlockInSdDocument_FAKSK,\n        Deliveries.Date__proofOfDelivery___PODAT,\n        Deliveries.BillingDateForBillingIndexAndPrintout_FKDAT,\n        Deliveries.SalesOrderNumber_VGBEL AS SalesOrderNumber,\n        Deliveries.DeliveryDate_LFDAT,\n        Deliveries.ActualGoodsMovementDate_WADAT_IST,\n        SalesOrders.ExchangeRateType_KURST,\n        SalesOrders.Requesteddeliverydate_VDATU,\n        SalesOrders.CumulativeOrderQuantity_KWMENG AS SalesOrderQty,\n        SalesOrders.BaseUnitofMeasure_MEINS,\n        SalesOrders.Netprice_NETPR AS SalesOrderNetPrice,\n        SalesOrders.Currency_WAERK AS SalesOrderDocumentCurrency_WAERK,\n        SalesOrders.ShippingReceivingPoint_VSTEL AS ShippingLocation,\n        SalesOrders.SoldToParty_KUNNR,\n        SalesOrders.SoldToPartyItem_KUNNR,\n        SalesOrders.SoldToPartyItemName_KUNNR,\n        SalesOrders.ShipToPartyItem_KUNNR,\n        SalesOrders.ShipToPartyItemName_KUNNR,\n        SalesOrders.BillToPartyItem_KUNNR,\n        SalesOrders.BillToPartyItemName_KUNNR,\n        SalesOrders.PayerItem_KUNNR,\n        SalesOrders.PayerItemName_KUNNR,\n        SalesOrders.SoldToPartyHeader_KUNNR,\n        SalesOrders.SoldToPartyHeaderName_KUNNR,\n        SalesOrders.ShipToPartyHeader_KUNNR,\n        SalesOrders.ShipToPartyHeaderName_KUNNR,\n        SalesOrders.BillToPartyHeader_KUNNR,\n        SalesOrders.BillToPartyHeaderName_KUNNR,\n        SalesOrders.PayerHeader_KUNNR,\n        SalesOrders.PayerHeaderName_KUNNR,\n        SalesOrders.SalesOrganization_VKORG AS SalesOrganization,\n        SalesOrders.DistributionChannel_VTWEG AS DistributionChannel,\n        -- SalesOrders.OverallDeliveryStatus_LFGSK AS DeliveryStatus,\n        -- SalesOrders.ListPrice AS ListPrice,\n        -- SalesOrders.AdjustedPrice AS AdjustedPrice,\n        -- SalesOrders.InterCompanyPrice AS InterCompanyPrice,\n        -- SalesOrders.Discount AS Discount,\n        SalesOrders.ConfirmedOrderQuantity_BMENG,\n        SalesOrders.BaseUnitofMeasure_MEINS AS SalesUnitMeasure,\n        SalesOrders.CreationDate_ERDAT,\n        SalesOrders.DocumentCategory_VBTYP,\n        SalesOrders.PrecedingDocCategory_VGTYP,\n        SalesOrders.Documentnumberofthereferencedocument_VGBEL,\n        SalesOrders.ReferenceItem_VGPOS,\n        SalesOrders.RejectionReason_ABGRU,\n        CustomersMD.CustomerNumber_KUNNR AS CustomerNumber,\n        CustomersMD.Name1_NAME1 AS CustomerName1,\n        CustomersMD.Name2_NAME2 AS CustomerName2,\n        CustomersMD.City_ORT01 AS City,\n        CustomersMD.CountryKey_LAND1 AS Country,\n        CustomersMD.PostalCode_PSTLZ AS PostalCode,\n        CustomersMD.CustomerRegion_REGIO AS CustomerRegion,\n        CustomersMD.Address_ADRNR AS CustomerAddress,\n        CustomersMD.LanguageKey_SPRAS AS CustomerLanguage,\n        MaterialsMD.MaterialNumber_MATNR AS MaterialNumber,\n        MaterialsMD.MaterialType_MTART AS MaterialType,\n        MaterialsMD.Division_SPART AS Division,\n        MaterialsMD.MaterialCategory_ATTYP AS ProductCategory,\n        MaterialsMD.Brand_BRAND_ID AS Brand,\n        MaterialsMD.MaterialText_MAKTX AS MaterialDescription,\n        MaterialsMD.Language_SPRAS AS Language_SPRAS,\n        Billing.ActualBilledQuantity_FKIMG AS BilledQty,\n        Billing.BillingDocument_VBELN,\n        -- Billing.Rebate,\n        Billing.TaxAmount_MWSBK,\n        Billing.Volume_VOLUM,\n        Billing.GrossWeight_BRGEW,\n        Billing.BillingDate_FKDAT,\n        Billing.BillingItem_POSNR,\n        Billing.NetWeight_NTGEW,\n        Billing.NetValue_NETWR AS BillingNetValue,\n        Billing.SdDocumentCurrency_WAERK AS BillingDOcumentCurrency_WAERK,\n        SalesOrganizationsMD.SalesOrgName_VTEXT AS SalesOrganizationName,\n        DistributionChannelMD.DistributionChannelName_VTEXT AS DistributionChannelName,\n        CountriesMD.CountryName_LANDX AS RegionDescription,\n        OneTouchOrder.OneTouchOrderCount AS OneTouchOrderCount,\n        OneTouchOrder.VBAPSalesDocument_VBELN AS OneTouchOrders,\n        DivisionsMD.DivisionName_VTEXT AS DivisionDescription,\n        -- SalesOrders.OverallProcessingStatus_GBSTK,\n        TVLST.DeliveryBlockReason_VTEXT AS DeliveryBlockReasonDescription,\n        TVFST.BillingBlockReason_VTEXT AS BillingBlockReasonDescription,\n        -- CASE SalesOrders.OverallProcessingStatus_GBSTK\n        -- WHEN 'A' THEN 'Not yet Processed'\n        -- WHEN 'B' THEN 'Partially Processed'\n        -- WHEN 'C' THEN 'Completely Processed'\n        -- ELSE 'Not relevant'\n        -- END\n        -- AS ReturnOrderDescription,\n        Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG * Deliveries.NetPrice_NETPR AS DeliveredValue,\n        Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG * Deliveries.NetValueInDocumentCurrency_NETWR AS Value,\n        SalesOrders.CumulativeOrderQuantity_KWMENG * SalesOrders.Netprice_NETPR AS SalesOrderNetValue,\n        SUM(Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG * Deliveries.NetPrice_NETPR) OVER(PARTITION BY Deliveries.DeliveryItem_POSNR, Deliveries.Delivery_VBELN) AS DeliveredNetValue,\n        \n\n\n        CASE\n            WHEN Deliveries.Date__proofOfDelivery___PODAT > Deliveries.DeliveryDate_LFDAT THEN 'Delayed'\n            ELSE 'NotDelayed'\n        END AS LateDeliveries,\n\n        CASE\n            WHEN Deliveries.DeliveryBlock_documentHeader_LIFSK IS NULL\n                AND Deliveries.BillingBlockInSdDocument_FAKSK IS NULL THEN 'NotBlocked'\n            ELSE 'Blocked'\n        END AS BlockedSalesOrder,\n\n\n        -- IF(Deliveries.Date__proofOfDelivery___PODAT > Deliveries.DeliveryDate_LFDAT,\n        -- 'Delayed',\n        -- 'NotDelayed') AS LateDeliveries,\n        -- IF(Deliveries.DeliveryBlock_documentHeader_LIFSK IS NULL\n        -- AND Deliveries.BillingBlockInSdDocument_FAKSK IS NULL,\n        -- 'NotBlocked',\n        -- 'Blocked' ) AS BlockedSalesOrder,\n\n        ARRAY_SIZE(ARRAY_AGG(DISTINCT SalesOrders.SalesDocument_VBELN) OVER (PARTITION BY SalesOrders.Client_MANDT)) AS TotalOrders,\n        ARRAY_SIZE(ARRAY_AGG(DISTINCT SalesOrders.Item_POSNR) OVER (PARTITION BY SalesOrders.Client_MANDT)) AS TotalOrderItems,\n        ARRAY_SIZE(ARRAY_AGG(DISTINCT Deliveries.DeliveryItem_POSNR) OVER (PARTITION BY SalesOrders.Client_MANDT)) AS TotalDeliveries,\n\n\n\n        SUM(SalesOrders.CumulativeOrderQuantity_KWMENG ) OVER (PARTITION BY SalesOrders.Client_MANDT, SalesOrders.SalesDocument_VBELN, SalesOrders.Item_POSNR) AS SalesOrderQuantity,\n\n        SUM(SalesOrders.Netprice_NETPR * SalesOrders.CumulativeOrderQuantity_KWMENG) OVER (PARTITION BY SalesOrders.Client_MANDT, SalesOrders.SalesDocument_VBELN, SalesOrders.Item_POSNR) AS SalesOrderValue,\n\n        CASE\n            WHEN SalesOrders.DocumentCategory_VBTYP = 'C' THEN SalesOrders.SalesDocument_VBELN\n            ELSE NULL\n        END AS IncomingOrderNum,\n\n        CASE\n            WHEN SalesOrders.CumulativeOrderQuantity_KWMENG = Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG THEN 'DeliveredInFull'\n            ELSE 'NotDeliveredInFull'\n        END AS InFullDelivery,\n\n        CASE\n            WHEN Deliveries.Date__proofOfDelivery___PODAT <= Deliveries.DeliveryDate_LFDAT\n                AND SalesOrders.CumulativeOrderQuantity_KWMENG = Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG THEN 'OTIF'\n            ELSE 'NotOTIF'\n        END AS OTIF,\n\n        (SalesOrders.ConfirmedOrderQuantity_BMENG / NULLIF(SalesOrders.CumulativeOrderQuantity_KWMENG, 0)) * 100 AS FillRatePercent,\n\n        CASE\n            WHEN SalesOrders.CumulativeOrderQuantity_KWMENG > SalesOrders.ConfirmedOrderQuantity_BMENG THEN 'BackOrder'\n            ELSE 'NotBackOrder'\n        END AS BackOrder,\n\n        CASE\n            WHEN Deliveries.ActualQuantityDelivered_InSalesUnits_LFIMG = SalesOrders.CumulativeOrderQuantity_KWMENG\n                AND SalesOrders.CumulativeOrderQuantity_KWMENG = Billing.ActualBilledQuantity_FKIMG THEN 'NotOpenOrder'\n            ELSE 'OpenOrder'\n        END AS OpenOrder,\n\n        CASE\n            WHEN SalesOrders.DocumentCategory_VBTYP = 'H' THEN\n                CASE\n                    WHEN SalesOrders.PrecedingDocCategory_VGTYP = 'C'\n                        AND SalesOrders.ReferenceDocument_VGBEL = SalesOrders.Documentnumberofthereferencedocument_VGBEL\n                        AND SalesOrders.Item_POSNR = SalesOrders.ReferenceItem_VGPOS THEN 'Returned'\n                    ELSE 'NotReturned'\n                END\n            WHEN SalesOrders.PrecedingDocCategory_VGTYP = 'M'\n                AND SalesOrders.ReferenceDocument_VGBEL = Billing.DocumentNumberOfTheReferenceDocument_VGBEL\n                AND SalesOrders.ReferenceItem_VGPOS = Billing.ItemNumberOfTheReferenceItem_VGPOS\n                AND Billing.SalesDocument_AUBEL = SalesOrders.SalesDocument_VBELN\n                AND Billing.SalesDocumentItem_AUPOS = SalesOrders.Item_POSNR THEN 'Returned'\n            ELSE 'NotReturned'\n        END AS ReturnOrder,\n\n        CASE\n            WHEN SalesOrders.RejectionReason_ABGRU IS NOT NULL THEN 'Canceled'\n            ELSE 'NotCanceled'\n        END AS CanceledOrder,\n\n        CASE\n            WHEN Deliveries.ActualGoodsMovementDate_WADAT_IST IS NOT NULL THEN\n                DATEDIFF(\n                    'DAY',\n                    CAST(CONCAT(Deliveries.Date__proofOfDelivery___PODAT, ' ',\n                        SUBSTRING(Deliveries.ConfirmationTime_POTIM, 1, 2), ':',\n                        SUBSTRING(Deliveries.ConfirmationTime_POTIM, 3, 2), ':',\n                        SUBSTRING(Deliveries.ConfirmationTime_POTIM, 5, 2)) AS TIMESTAMP),\n                    CAST(CONCAT(SalesOrders.CreationDate_ERDAT, ' ',\n                        SUBSTRING(SalesOrders.CreationTime_ERZET, 1, 2), ':',\n                        SUBSTRING(SalesOrders.CreationTime_ERZET, 3, 2), ':',\n                        SUBSTRING(SalesOrders.CreationTime_ERZET, 5, 2)) AS TIMESTAMP)\n                )\n            ELSE NULL\n        END AS OrderCycleTimeInDays,\n\n        CASE\n            WHEN Deliveries.Date__proofOfDelivery___PODAT <= Deliveries.DeliveryDate_LFDAT THEN 'DeliveredOnTime'\n            ELSE 'NotDeliveredOnTime'\n        END AS OnTimeDelivery\n\n\n\n\n\n    FROM SSI_SAP_TO_SNOW.REPORT.salesorders\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.deliveries AS Deliveries\n        ON\n        SalesOrders.SalesDocument_VBELN = Deliveries.SalesOrderNumber_VGBEL\n        AND SalesOrders.Item_POSNR = Deliveries.SalesOrderItem_VGPOS\n        AND SalesOrders.Client_MANDT = Deliveries.Client_MANDT\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.billing AS Billing\n        ON\n        SalesOrders.SalesDocument_VBELN = Billing.SalesDocument_AUBEL\n        AND SalesOrders.Item_POSNR = Billing.SalesDocumentItem_AUPOS\n        AND SalesOrders.Client_MANDT = Billing.Client_MANDT\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.customersmd AS CustomersMD\n        ON\n        SalesOrders.SoldtoParty_KUNNR = CustomersMD.CustomerNumber_KUNNR\n        AND SalesOrders.Client_MANDT = CustomersMD.Client_MANDT\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.materialsmd AS MaterialsMD\n        ON\n        SalesOrders.MaterialNumber_MATNR = MaterialsMD.MaterialNumber_MATNR\n        AND SalesOrders.Client_MANDT = MaterialsMD.Client_MANDT\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.salesorganizationsmd AS SalesOrganizationsMD\n        ON\n        SalesOrders.Client_MANDT = SalesOrganizationsMD.Client_MANDT\n        AND SalesOrders.SalesOrganization_VKORG = SalesOrganizationsMD.SalesOrg_VKORG\n        AND SalesOrganizationsMD.Language_SPRAS = MaterialsMD.Language_SPRAS\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.distributionchannelmd AS DistributionChannelMD\n        ON\n        SalesOrders.Client_MANDT = DistributionChannelMD.Client_MANDT\n        AND SalesOrders.DistributionChannel_VTWEG = DistributionChannelMD.DistributionChannel_VTWEG\n        AND DistributionChannelMD.Language_SPRAS = MaterialsMD.Language_SPRAS\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.countriesmd AS CountriesMD\n        ON\n        SalesOrders.Client_MANDT = CountriesMD.Client_MANDT\n        AND CustomersMD.CountryKey_LAND1 = CountriesMD.CountryKey_LAND1\n        AND CountriesMD.Language_SPRAS = MaterialsMD.Language_SPRAS\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.onetouchorder AS OneTouchOrder\n        ON\n        SalesOrders.Client_MANDT = OneTouchOrder.VBAPClient_MANDT\n        AND SalesOrders.SalesDocument_VBELN = OneTouchOrder.VBAPSalesDocument_VBELN\n        AND SalesOrders.Item_POSNR = OneTouchOrder.VBAPSalesDocument_Item_POSNR\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.divisionsmd AS DivisionsMD\n        ON MaterialsMD.Client_MANDT = DivisionsMD.Client_MANDT\n        AND MaterialsMD.Division_SPART = DivisionsMD.Division_SPART\n        AND DivisionsMD.LanguageKey_SPRAS = MaterialsMD.Language_SPRAS\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.deliveryblockingreasonsmd AS TVLST\n        ON\n        Deliveries.Client_MANDT = TVLST.Client_MANDT\n        AND Deliveries.DeliveryBlock_DocumentHeader_LIFSK = TVLST.DefaultDeliveryBlock_LIFSP\n        AND MaterialsMD.Language_SPRAS = TVLST.LanguageKey_SPRAS\n    LEFT JOIN SSI_SAP_TO_SNOW.REPORT.billingblockingreasonsmd AS TVFST\n        ON\n        Deliveries.Client_MANDT = TVFST.Client_MANDT\n        AND Deliveries.BillingBlockInSdDocument_FAKSK = TVFST.Block_FAKSP\n        AND TVFST.LanguageKey_SPRAS = MaterialsMD.Language_SPRAS\n)\n\nSELECT * FROM order_to_cash", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}}, "sources": {"source.sap_order_to_cash.source_db.tcurx": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "tcurx", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.tcurx", "fqn": ["sap_order_to_cash", "source_db", "tcurx"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "tcurx", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Decimal Places in Currencies", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.tcurx", "created_at": 1720615553.0392811}, "source.sap_order_to_cash.source_db.kna1": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "kna1", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.kna1", "fqn": ["sap_order_to_cash", "source_db", "kna1"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "kna1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "General Data in Customer Master", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.kna1", "created_at": 1720615553.0405517}, "source.sap_order_to_cash.source_db.adrc": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "adrc", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.adrc", "fqn": ["sap_order_to_cash", "source_db", "adrc"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "adrc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Addresses (Business Address Services)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.adrc", "created_at": 1720615553.0407224}, "source.sap_order_to_cash.source_db.t005": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "t005", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.t005", "fqn": ["sap_order_to_cash", "source_db", "t005"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "t005", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Countries", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.t005", "created_at": 1720615553.0408642}, "source.sap_order_to_cash.source_db.t005t": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "t005t", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.t005t", "fqn": ["sap_order_to_cash", "source_db", "t005t"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "t005t", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Country Names", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.t005t", "created_at": 1720615553.0409856}, "source.sap_order_to_cash.source_db.tspa": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "tspa", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.tspa", "fqn": ["sap_order_to_cash", "source_db", "tspa"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "tspa", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Organizational Unit: Sales Divisions", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.tspa", "created_at": 1720615553.0412033}, "source.sap_order_to_cash.source_db.tspat": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "tspat", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.tspat", "fqn": ["sap_order_to_cash", "source_db", "tspat"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "tspat", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Organizational Unit: Sales Divisions: Texts", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.tspat", "created_at": 1720615553.0414844}, "source.sap_order_to_cash.source_db.tvtw": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "tvtw", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.tvtw", "fqn": ["sap_order_to_cash", "source_db", "tvtw"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "tvtw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Organizational Unit: Distribution Channels", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.tvtw", "created_at": 1720615553.0416477}, "source.sap_order_to_cash.source_db.tvtwt": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "tvtwt", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.tvtwt", "fqn": ["sap_order_to_cash", "source_db", "tvtwt"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "tvtwt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Organizational Unit: Distribution Channels: Texts", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.tvtwt", "created_at": 1720615553.041758}, "source.sap_order_to_cash.source_db.tvko": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "tvko", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.tvko", "fqn": ["sap_order_to_cash", "source_db", "tvko"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "tvko", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Organizational Unit: Sales Organizations", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.tvko", "created_at": 1720615553.0418606}, "source.sap_order_to_cash.source_db.tvkot": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "tvkot", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.tvkot", "fqn": ["sap_order_to_cash", "source_db", "tvkot"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "tvkot", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Organizational Unit: Sales Organizations: Texts", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.tvkot", "created_at": 1720615553.041962}, "source.sap_order_to_cash.source_db.t001": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "t001", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.t001", "fqn": ["sap_order_to_cash", "source_db", "t001"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "t001", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Company Codes", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.t001", "created_at": 1720615553.042074}, "source.sap_order_to_cash.source_db.tvlst": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "tvlst", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.tvlst", "fqn": ["sap_order_to_cash", "source_db", "tvlst"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "tvlst", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Deliveries: Blocking Reasons/Scope: Texts", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.tvlst", "created_at": 1720615553.042205}, "source.sap_order_to_cash.source_db.tvfst": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "tvfst", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.tvfst", "fqn": ["sap_order_to_cash", "source_db", "tvfst"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "tvfst", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Billing : Blocking Reason Texts", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.tvfst", "created_at": 1720615553.0423057}, "source.sap_order_to_cash.source_db.mara": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "mara", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.mara", "fqn": ["sap_order_to_cash", "source_db", "mara"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "mara", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "General Material Data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.mara", "created_at": 1720615553.0424106}, "source.sap_order_to_cash.source_db.makt": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "makt", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.makt", "fqn": ["sap_order_to_cash", "source_db", "makt"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "makt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Material Descriptions", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.makt", "created_at": 1720615553.0425143}, "source.sap_order_to_cash.source_db.vbrk": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "vbrk", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.vbrk", "fqn": ["sap_order_to_cash", "source_db", "vbrk"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "vbrk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Billing Document: Header Data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.vbrk", "created_at": 1720615553.0426133}, "source.sap_order_to_cash.source_db.vbrp": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "vbrp", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.vbrp", "fqn": ["sap_order_to_cash", "source_db", "vbrp"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "vbrp", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Billing Document: Item Data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.vbrp", "created_at": 1720615553.0427349}, "source.sap_order_to_cash.source_db.lips": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "lips", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.lips", "fqn": ["sap_order_to_cash", "source_db", "lips"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "lips", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "SD document: Delivery: Item data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.lips", "created_at": 1720615553.0428407}, "source.sap_order_to_cash.source_db.likp": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "likp", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.likp", "fqn": ["sap_order_to_cash", "source_db", "likp"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "likp", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "SD Document: Delivery Header Data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.likp", "created_at": 1720615553.0429394}, "source.sap_order_to_cash.source_db.vbap": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "vbap", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.vbap", "fqn": ["sap_order_to_cash", "source_db", "vbap"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "vbap", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sales Document: Item Data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.vbap", "created_at": 1720615553.0430503}, "source.sap_order_to_cash.source_db.vbep": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "vbep", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.vbep", "fqn": ["sap_order_to_cash", "source_db", "vbep"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "vbep", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sales Document: Schedule Line Data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.vbep", "created_at": 1720615553.043167}, "source.sap_order_to_cash.source_db.vbpa": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "vbpa", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.vbpa", "fqn": ["sap_order_to_cash", "source_db", "vbpa"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "vbpa", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sales Document: Partner", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.vbpa", "created_at": 1720615553.043269}, "source.sap_order_to_cash.source_db.vbak": {"database": "SSI_SAP_TO_SNOW", "schema": "RAW", "name": "vbak", "resource_type": "source", "package_name": "sap_order_to_cash", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.sap_order_to_cash.source_db.vbak", "fqn": ["sap_order_to_cash", "source_db", "vbak"], "source_name": "source_db", "source_description": "Snowflake database.", "loader": "", "identifier": "vbak", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sales Document: Header Data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SSI_SAP_TO_SNOW.RAW.vbak", "created_at": 1720615553.043369}}, "macros": {"macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3290193, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3294728, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3411884, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3415923, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3425221, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3432617, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {% if schema_relation is string %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% else %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% endif -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n           dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation }}.\n           Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n           or review and reduce the number of objects contained.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3448486, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n  {% if schema_relation is string %}\n    {%- set sql -%}\n      show objects in {{ schema_relation }} limit {{ max_results_per_iter }}\n    {%- endset -%}\n  {% else %}\n    {%- set sql -%}\n      show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }}\n    {%- endset -%}\n  {% endif -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3462315, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3466637, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.346978, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3475964, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation_type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3483758, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3485944, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3487825, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3493338, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3495448, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.350104, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation_type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation_type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.351212, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3514812, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3517728, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3553872, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3558364, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3560572, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3562036, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3563013, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3565035, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.35692, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.357607, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3583684, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3617945, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3636496, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.363944, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3645227, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3649065, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3653414, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3667989, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.367159, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3674934, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3677511, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.370461, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3744402, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3746552, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3750207, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3753765, "supported_languages": null}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3777516, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.378376, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.378503, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3789082, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3800654, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3841152, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3846505, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3849912, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3861456, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3865933, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3868952, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3870783, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3872561, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.387475, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3877323, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.387946, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3882308, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3887267, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3890154, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3893607, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3898034, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3901927, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3904305, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3905876, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) %}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n    {{ snowflake__refresh_dynamic_table(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__refresh_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3910217, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3921926, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.392565, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n    {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3931563, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.393357, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3935158, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3937204, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3960056, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3962095, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.397535, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.397772, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3979409, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.3981957, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- set transient = config.get('transient', default=true) -%}\n\n  {% if temporary -%}\n    {%- set table_type = \"temporary\" -%}\n  {%- elif transient -%}\n    {%- set table_type = \"transient\" -%}\n  {%- else -%}\n    {%- set table_type = \"\" -%}\n  {%- endif %}\n\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ table_type }} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=table_type) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.402273, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4038415, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4040318, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4050038, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4055028, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4061909, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4067445, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4068403, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4089453, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4091365, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4094992, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4097507, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.40999, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4102764, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4117353, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4122996, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.412571, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4131234, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.413397, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4140904, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4143813, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4154074, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4173343, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4175334, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4177902, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.418137, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.418425, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4188201, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.41904, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4192324, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4195108, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.420216, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4204845, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4206524, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4213502, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.421543, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4217758, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4219673, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4222724, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4228156, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4232814, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4237645, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4254475, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.425594, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4257908, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4259267, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4263306, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4265428, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.426688, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.426951, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.42724, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4276335, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4279199, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4282193, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.429104, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4293432, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4296944, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.429966, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4320467, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4329526, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4331698, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.433366, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4335136, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4337313, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.433878, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4341102, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.434359, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4347706, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4352162, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4365888, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.436888, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4370885, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4375677, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4377866, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4379528, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4381375, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.438285, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4387004, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4389234, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4391143, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4393277, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4399302, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.440155, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4403157, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4435961, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4439387, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.444175, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4445, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4448268, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.445035, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4452577, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4455543, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4457893, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4461489, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4463682, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4465566, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.446768, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4469528, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4471483, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4473245, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4475625, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4477603, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.448319, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.448639, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.448992, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.44944, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4497445, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4501822, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.450877, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.452702, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4541101, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.454994, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4552667, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.456879, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4575353, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4578736, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4581664, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4585273, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4589074, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4598544, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4673638, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4682088, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4697125, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4701686, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4705296, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4708827, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4720361, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4722679, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4724395, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4726102, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4727802, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.473194, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4736497, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.474862, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4754984, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4757533, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4764955, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4786506, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4817286, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.486165, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4872277, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4875052, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4880643, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4882882, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4884515, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4886174, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4887557, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.48894, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4890764, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4896545, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4898758, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.491635, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.495557, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4960518, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.4963696, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5024338, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5060046, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.506216, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5064852, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5075548, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5077658, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5079694, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.509561, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5111873, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5147603, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5151384, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5153432, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.515454, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.515627, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5157733, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5160124, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.517036, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5172582, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5175598, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5180597, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.523036, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.52358, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.523899, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5253956, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5256677, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5264244, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5295355, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.532628, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5378394, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5393913, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5409048, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5419111, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5475476, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5494123, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5497386, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5509856, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5512936, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5520349, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5577283, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5586932, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.558979, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.559198, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5595348, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.559748, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5600812, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5602968, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5605943, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5608013, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5609777, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5612953, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5619895, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5636132, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5642395, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5652168, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5654984, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5663388, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5666373, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5667777, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.570901, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5712872, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5714521, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5720918, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5725765, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5728922, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5730562, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5735826, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5737805, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5740428, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5744433, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.574796, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5750844, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5752141, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5755758, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5758548, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5761826, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5763404, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5766191, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5767453, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5770319, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.577163, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.577551, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5777562, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5780792, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5782435, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5785713, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5787437, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.579167, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5794795, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5796566, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5804558, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5810125, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5812387, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.581847, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5821457, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5822768, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5825543, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.582701, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.583043, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5832093, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5835063, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5836751, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5839942, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5841713, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5845249, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5847156, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.585453, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5868855, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5872223, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5876546, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5879412, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5881245, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5893862, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5895782, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5897655, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.589937, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.590118, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5902853, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5904672, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.590679, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5908675, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5910408, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5912285, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5913951, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5915816, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5917492, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5920177, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5921125, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5925276, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5928428, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5931044, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5931978, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.593481, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5937974, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5941188, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5942745, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.595004, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5955052, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5957358, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.596069, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5964832, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5967758, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5974996, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.597939, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5981486, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.598381, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5986388, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.5993938, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6008563, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6012406, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6014864, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.601807, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6020582, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6026192, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6031404, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6035182, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.603829, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6041873, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6044264, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6047497, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6049345, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6052775, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6054382, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6057084, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6058333, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6061285, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6063023, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6070137, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6072288, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.60755, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.607718, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6080139, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.608178, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.609232, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6093855, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6100328, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.610234, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6103923, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.611952, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6124094, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6128078, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6131248, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.613296, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.613581, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6137085, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.614565, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6147587, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.616169, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6163995, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6166575, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6171052, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6172917, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.617526, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6180115, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.618356, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.618529, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6188047, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.61893, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.619227, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6193957, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.620281, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.620497, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.621006, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.621879, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.622417, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6226292, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6228392, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.623393, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.623672, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.624012, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720444080.6243606, "supported_languages": null}}, "docs": {"doc.sap_order_to_cash.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "sap_order_to_cash", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.sap_order_to_cash.__overview__", "block_contents": "# Introduction\nThis project provides predefined data analytics content for selected SAP financial insights. Includes:\n\n### Sales Performance\n\n* [Avg Sales Customers & Products](https://app.fabric.microsoft.com/view?r=eyJrIjoiNzBhMTE5NTEtZTlhNi00YTRjLTgyMGUtMjU4OWQwZmVmNTM1IiwidCI6IjU4NTEyN2FhLTg2OTEtNGYyNS05Nzc3LThjYjc4Y2NmMGQ5MSIsImMiOjh9&pageName=ReportSection40434213839b55d73299)\n* [Sales Performance 1](https://app.fabric.microsoft.com/view?r=eyJrIjoiNzBhMTE5NTEtZTlhNi00YTRjLTgyMGUtMjU4OWQwZmVmNTM1IiwidCI6IjU4NTEyN2FhLTg2OTEtNGYyNS05Nzc3LThjYjc4Y2NmMGQ5MSIsImMiOjh9&pageName=ReportSection)\n* [Sales Performance 2](https://app.fabric.microsoft.com/view?r=eyJrIjoiNzBhMTE5NTEtZTlhNi00YTRjLTgyMGUtMjU4OWQwZmVmNTM1IiwidCI6IjU4NTEyN2FhLTg2OTEtNGYyNS05Nzc3LThjYjc4Y2NmMGQ5MSIsImMiOjh9&pageName=ReportSection5057dc91035ccb3ae0c4)\n\n### Order Fulfillment\n\n* [Fulfillment in Percentages](https://app.fabric.microsoft.com/view?r=eyJrIjoiYjk2MjIwZWEtZjVhNy00YThhLWJiZjgtNzQ1OTM1NDBlOTcxIiwidCI6IjU4NTEyN2FhLTg2OTEtNGYyNS05Nzc3LThjYjc4Y2NmMGQ5MSIsImMiOjh9&pageName=ReportSection)\n* [Order to Delivery Cycle Time](https://app.fabric.microsoft.com/view?r=eyJrIjoiYjk2MjIwZWEtZjVhNy00YThhLWJiZjgtNzQ1OTM1NDBlOTcxIiwidCI6IjU4NTEyN2FhLTg2OTEtNGYyNS05Nzc3LThjYjc4Y2NmMGQ5MSIsImMiOjh9&pageName=ReportSection967ba4b26a08b0552ab8)\n\n### Billing and Pricing\n\n* [Price Adjustments based on Customer](https://app.fabric.microsoft.com/view?r=eyJrIjoiNGYzOWI2OTktNzU0Mi00Zjk4LThkOWYtZmEyNTJiN2RlZmY3IiwidCI6IjU4NTEyN2FhLTg2OTEtNGYyNS05Nzc3LThjYjc4Y2NmMGQ5MSIsImMiOjh9&pageName=ReportSection)\n* [Price Adjustments based on Product](https://app.fabric.microsoft.com/view?r=eyJrIjoiNGYzOWI2OTktNzU0Mi00Zjk4LThkOWYtZmEyNTJiN2RlZmY3IiwidCI6IjU4NTEyN2FhLTg2OTEtNGYyNS05Nzc3LThjYjc4Y2NmMGQ5MSIsImMiOjh9&pageName=ReportSectionaae184c0cc105036697c)\n\n### Order Information\n\n* [Order Status](https://app.powerbi.com/view?r=eyJrIjoiOTkzNDc1ODgtNGYxZC00MjFhLWI3MTItMTQwOTUwZThmYTAxIiwidCI6IjU4NTEyN2FhLTg2OTEtNGYyNS05Nzc3LThjYjc4Y2NmMGQ5MSIsImMiOjh9)\n* [Order Details](https://app.powerbi.com/view?r=eyJrIjoiZjBkMTFjYjYtZmE2Ni00ZDA1LWJiZWEtMmE1NmRhZmMxY2QzIiwidCI6IjU4NTEyN2FhLTg2OTEtNGYyNS05Nzc3LThjYjc4Y2NmMGQ5MSIsImMiOjh9)\n\nUsing dbt, it transforms all the necessary SAP tables into the ordertocash table, which is used to create reports in Microsoft Power BI. Dbt is connected to Databricks where all source and target tables are stored.\n\nThe current repository contains a dbt project and templates for creating reports in Power BI. Ingesting SAP tables into Databricks isn't part of the project.\n\n# How to start\nFirst you need clone repository\n```\ngit clone https://github.com/DataSentics/sap-order-to-cash.git\n```\nThen set environment and databricks connection.\n\n## Environment Settings\nCreate and activate prepared environment.\n```\nconda env create -f environment.yml -p .venv\nconda activate $PWD/.venv\n```\n\nInstall all required packages.\n```\npip install -r requirements.txt\n```\n\nSet environment variable DBT_DATABRICKS_TOKEN, that is required to connect databricks.\n```\nconda env config vars set DBT_DATABRICKS_TOKEN=<your_token>\n```\n\n## Databricks Connection\nIn file `models/schema.yml` set databricks database in which all required SAP tables are prepared.\n\n![schema.yml settings](assets/settings/schema_settings_c.png)\n\nIn file `profiles.yml` set your databricks and destination catalog and schema.\n\n![profiles.yml settings](assets/settings/profiles_settings_c.png)\n\nRun project\n```\ndbt run\n```\nNow you should have ordertocash table in your Databricks. \n\n## PowerBI reports\nReport templates for Power BI are prepared in folder pbi_templates. \n\nIn Power BI Desktop open selected template. Each template needs just one table (ordertocash), which is the result of running dbt.\n\nFirst you must provide the Server hostname and HTTP Path for your Databricks SQL Warehouse and location of ordertocash table.\n\n![Databricks connection settings](assets/settings/databricks_connection_f.png)\n\n\nIn next step provide credentials to authenticate with your Databricks SQL Warehouse.\n\nOnce all the data is loaded, the report is ready.\n\n![Order details report](assets/reports/order_details.png)"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.sap_order_to_cash.calendar_date_dim": [], "model.sap_order_to_cash.billing": ["model.sap_order_to_cash.currency_decimal", "source.sap_order_to_cash.source_db.vbrk", "source.sap_order_to_cash.source_db.vbrp"], "model.sap_order_to_cash.deliveries": ["model.sap_order_to_cash.currency_decimal", "source.sap_order_to_cash.source_db.likp", "source.sap_order_to_cash.source_db.lips"], "model.sap_order_to_cash.currency_decimal": ["source.sap_order_to_cash.source_db.tcurx"], "model.sap_order_to_cash.tcurxview": ["source.sap_order_to_cash.source_db.tcurx"], "model.sap_order_to_cash.aggvbpaheader": ["source.sap_order_to_cash.source_db.kna1", "source.sap_order_to_cash.source_db.vbpa"], "model.sap_order_to_cash.aggvbpaitem": ["source.sap_order_to_cash.source_db.kna1", "source.sap_order_to_cash.source_db.vbpa"], "model.sap_order_to_cash.customersmd": ["source.sap_order_to_cash.source_db.adrc", "source.sap_order_to_cash.source_db.kna1"], "model.sap_order_to_cash.countriesmd": ["source.sap_order_to_cash.source_db.t005", "source.sap_order_to_cash.source_db.t005t"], "model.sap_order_to_cash.divisionsmd": ["source.sap_order_to_cash.source_db.tspa", "source.sap_order_to_cash.source_db.tspat"], "model.sap_order_to_cash.distributionchannelmd": ["source.sap_order_to_cash.source_db.tvtw", "source.sap_order_to_cash.source_db.tvtwt"], "model.sap_order_to_cash.salesorganizationsmd": ["source.sap_order_to_cash.source_db.t001", "source.sap_order_to_cash.source_db.tvko", "source.sap_order_to_cash.source_db.tvkot"], "model.sap_order_to_cash.deliveryblockingreasonsmd": ["source.sap_order_to_cash.source_db.tvlst"], "model.sap_order_to_cash.billingblockingreasonsmd": ["source.sap_order_to_cash.source_db.tvfst"], "model.sap_order_to_cash.materialsmd": ["source.sap_order_to_cash.source_db.makt", "source.sap_order_to_cash.source_db.mara"], "model.sap_order_to_cash.onetouchorder": ["source.sap_order_to_cash.source_db.lips", "source.sap_order_to_cash.source_db.vbap", "source.sap_order_to_cash.source_db.vbep", "source.sap_order_to_cash.source_db.vbrp"], "model.sap_order_to_cash.aggvbep": ["source.sap_order_to_cash.source_db.vbep"], "model.sap_order_to_cash.salesorders": ["model.sap_order_to_cash.aggvbep", "model.sap_order_to_cash.aggvbpaheader", "model.sap_order_to_cash.aggvbpaitem", "model.sap_order_to_cash.tcurxview", "source.sap_order_to_cash.source_db.vbak", "source.sap_order_to_cash.source_db.vbap"], "model.sap_order_to_cash.ordertocash": ["model.sap_order_to_cash.billing", "model.sap_order_to_cash.billingblockingreasonsmd", "model.sap_order_to_cash.countriesmd", "model.sap_order_to_cash.customersmd", "model.sap_order_to_cash.deliveries", "model.sap_order_to_cash.deliveryblockingreasonsmd", "model.sap_order_to_cash.distributionchannelmd", "model.sap_order_to_cash.divisionsmd", "model.sap_order_to_cash.materialsmd", "model.sap_order_to_cash.onetouchorder", "model.sap_order_to_cash.salesorders", "model.sap_order_to_cash.salesorganizationsmd"], "source.sap_order_to_cash.source_db.tcurx": [], "source.sap_order_to_cash.source_db.kna1": [], "source.sap_order_to_cash.source_db.adrc": [], "source.sap_order_to_cash.source_db.t005": [], "source.sap_order_to_cash.source_db.t005t": [], "source.sap_order_to_cash.source_db.tspa": [], "source.sap_order_to_cash.source_db.tspat": [], "source.sap_order_to_cash.source_db.tvtw": [], "source.sap_order_to_cash.source_db.tvtwt": [], "source.sap_order_to_cash.source_db.tvko": [], "source.sap_order_to_cash.source_db.tvkot": [], "source.sap_order_to_cash.source_db.t001": [], "source.sap_order_to_cash.source_db.tvlst": [], "source.sap_order_to_cash.source_db.tvfst": [], "source.sap_order_to_cash.source_db.mara": [], "source.sap_order_to_cash.source_db.makt": [], "source.sap_order_to_cash.source_db.vbrk": [], "source.sap_order_to_cash.source_db.vbrp": [], "source.sap_order_to_cash.source_db.lips": [], "source.sap_order_to_cash.source_db.likp": [], "source.sap_order_to_cash.source_db.vbap": [], "source.sap_order_to_cash.source_db.vbep": [], "source.sap_order_to_cash.source_db.vbpa": [], "source.sap_order_to_cash.source_db.vbak": []}, "child_map": {"model.sap_order_to_cash.calendar_date_dim": [], "model.sap_order_to_cash.billing": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.deliveries": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.currency_decimal": ["model.sap_order_to_cash.billing", "model.sap_order_to_cash.deliveries"], "model.sap_order_to_cash.tcurxview": ["model.sap_order_to_cash.salesorders"], "model.sap_order_to_cash.aggvbpaheader": ["model.sap_order_to_cash.salesorders"], "model.sap_order_to_cash.aggvbpaitem": ["model.sap_order_to_cash.salesorders"], "model.sap_order_to_cash.customersmd": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.countriesmd": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.divisionsmd": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.distributionchannelmd": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.salesorganizationsmd": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.deliveryblockingreasonsmd": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.billingblockingreasonsmd": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.materialsmd": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.onetouchorder": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.aggvbep": ["model.sap_order_to_cash.salesorders"], "model.sap_order_to_cash.salesorders": ["model.sap_order_to_cash.ordertocash"], "model.sap_order_to_cash.ordertocash": [], "source.sap_order_to_cash.source_db.tcurx": ["model.sap_order_to_cash.currency_decimal", "model.sap_order_to_cash.tcurxview"], "source.sap_order_to_cash.source_db.kna1": ["model.sap_order_to_cash.aggvbpaheader", "model.sap_order_to_cash.aggvbpaitem", "model.sap_order_to_cash.customersmd"], "source.sap_order_to_cash.source_db.adrc": ["model.sap_order_to_cash.customersmd"], "source.sap_order_to_cash.source_db.t005": ["model.sap_order_to_cash.countriesmd"], "source.sap_order_to_cash.source_db.t005t": ["model.sap_order_to_cash.countriesmd"], "source.sap_order_to_cash.source_db.tspa": ["model.sap_order_to_cash.divisionsmd"], "source.sap_order_to_cash.source_db.tspat": ["model.sap_order_to_cash.divisionsmd"], "source.sap_order_to_cash.source_db.tvtw": ["model.sap_order_to_cash.distributionchannelmd"], "source.sap_order_to_cash.source_db.tvtwt": ["model.sap_order_to_cash.distributionchannelmd"], "source.sap_order_to_cash.source_db.tvko": ["model.sap_order_to_cash.salesorganizationsmd"], "source.sap_order_to_cash.source_db.tvkot": ["model.sap_order_to_cash.salesorganizationsmd"], "source.sap_order_to_cash.source_db.t001": ["model.sap_order_to_cash.salesorganizationsmd"], "source.sap_order_to_cash.source_db.tvlst": ["model.sap_order_to_cash.deliveryblockingreasonsmd"], "source.sap_order_to_cash.source_db.tvfst": ["model.sap_order_to_cash.billingblockingreasonsmd"], "source.sap_order_to_cash.source_db.mara": ["model.sap_order_to_cash.materialsmd"], "source.sap_order_to_cash.source_db.makt": ["model.sap_order_to_cash.materialsmd"], "source.sap_order_to_cash.source_db.vbrk": ["model.sap_order_to_cash.billing"], "source.sap_order_to_cash.source_db.vbrp": ["model.sap_order_to_cash.billing", "model.sap_order_to_cash.onetouchorder"], "source.sap_order_to_cash.source_db.lips": ["model.sap_order_to_cash.deliveries", "model.sap_order_to_cash.onetouchorder"], "source.sap_order_to_cash.source_db.likp": ["model.sap_order_to_cash.deliveries"], "source.sap_order_to_cash.source_db.vbap": ["model.sap_order_to_cash.onetouchorder", "model.sap_order_to_cash.salesorders"], "source.sap_order_to_cash.source_db.vbep": ["model.sap_order_to_cash.aggvbep", "model.sap_order_to_cash.onetouchorder"], "source.sap_order_to_cash.source_db.vbpa": ["model.sap_order_to_cash.aggvbpaheader", "model.sap_order_to_cash.aggvbpaitem"], "source.sap_order_to_cash.source_db.vbak": ["model.sap_order_to_cash.salesorders"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}